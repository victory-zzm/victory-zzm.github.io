<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue连接node搭建的后台服务器</title>
      <link href="/2021/11/29/vue%E8%BF%9E%E6%8E%A5node%E6%90%AD%E5%BB%BA%E7%9A%84%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/11/29/vue%E8%BF%9E%E6%8E%A5node%E6%90%AD%E5%BB%BA%E7%9A%84%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1-后台服务器的设置"><a href="#1-后台服务器的设置" class="headerlink" title="1. 后台服务器的设置"></a>1. 后台服务器的设置</h1><h2 id="1-1-文件夹结构"><a href="#1-1-文件夹结构" class="headerlink" title="1.1 文件夹结构"></a>1.1 文件夹结构</h2><ul><li>nodetest<ul><li>public(静态文件放置处)<ul><li>图片.jpg</li><li>add.html</li><li>index.html</li></ul></li><li>route(二级路由放置处)<ul><li>admin.js</li><li>base.js</li><li>home.js</li></ul></li><li>routeapp.js(一级路由)</li></ul></li></ul><h2 id="1-2-依赖下载"><a href="#1-2-依赖下载" class="headerlink" title="1.2 依赖下载"></a>1.2 依赖下载</h2><ul><li>下载express框架</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express</span><br></pre></td></tr></table></figure><ul><li> body-parser它用于解析客户端请求的body中的内容,内部使用JSON编码处理,url编码处理以及对于文件的上传处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser</span><br></pre></td></tr></table></figure><ul><li>下载nodemon，用于监听app文件的变化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">global</span> nodemon</span><br></pre></td></tr></table></figure><h2 id="1-3-文件内容"><a href="#1-3-文件内容" class="headerlink" title="1.3 文件内容"></a>1.3 文件内容</h2><ul><li>一级路由routeapp.js，服务器的入口文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入跨域</span></span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">//引入二级路由</span></span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&#x27;./route/home&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = <span class="built_in">require</span>(<span class="string">&#x27;./route/admin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">&#x27;./route/base&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置跨域和相应数据格式</span></span><br><span class="line"><span class="comment">// app.use(cors(&#123;</span></span><br><span class="line"><span class="comment">//   origin:[&#x27;http://localhost:3000&#x27;],</span></span><br><span class="line"><span class="comment">//   methods:[&#x27;GET&#x27;,&#x27;PUT&#x27;,&#x27;POST&#x27;],</span></span><br><span class="line"><span class="comment">//   allowedHeaders:[&#x27;Content-Type&#x27;,&#x27;Authorization&#x27;]</span></span><br><span class="line"><span class="comment">// &#125;));</span></span><br><span class="line"><span class="comment">// 设置跨域和相应数据格式(此处可以解决vue中的端口名等不一致产生的跨域问题)</span></span><br><span class="line">app.all(<span class="string">&quot;*&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//设置允许跨域的域名，*代表允许任意域名跨域</span></span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="comment">//允许的header类型</span></span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,<span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept, token, Authorization&quot;</span>);</span><br><span class="line">    <span class="comment">//跨域允许的请求方式   </span></span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,<span class="string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (req.method.toLowerCase() === <span class="string">&#x27;options&#x27;</span>)</span><br><span class="line">        res.send(<span class="number">200</span>);  <span class="comment">//让options尝试请求快速结束</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next();</span><br><span class="line">&#125;);   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截所有请求</span></span><br><span class="line"><span class="comment">// extended:false 方法内部使用querystring模块处理请求参数的格式</span></span><br><span class="line"><span class="comment">// extended:true 方法内部使用第三方模块qs处理请求参数的格式</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line"><span class="comment">// 实现静态资源访问</span></span><br><span class="line">app.use(express.static(path.join(__dirname,<span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>,home);</span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>,admin);</span><br><span class="line">app.use(<span class="string">&#x27;/base&#x27;</span>,base);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功！&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>二级路由文件夹下的admin.js </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = express.Router();</span><br><span class="line"></span><br><span class="line">admin.post(<span class="string">&#x27;/add&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 接受post请求参数</span></span><br><span class="line">  <span class="comment">// console.log(req);</span></span><br><span class="line">  <span class="comment">// res.send(req.body);</span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">40</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 将信息转为字符串的形式返回</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line">  res.send(str);</span><br><span class="line">  <span class="built_in">console</span>.log(obj);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;asdfasdf&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">admin.get(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;欢迎来到博客管理页面&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(req.url);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = admin;</span><br></pre></td></tr></table></figure><ul><li>二级文件夹下的home.js（实现带参数的get接口）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> home = express.Router();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理get请求</span></span><br><span class="line">home.get(<span class="string">&#x27;/index/:id/:name/:sex&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 接收地址栏中问号后面的参数</span></span><br><span class="line">  <span class="comment">// 例如: http://localhost:3000/?name=zhangsan&amp;age=30</span></span><br><span class="line">  <span class="comment">// express框架中使用req.query即可获取GET参数，框架内部会将GET参数转换为对象，并返回</span></span><br><span class="line">  res.send(<span class="string">&#x27;欢迎来到博客首页页面&#x27;</span>,req.params);</span><br><span class="line">  <span class="built_in">console</span>.log(req.url);</span><br><span class="line">  <span class="comment">// console.log(req.query);</span></span><br><span class="line">  <span class="comment">// res.send(req.query);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = home;</span><br></pre></td></tr></table></figure><ul><li>二级路由文件夹下的base.js（实现数据库操作的接口，注意使用此接口时，需要打开指定的数据库）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//引入mysql模块</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="comment">//实现Post请求</span></span><br><span class="line"><span class="keyword">const</span> base = express.Router();</span><br><span class="line"><span class="comment">//链接数据库</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//查询数据的语句</span></span><br><span class="line"><span class="keyword">var</span> sql = <span class="string">&#x27;SELECT * FROM user&#x27;</span>;</span><br><span class="line"></span><br><span class="line">base.post(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// post 方式实现对数据库的查询操作</span></span><br><span class="line">  connection.query(sql,<span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        res.send(<span class="string">&#x27;返回错误！&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------查询----------------&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------查询结束----------------&#x27;</span>);</span><br><span class="line">    res.send(result);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">base.get(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// get 方式实现对数据库的查询操作</span></span><br><span class="line">  connection.query(sql,<span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        res.send(<span class="string">&#x27;返回错误！&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------查询----------------&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------查询结束----------------&#x27;</span>);</span><br><span class="line">    res.send(result);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;返回数据到客户端&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = base ;</span><br></pre></td></tr></table></figure><h2 id="1-4-服务器注意事项"><a href="#1-4-服务器注意事项" class="headerlink" title="1.4 服务器注意事项"></a>1.4 服务器注意事项</h2><ol><li>使用nodemon routeapp.js 先开启服务端</li><li>进入mysql 打开数据库</li><li>进入数据库命令如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql -hlocalhost -uroot -p</span><br><span class="line"><span class="comment">// 密码 123456</span></span><br><span class="line"><span class="comment">//  展示数据库</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment">// 使用某一个数据库</span></span><br><span class="line">use [数据库名称];</span><br><span class="line"><span class="comment">// 展示数据库中的表格</span></span><br><span class="line">show tables;</span><br><span class="line"><span class="comment">// 查询数据库中表的内容</span></span><br><span class="line">select * <span class="keyword">from</span> [数据库名称];</span><br></pre></td></tr></table></figure><h1 id="2-vue实现跨域连接数据库操作"><a href="#2-vue实现跨域连接数据库操作" class="headerlink" title="2. vue实现跨域连接数据库操作"></a>2. vue实现跨域连接数据库操作</h1><h2 id="2-1-搭建好vue项目框架文件"><a href="#2-1-搭建好vue项目框架文件" class="headerlink" title="2.1 搭建好vue项目框架文件"></a>2.1 搭建好vue项目框架文件</h2><ul><li>简单创建vue项目，下载好各种依赖</li><li>实现跨域请求的操作（配置跨域请求文件），在package.json 同级下新建文件 vue.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决跨域的代理</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,   <span class="comment">//build输出目录</span></span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&#x27;assets&#x27;</span>, <span class="comment">//静态资源目录（js, css, img）</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>, <span class="comment">//是否开启eslint</span></span><br><span class="line">    <span class="comment">/* devServer: &#123;</span></span><br><span class="line"><span class="comment">        open: true, //是否自动弹出浏览器页面</span></span><br><span class="line"><span class="comment">        host: &quot;localhost&quot;, </span></span><br><span class="line"><span class="comment">        port: &#x27;8081&#x27;, </span></span><br><span class="line"><span class="comment">        https: false,   //是否使用https协议</span></span><br><span class="line"><span class="comment">        hotOnly: false, //是否开启热更新</span></span><br><span class="line"><span class="comment">        proxy: null,</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">//是否自动弹出浏览器页面</span></span><br><span class="line">      <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, </span><br><span class="line">      <span class="attr">port</span>: <span class="string">&#x27;8081&#x27;</span>,</span><br><span class="line">      <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">hotOnly</span>: <span class="literal">false</span>, </span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">              <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>, <span class="comment">//API服务器的地址</span></span><br><span class="line">              <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="comment">/* pathRewrite: &#123;</span></span><br><span class="line"><span class="comment">                  &#x27;^/api&#x27;: &#x27;&#x27;</span></span><br><span class="line"><span class="comment">              &#125; */</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在主入口文件main.js配置引入axios的使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 配置请求的根地址(这一步不能够省略)</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://localhost:3000&#x27;</span>;</span><br><span class="line"><span class="comment">// let http = axios.create(&#123;</span></span><br><span class="line"><span class="comment">//   baseURL: &#x27;http://localhost:3000&#x27;,</span></span><br><span class="line"><span class="comment">//   // withCredentials:false,</span></span><br><span class="line"><span class="comment">//   headers: &#123;</span></span><br><span class="line"><span class="comment">//     &#x27;Content-Type&#x27;: &#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   timeout:5000</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用原型的方式以便在vue对象中全局使用axios</span></span><br><span class="line">Vue.prototype.$http = axios;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;向后台请求数据&#x27;</span>);</span><br><span class="line"><span class="comment">// 项目初始化时，检测是否能够跨域操作数据库</span></span><br><span class="line">axios.get(<span class="string">&#x27;base/index&#x27;</span>,&#123;<span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;123123&#x27;</span>&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;正在向后台获取数据：&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-2-运行并使用表单提交的方式实现跨域请求"><a href="#2-2-运行并使用表单提交的方式实现跨域请求" class="headerlink" title="2.2 运行并使用表单提交的方式实现跨域请求"></a>2.2 运行并使用表单提交的方式实现跨域请求</h2><ul><li>使用实例home.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;div&gt;欢迎来到首页！&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input id=&quot;username&quot; name type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class="line">      &lt;input id=&quot;age&quot; name type=&quot;password&quot; v-model=&quot;password&quot;&gt;</span><br><span class="line">      &lt;input id=&quot;btn&quot; name type=&quot;button&quot; @click=&quot;getPostData&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HelloWorld&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username:&#x27;&#x27;,</span><br><span class="line">      password:&#x27;&#x27;,</span><br><span class="line">      servedata:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    async getPostData()&#123;</span><br><span class="line">      console.log(&#x27;获取数据&#x27;);</span><br><span class="line">      console.log(this.username,this.password);</span><br><span class="line">      /* await this.$http.get(&#x27;base/index&#x27;,&#123;username:&#x27;zhangsan&#x27;,password:&#x27;123123&#x27;&#125;)</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">          console.log(&#x27;正在向后台获取数据：&#x27;);</span><br><span class="line">          // console.log(res);</span><br><span class="line">          this.servedata = res;</span><br><span class="line">        &#125;).catch(err=&gt;&#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;); */</span><br><span class="line">      const &#123;data:res&#125; = await this.$http.get(&#x27;base/index&#x27;,&#123;username:&#x27;zhangsan&#x27;,password:&#x27;123123&#x27;&#125;)</span><br><span class="line">      console.log(&#x27;获取到数据了吗？&#x27;);</span><br><span class="line">      console.log(res);</span><br><span class="line">      this.$router.push(&#x27;../about&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试网络知识总结</title>
      <link href="/2021/11/13/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2021/11/13/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1-什么是重放攻击，举例说明，防御的方法有哪些？"><a href="#1-什么是重放攻击，举例说明，防御的方法有哪些？" class="headerlink" title="1. 什么是重放攻击，举例说明，防御的方法有哪些？"></a>1. 什么是重放攻击，举例说明，防御的方法有哪些？</h1><ul><li>定义</li></ul><p>入侵者从网络上截取主机A发送给主机B的报文，并把由A加密的报文发送给B，使得主机B误以为入侵者就是主机A，然后主机B向伪装成A的入侵者发送应当发送给A的报文。</p><ul><li>防御手段</li></ul><ol><li>加随机数，这个方法的优点是认证双方不需要时间同步，双方记住使用过的随机数，如发现报文中有以前出现过的随机数，则认为是重放攻击，确定是要额外保存之前使用过的随机数，时间长内存消耗大。</li><li>加时间戳，优点是不需要额外保存其它信息。缺点是认证双方需要准确的事件同步 ，同步越好则收到攻击的可能性就越小。</li><li>加流水号，双方在报文中添加一个逐步递增的整数，只要接收到一个不连续的流水号报文就认为有重放的威胁。但当攻击者对报文解密成功，可以每次欺骗认证端；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript面试总结</title>
      <link href="/2021/11/04/javascript%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>/2021/11/04/javascript%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1-如何判断一个变量是string类型"><a href="#1-如何判断一个变量是string类型" class="headerlink" title="1. 如何判断一个变量是string类型"></a>1. 如何判断一个变量是string类型</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;stringType&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 使用typeof(str)方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(str)); <span class="comment">// string</span></span><br><span class="line"><span class="comment">// 使用Object.prototype.toString.call(str);方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(str)); <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(num)); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="comment">// 使用str.constructor方法</span></span><br><span class="line"><span class="built_in">console</span>.log(str.constructor === <span class="built_in">String</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(num.constructor === <span class="built_in">String</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="2-请用js去除空格字符串"><a href="#2-请用js去除空格字符串" class="headerlink" title="2. 请用js去除空格字符串"></a>2. 请用js去除空格字符串</h1><ol><li>使用replace匹配正则表达式方法</li><li>使用str.trim()方法除去两端的字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;  person One person Two                 &quot;</span>;</span><br><span class="line"><span class="comment">// 使用str.trim()方法，返回一个新的字符串</span></span><br><span class="line"><span class="comment">// trim()方法是用来删除字符串两端的空白字符并返回，trim 方法并不影响原来的字符串本身，它返回的是一个新的字符串。</span></span><br><span class="line"><span class="comment">// 缺陷：只能去除字符串两端的空格，不能去除中间的空格</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trim());</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// 使用replace()方法</span></span><br><span class="line"><span class="keyword">let</span> str1 = str.replace(<span class="regexp">/\s*/g</span>,<span class="string">&quot;&quot;</span>); <span class="comment">// 除去所有空格</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);  <span class="comment">// personOnepersonTwo</span></span><br><span class="line"><span class="keyword">let</span> str2 = str.replace(<span class="regexp">/^\s*/g</span>,<span class="string">&quot;&quot;</span>) <span class="comment">// 除去左边的空格</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"><span class="keyword">let</span> str3 = str.replace(<span class="regexp">/\s*$/g</span>,<span class="string">&quot;&quot;</span>); <span class="comment">// 除去右边的空格</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);</span><br><span class="line"><span class="keyword">let</span> str4 = str.replace(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">&quot;&quot;</span>); <span class="comment">// 除去两边的空格</span></span><br><span class="line"><span class="built_in">console</span>.log(str4); </span><br></pre></td></tr></table></figure><h1 id="3-和-的不同"><a href="#3-和-的不同" class="headerlink" title="3. == 和=== 的不同"></a>3. == 和=== 的不同</h1><ol><li> == 是抽象相等运算符，会进行必要的数据类型转换后在比较</li><li> === 是严格相等运算符，不会进行数据类型转换，会直接返回false</li><li> 使用==时可能会发生一些特别的事情</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==和===的区别,以下均为true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>==<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>==<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>==<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>==<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="4-事件处理"><a href="#4-事件处理" class="headerlink" title="4. 事件处理"></a>4. 事件处理</h1><ol><li><p>事件的三要素：事件源、事件类型、事件处理函数（程序）</p></li><li><p>修改元素的内容可以通过innerText和innerHTML(两者的区别就是：innerText可以获取到标签内的文本内容，想要设置文本内容可以使用innerText或者textContent或者innerHTML，所以说想要设置标签内容，使用innerHtml，推荐使用HTML</p><p>用innerText获取标签中的文本内容的时候，如果文本内容里面还有标签，那么文本内容中的标签是获取不到的，而innerHtml可以获取到文本内容中的标签<br>)</p></li><li><p>修改元素的属性：元素对象.属性名 = 值</p></li><li><p>修改元素的样式属性：元素对象.style.样式属性名 = 值；与元素对象.className = “类名”</p></li><li><p>给元素注册事件的步骤：获取事件、注册事件、编写事件程序</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> baidu = <span class="built_in">document</span>.getElementById(<span class="string">&quot;baidu&quot;</span>);</span><br><span class="line">baidu.addEventListener(<span class="string">&quot;mouseover&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">// 修改样式 元素对象.style.样式属性名 = 值 与 元素对象.className = &quot;类名&quot;</span></span><br><span class="line"><span class="comment">// this.style.color = &quot;red&quot;;</span></span><br><span class="line">baidu.style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">baidu.style.fontSize = <span class="string">&quot;55px&quot;</span>;</span><br><span class="line">baidu.className = <span class="string">&quot;baidu1&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">baidu.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">baidu.className = <span class="string">&quot;baidu1&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>获取特殊元素</li></ol><p>获取body:document.body;</p><p>获取html:document.documentElement;</p><h1 id="5-判断数据是否是数组类型"><a href="#5-判断数据是否是数组类型" class="headerlink" title="5. 判断数据是否是数组类型"></a>5. 判断数据是否是数组类型</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1 <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr1));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(arr1).indexOf(<span class="string">&#x27;Array&#x27;</span>)!==-<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.isPrototypeOf(arr1))</span><br><span class="line"><span class="built_in">console</span>.log(arr1.constructor.toString().indexOf(<span class="string">&quot;Array&quot;</span>)!==-<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h1 id="6-Boolean的类型转换"><a href="#6-Boolean的类型转换" class="headerlink" title="6. Boolean的类型转换"></a>6. Boolean的类型转换</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Boolean类型转换：</span><br><span class="line">1.对于String:只有非空字符串为真</span><br><span class="line">2.对于Number:除了0和NaN之外都为真</span><br><span class="line">3.对于Boolean:true为真</span><br><span class="line">4.对于Object:除了null之外都为真</span><br><span class="line">5.undefined为false;</span><br></pre></td></tr></table></figure><h1 id="7-去除小数位，取整"><a href="#7-去除小数位，取整" class="headerlink" title="7. 去除小数位，取整"></a>7. 去除小数位，取整</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parseFloat(),解析一个字符串，并返回一个浮点数。</span></span><br><span class="line"><span class="comment">// toFixed把数字转换为字符，结果的小数点后有指定位数的数字,按四舍五入取值</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">``</span><span class="keyword">new</span><span class="string">` `</span><span class="built_in">Number</span>(<span class="number">15.7857</span>);</span><br><span class="line"><span class="keyword">var</span> a = num.toFixed(); <span class="string">``</span><span class="comment">//16 无参数，表示小数点后面位数为0位，然后四舍五入</span></span><br><span class="line"><span class="keyword">var</span> b = num.toFixed(<span class="number">1</span>);<span class="string">``</span><span class="comment">//15.8</span></span><br><span class="line"><span class="keyword">var</span> c = num.toFixed(<span class="number">3</span>);<span class="string">``</span><span class="comment">//15.786</span></span><br><span class="line"><span class="keyword">var</span> d = num.toFixed(<span class="number">10</span>); <span class="string">``</span><span class="comment">//多出的补0</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//toPrecision()把数字格式化为指定长度</span></span><br><span class="line"><span class="keyword">var</span> f = num.toPrecision();<span class="string">``</span><span class="comment">//15.7857，无参数，返回原数字</span></span><br><span class="line"><span class="keyword">var</span> g = num.toPrecision(<span class="number">1</span>);<span class="string">``</span><span class="comment">//2e+1，参数小于整数部分位数，返回科学计数</span></span><br><span class="line"><span class="keyword">var</span> h = num.toPrecision(<span class="number">3</span>);<span class="string">``</span><span class="comment">//15.8，也是有四舍五入</span></span><br><span class="line"><span class="keyword">var</span> i = num.toPrecision(<span class="number">10</span>);<span class="string">``</span><span class="comment">//15.78570000，长度不够补0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> one = <span class="number">15.183475</span>;</span><br><span class="line"><span class="comment">// toPrecision()将数字转为指定长度</span></span><br><span class="line"><span class="built_in">console</span>.log(one.toPrecision(<span class="number">4</span>)); <span class="comment">// 15.18</span></span><br><span class="line"><span class="comment">// toFixed() toFixed把数字转换为字符，结果的小数点后有指定位数的数字,按四舍五入取值</span></span><br><span class="line"><span class="built_in">console</span>.log(one.toFixed(<span class="number">3</span>));  <span class="comment">// 15.183</span></span><br></pre></td></tr></table></figure><h1 id="8-二进制运算"><a href="#8-二进制运算" class="headerlink" title="8. 二进制运算"></a>8. 二进制运算</h1><p>假设有如下代码，那么a(10)的返回结果是？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    a^=(<span class="number">1</span>&lt;&lt;<span class="number">4</span>)-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&lt;&lt; 表示左移，先化为2进制，1为01，然后左移4位，成010000，再化为10进制，10000(二进制) = 16(十进制)。 接着a = a ^15 而a = 10，符号^表示异或，也就是比较对应的二进制位是否相同，相同为0，不同为1。 10的二进制 =&gt; 1010 15的二进制 =&gt; 1111 通过异或运算可以得到 0101 再转换成十进制即是5</p>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识查漏补缺</title>
      <link href="/2021/10/26/Vue%E7%9F%A5%E8%AF%86%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/2021/10/26/Vue%E7%9F%A5%E8%AF%86%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1-vue中的性能优化"><a href="#1-vue中的性能优化" class="headerlink" title="1. vue中的性能优化"></a>1. vue中的性能优化</h1><h2 id="1-编码优化"><a href="#1-编码优化" class="headerlink" title="1. 编码优化"></a>1. 编码优化</h2><ol><li>尽量减少Data中的数据，Data中的数据都会增加getter和setter，会收集对应的watcher</li><li>v-if和v-for不能连用</li><li>如果需要使用v-for给没想元素绑定事件时使用事件代理</li><li>SPA页面采用keep-alive缓存组件</li><li>更多的情况下使用v-if代替v-show</li><li>key保证唯一</li><li>使用路由懒加载、异步组件</li><li>防抖节流</li><li>第三方模块按需导入</li><li>长列表滚动到可视区域动态加载</li><li>图片懒加载</li></ol><h2 id="2-用户体验优化"><a href="#2-用户体验优化" class="headerlink" title="2. 用户体验优化"></a>2. 用户体验优化</h2><ol><li>骨架屏</li><li>PWA（渐进式Web应用）</li><li>使用缓存，（客户端缓存、服务端缓存）优化、服务端开启gzip压缩等</li></ol><h2 id="3-SEO-优化"><a href="#3-SEO-优化" class="headerlink" title="3. SEO 优化"></a>3. SEO 优化</h2><ol><li>预渲染</li><li>服务端渲染SSR</li></ol><h2 id="4-打包优化"><a href="#4-打包优化" class="headerlink" title="4. 打包优化"></a>4. 打包优化</h2><ol><li>压缩代码</li><li>使用CDN加载第三方模块</li><li>多线程打包happypack</li></ol><h1 id="2-Vue-实现双向数据绑定的原理"><a href="#2-Vue-实现双向数据绑定的原理" class="headerlink" title="2. Vue 实现双向数据绑定的原理"></a>2. Vue 实现双向数据绑定的原理</h1><p>vue实现双向数据绑定的原理就是利用了Object.defineProperty()这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的</p><p>vue3.0将原生的Proxy替换Object.defineProperty();</p><p>举例：通过控制文本输入框输入变化来控制 span内容的变化，实现model=&gt;view以及view=&gt;model的双向绑定，通过添加事件监听keyup来触发set方法，而set再修改了访问器属性的同时，也修改了DOM的样式，改变了沙盘标签内的文本；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue实现数据绑定原理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;inputId&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;spanId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> target = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    target.handler = <span class="string">&quot;请设置值&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.defineProperty(target,<span class="string">&quot;handler&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> handler;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">set</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        handler = newValue;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;inputId&#x27;</span>).value = handler;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;spanId&#x27;</span>).innerHTML = handler;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//当在文本框输入内容时 让对象里你定义的val等于文本框的值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      target.handler = e.target.value;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-为什么要替换Object-defineProperty-Proxy的优势是？"><a href="#3-为什么要替换Object-defineProperty-Proxy的优势是？" class="headerlink" title="3. 为什么要替换Object.defineProperty?(Proxy的优势是？)"></a>3. 为什么要替换Object.defineProperty?(Proxy的优势是？)</h1><ol><li>在vue中，Object.defineProperty无法监控到数组下标的变化，导致直接通过数组的下标给数组设置值，不能实时响应</li><li>Object.defineProperty只能劫持对象的属性，因此我们需要对每一个对象当每个属性进行遍历。vue2.x中，是通过遍历+递归data对象来实现对数据的监控的，如果属性值也是对象，那么需要深度遍历，显然如果能够劫持到一个完整的对象才是更好的选择</li></ol><p>而要取代它的Proxy有一下的两个优点：</p><ul><li>可以劫持整个对象，并返回一个新对象</li><li>有13中劫持操作</li></ul><p>vue2.x不使用Proxy是因为兼容性问题</p><h1 id="4-为什么避免v-if和v-for用在一起"><a href="#4-为什么避免v-if和v-for用在一起" class="headerlink" title="4. 为什么避免v-if和v-for用在一起"></a>4. 为什么避免v-if和v-for用在一起</h1><p>vue2中v-for的优先级高于v-if，vue3则相反。vue2版本中在一个元素上同时使用v-if和v-for时，v-for会优先作用，造成性能浪费；vue3中的v-if总是优先于v-for生效，导致v-if访问不了v-for中的变量；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-for优先于v-if被解析</span><br><span class="line">如果同时出现，每次渲染都会先执行循环再判断条件，无论如何循环会执行，浪费浏览器性能。</span><br><span class="line">想要避免出现这种情况，需要在外层嵌套template，在这一层进行v-if判断，然后在内部进行v-for循环。</span><br><span class="line">如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项</span><br></pre></td></tr></table></figure><h1 id="5-组件的设计原则"><a href="#5-组件的设计原则" class="headerlink" title="5. 组件的设计原则"></a>5. 组件的设计原则</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1)页面上每个独立的可视/可交互区域视为一个组件(比如页面的头部，尾部，可复用的区块)</span><br><span class="line">(2)每个组件对应一个工程目录，组件所需要的各种资源在这个目录下就近维护(组件的就近维护思想体现了前端的工程化思想，为前端开发提供了很好的分治策略，在vue.js中，通过.vue文件将组件依赖的模板，js，样式写在一个文件中)</span><br><span class="line">(每个开发者清楚开发维护的功能单元，它的代码必然存在在对应的组件目录中，在该目录下，可以找到功能单元所有的内部逻辑)</span><br><span class="line">(3)页面不过是组件的容器，组件可以嵌套自由组合成完整的页面</span><br></pre></td></tr></table></figure><h1 id="6-vue-slot是做什么的？"><a href="#6-vue-slot是做什么的？" class="headerlink" title="6 vue-slot是做什么的？"></a>6 vue-slot是做什么的？</h1><ol><li>主要就是让组件的可扩展性更强，简单点说就是在组件内写其它的内容，后面的vue2.6.0中，我们为具名插槽和作用域插槽引入了一个新的统一的语法(即v-slot指令)。它取代了slot和slot-scope这两个目前已经被非酋但未移除且仍然在文档中的attribute；</li></ol><h1 id="7-对于vue是渐进式框架的理解"><a href="#7-对于vue是渐进式框架的理解" class="headerlink" title="7. 对于vue是渐进式框架的理解"></a>7. 对于vue是渐进式框架的理解</h1><p>渐进式代表的含义是：没有做职责之外的事情</p><p>vue.js只提供了vue-cli生态中最核心的组件系统和双向数据绑定，想vuex,vue-router都属于围绕vue.js开发的库</p><ul><li><p>渐进式框架的意思就是使用vue不强求我们一次性接收并使用它的全部功能特性（大概意思就是你可以只用我一部分，而不是所有内容）</p></li><li><p>场景：刚开始一个项目，开发者对vue的掌握程度不高，可是如果只是使用vue做些基础操作（如页面的渲染、表单的处理提交等）那还是非常简单的，并不需要引入vue其它复杂的功能；</p></li><li><p>随着项目规模逐渐扩大，则可能需要引进前段路由等相对复杂的功能，当然也可以不用；</p></li></ul><h1 id="8-vue的两个核心是什么？"><a href="#8-vue的两个核心是什么？" class="headerlink" title="8.vue的两个核心是什么？"></a>8.vue的两个核心是什么？</h1><p>数据驱动和组件化思想</p><h1 id="9-v-if和v-show-的区别是？"><a href="#9-v-if和v-show-的区别是？" class="headerlink" title="9. v-if和v-show 的区别是？"></a>9. v-if和v-show 的区别是？</h1><p>v-show指令是指通过修改元素的display的CSS属性让其显示或者隐藏</p><p>v-if指令是直接销毁和重建DOM达到让元素显示和隐藏的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">实现方式</span><br><span class="line">v-if是根据后面数据的真假值判断直接从Dom树上删除或重建元素节点</span><br><span class="line">v-show只是在修改元素的css样式，也就是display的属性值，元素始终在Dom树上。</span><br><span class="line">性能消耗</span><br><span class="line">v-if有更高的切换消耗，不适合做频繁的切换</span><br><span class="line">v-show有更高的初始渲染消耗，适合做频繁的切换</span><br><span class="line">编译过程</span><br><span class="line">v-if切换有一个局部编译/卸载的过程，切换过程中适当地销毁和重建内部的事件监听和子组件</span><br><span class="line">v-show只是简单的基于css切换</span><br><span class="line">编译条件</span><br><span class="line">v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译</span><br><span class="line">v-show是在任何条件下（无论首次条件是否为真）都被渲染，然后被缓存，而且DOM元素始终被保留</span><br><span class="line">个人使用</span><br><span class="line">项目开发过程,我一般优先选用v-show,但是当切换效果没有出来时;我会先改为v-if;如果还不行,我才会去检查切换条件是否有问题</span><br><span class="line">大多数时间从v-show改为v-if;切换效果就出来了</span><br></pre></td></tr></table></figure><h1 id="10-v-on（-）可以监听多个方法吗？"><a href="#10-v-on（-）可以监听多个方法吗？" class="headerlink" title="10.v-on（@）可以监听多个方法吗？"></a>10.v-on（@）可以监听多个方法吗？</h1><p>可以，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span> @<span class="attr">focus</span>=<span class="string">&quot;onFocus&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;onBlur&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="11-vue中的key值对作用？"><a href="#11-vue中的key值对作用？" class="headerlink" title="11. vue中的key值对作用？"></a>11. vue中的key值对作用？</h1><p>需要使用key来给每一个结点做一个唯一标识，Diff算法就可以正确的识别此节点，找到正确的位置插入心动结点，所以，key的作用主要是为了高效的更新虚拟DOM</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS刷题查漏补缺</title>
      <link href="/2021/10/15/CSS%E5%88%B7%E9%A2%98%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/2021/10/15/CSS%E5%88%B7%E9%A2%98%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1-text-indent-属性规定文本块中首行文本的缩进"><a href="#1-text-indent-属性规定文本块中首行文本的缩进" class="headerlink" title="1. text-indent 属性规定文本块中首行文本的缩进"></a>1. text-indent 属性规定文本块中首行文本的缩进</h1><p><strong>注释：</strong>允许使用负值。如果使用负值，那么首行会被缩进到左边。</p><h1 id="2-实现水平和垂直居中的几种方法："><a href="#2-实现水平和垂直居中的几种方法：" class="headerlink" title="2.实现水平和垂直居中的几种方法："></a>2.实现水平和垂直居中的几种方法：</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>水平和垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#son</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &lt;!-- 第一种方案 使用定位和平移 --&gt; */</span></span><br><span class="line"> <span class="selector-id">#father</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第二种方案 定位0加margin:auto */</span></span><br><span class="line"> <span class="selector-id">#father</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第三种方案 定位和负margin */</span></span><br><span class="line"> <span class="selector-id">#father</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第四种方案 使用弹性布局flex */</span></span><br><span class="line"> <span class="selector-id">#father</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第五种方案 使用grid布局 */</span></span><br><span class="line"> <span class="selector-id">#father</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  justify-self: center;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-CSS中clear-的作用是什么？"><a href="#3-CSS中clear-的作用是什么？" class="headerlink" title="3. CSS中clear 的作用是什么？"></a>3. CSS中clear 的作用是什么？</h1><p>指明该元素周围不可以出现浮动元素</p><h1 id="4-隐藏的区别"><a href="#4-隐藏的区别" class="headerlink" title="4. 隐藏的区别"></a>4. 隐藏的区别</h1><ol><li>visibility:hidden，所占据的空间位置仍然存在，仅为视觉上的完全透明，不影响结构，故只产生重绘，但不可触发绑定事件；</li><li>display:none; 不为被隐藏的对象保存其物理空间，none指的是元素完全不陈列出来，不占据空间，涉及到了DOM结构，故产生reflow与repaint</li><li>opacity:0； 指的是元素不可见但存在，保留空间，不影响结构，并且如果该元素已经绑定一些事件，如click事件，那么点击该事件也能够触发点击事件的</li></ol><h1 id="5-伪类和伪元素"><a href="#5-伪类和伪元素" class="headerlink" title="5. 伪类和伪元素"></a>5. 伪类和伪元素</h1><ol><li><p>每条选择器最多只能出现一个伪元素</p></li><li><p>:nth-child(an+b)中的n的取值从0开始</p><p>在w3c中 <code>nth-child(n)</code> 是这样描述的：选择器匹配属于其父元素的第 N 个子元素，不论元素的类型 。n 可以是数字、关键词或公式 也就是说 如果括号中为<code>n</code>,<code>2n</code>,<code>3n</code>…这种类型 整个结果就必须<strong>大于0</strong>，也就是<strong>n从1开始</strong></p><p>还有一个公式<code>(an + b)</code>是这样描述的a表示周期的长度（a是一个常数），n 是计数器（从 0 开始），b 是偏移值。可以理解为，<strong>只要an+b的结果大于0，n从0开始</strong></p></li><li><p>伪类本质上是为了弥补常规CSS选择器的不足，以获取到更多的信息；而伪元素本质上是创建了一个有内容的虚拟容器；两者的语法不同，伪类：:link :hover  ，伪元素：::before ::after。两者的<strong>根本区别就在于</strong>：他们是否创建了一个新的元素，这个新创造的元素就叫做伪元素。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6语法总结</title>
      <link href="/2021/10/11/ES6%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2021/10/11/ES6%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1-变量的结构赋值"><a href="#1-变量的结构赋值" class="headerlink" title="1. 变量的结构赋值"></a>1. 变量的结构赋值</h1><h2 id="1-1-数组的解构赋值"><a href="#1-1-数组的解构赋值" class="headerlink" title="1.1 数组的解构赋值"></a>1.1 数组的解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构；</p><ul><li>以前为变量赋值，只能直接赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>ES6解构赋值的形式如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b ,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值;</span></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="keyword">let</span> [foo] = [];</span><br><span class="line"><span class="keyword">let</span> [bar, foo] = [<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 以上两种情况都属于解构不成功，foo的值都会等于undefined。</span></span><br></pre></td></tr></table></figure><ul><li>不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="1-2-对象的解构赋值"><a href="#1-2-对象的解构赋值" class="headerlink" title="1.2 对象的解构赋值"></a>1.2 对象的解构赋值</h2><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">foo <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">bar <span class="comment">// &quot;bbb&quot;</span></span><br><span class="line"><span class="comment">// 解构失败的情况 不存在当前的属性名</span></span><br><span class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量</span></span><br><span class="line">    <span class="keyword">let</span> &#123;log&#125; = <span class="built_in">console</span>; <span class="comment">// 将console.log赋值到log变量</span></span><br><span class="line">    log(<span class="string">&#x27;woshishagua&#x27;</span>);</span><br><span class="line">    <span class="comment">// log(a,b,c);</span></span><br><span class="line">    <span class="keyword">let</span> &#123; sin, cos &#125; = <span class="built_in">Math</span>; <span class="comment">// 将Math对象的正弦、余弦三个方法，赋值到对应的变量上</span></span><br><span class="line">    log(sin,cos);</span><br></pre></td></tr></table></figure><ul><li>对象的解构赋值是下面形式的简写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: foo, <span class="attr">bar</span>: bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure><p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo1</span>: baz1 &#125; = &#123; <span class="attr">foo1</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">baz1</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz1 <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">foo1 <span class="comment">// error: foo1 is not defined</span></span><br><span class="line">log(baz1,foo1);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>foo1</code>是匹配的模式，<code>baz1</code>才是变量。真正被赋值的是变量<code>baz1</code>，而不是模式<code>foo</code>1;</p><ul><li><p>对象解构赋值也可以嵌套解构</p></li><li><p>注意点</p><ol><li>如果要将一个已经声明的变量用于解构赋值，必须非常小心</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure><ol start="2"><li>字符串的解构赋值</li></ol><ul><li>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">a <span class="comment">// &quot;h&quot;</span></span><br><span class="line">b <span class="comment">// &quot;e&quot;</span></span><br><span class="line">c <span class="comment">// &quot;l&quot;</span></span><br><span class="line">d <span class="comment">// &quot;l&quot;</span></span><br><span class="line">e <span class="comment">// &quot;o&quot;</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span>:len&#125; = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-3-解构赋值的作用"><a href="#1-3-解构赋值的作用" class="headerlink" title="1.3 解构赋值的作用"></a>1.3 解构赋值的作用</h2><ol><li>交换变量的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构赋值用于 交换变量的值</span></span><br><span class="line"><span class="keyword">let</span> changeX = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> changeY = <span class="number">2</span>;</span><br><span class="line">[changeX,changeY] = [changeY,changeX];<span class="comment">// 直接交换两个值</span></span><br><span class="line">log(changeX,changeY);</span><br></pre></td></tr></table></figure><ol start="2"><li>从函数中返回多个值</li></ol><p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  从函数返回多个值,以数组的方式返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [one1,two1,three1] = returnArray();</span><br><span class="line"><span class="built_in">console</span>.log(one1,two1,three1); </span><br><span class="line"><span class="comment">//  从函数返回多个值,以对象的方式返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnObject</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">age2</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">height2</span>:<span class="number">188</span>,</span><br><span class="line">    <span class="attr">name2</span>:<span class="string">&#x27;李世民&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;age2,height2,name2&#125; = returnObject();</span><br><span class="line"><span class="built_in">console</span>.log(returnObject());</span><br><span class="line"><span class="built_in">console</span>.log(age2,height2,name2);</span><br></pre></td></tr></table></figure><ol start="3"><li>函数参数的定义</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数参数的定义</span></span><br><span class="line"><span class="comment">// 解构赋值可以方便地将一组参数与变量名对应起来</span></span><br><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oneFunction</span>(<span class="params">[xx1,yy1,zz1]</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xx1,yy1,zz1);</span><br><span class="line">&#125;</span><br><span class="line">oneFunction([<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>]);</span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoFunction</span>(<span class="params">&#123;xx,yy,zz&#125;</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xx,yy,zz);</span><br><span class="line">&#125;</span><br><span class="line">twoFunction(&#123;<span class="attr">xx</span>:<span class="string">&#x27;憨批&#x27;</span>,<span class="attr">yy</span>:<span class="number">18</span>,<span class="attr">zz</span>:<span class="string">&#x27;爱吃海底捞&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>提取JSON字符串</p><p>解构赋值对提取 JSON 对象中的数据，尤其有用</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对JSON对象进行解构赋值</span></span><br><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"><span class="built_in">console</span>.log(id, status, number);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>遍历map()结构</p><p>Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便；</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">map.set(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&quot; is &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>输入模块的指定方法</p><p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="built_in">require</span>(<span class="string">&quot;source-map&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="2-运算符的扩展"><a href="#2-运算符的扩展" class="headerlink" title="2. 运算符的扩展"></a>2. 运算符的扩展</h1><h2 id="2-1-指数运算符【-】："><a href="#2-1-指数运算符【-】：" class="headerlink" title="2.1 指数运算符【**】："></a>2.1 指数运算符【**】：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>**<span class="number">8</span>);  <span class="comment">//256</span></span><br></pre></td></tr></table></figure><ul><li>这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(2**3**2); //512 相当于 2 ** (3 ** 2)</span><br></pre></td></tr></table></figure><ul><li>指数运算符可以与等号结合，形成一个新的赋值运算符：（**=）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">a **= <span class="number">2</span>; <span class="comment">// 相当于a*a;</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h2 id="2-2-链判断运算符【-】"><a href="#2-2-链判断运算符【-】" class="headerlink" title="2.2 链判断运算符【?.】"></a>2.2 链判断运算符【?.】</h2><p>使用举例：读取某个对象内的某个属性，比如，读取<code>message.body.user.firstName</code>这个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">const</span>  firstName = message.body.user.firstName || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">const</span> firstName = (message</span><br><span class="line">  &amp;&amp; message.body</span><br><span class="line">  &amp;&amp; message.body.user</span><br><span class="line">  &amp;&amp; message.body.user.firstName) || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链判断符的写法</span></span><br><span class="line"><span class="keyword">const</span> firstName = message?.body?.user?.firstName || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="comment">//上面代码使用了?.运算符，直接在链式调用的时候判断</span></span><br><span class="line"><span class="comment">//左侧的对象是否为null或undefined</span></span><br><span class="line"><span class="comment">//如果是的，就不再往下运算，而是返回undefined。</span></span><br></pre></td></tr></table></figure><p>链判断运算符<code>?.</code>有三种写法。</p><ul><li><code>obj?.prop</code> // 对象属性是否存在</li><li><code>obj?.[expr]</code> // 同上</li><li><code>func?.(...args)</code> // 函数或对象方法是否存在</li></ul><h2 id="2-3-NULL-判断符【-】"><a href="#2-3-NULL-判断符【-】" class="headerlink" title="2.3 NULL 判断符【??】"></a>2.3 NULL 判断符【??】</h2><p>读取对象属性的时候，如果某个属性的值是<code>null</code>或<code>undefined</code>，有时候需要为它们指定默认值。常见做法是通过<code>||</code>运算符指定默认值；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> headerText = response.settings.headerText || <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> animationDuration = response.settings.animationDuration || <span class="number">300</span>;</span><br><span class="line"><span class="keyword">const</span> showSplashScreen = response.settings.showSplashScreen || <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>上面的三行代码都通过<code>||</code>运算符指定默认值，但是这样写是错的。开发者的原意是，只要属性的值为<code>null</code>或<code>undefined</code>，默认值就会生效，但是属性的值如果为空字符串或<code>false</code>或<code>0</code>，默认值也会生效；</p><p><a href="https://github.com/tc39/proposal-nullish-coalescing">ES2020</a> 引入了一个新的 Null 判断运算符<code>??</code>。它的行为类似<code>||</code>，但是只有运算符左侧的值为<code>null</code>或<code>undefined</code>时，才会返回右侧的值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> headerText = response.settings.headerText ?? <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> animationDuration = response.settings.animationDuration ?? <span class="number">300</span>;</span><br><span class="line"><span class="keyword">const</span> showSplashScreen = response.settings.showSplashScreen ?? <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>上面代码中，默认值只有在左侧属性值为<code>null</code>或<code>undefined</code>时，才会生效，这个运算符的一个目的，就是跟链判断运算符<code>?.</code>配合使用，为<code>null</code>或<code>undefined</code>的值设置默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animationDuration = response.settings?.animationDuration ?? <span class="number">300</span>;</span><br></pre></td></tr></table></figure><p><strong>注意</strong> :  ?? 是逻辑运算，在使用的时候记得添加小括号()，防止优先级的问题；</p><h2 id="2-4-逻辑赋值运算符"><a href="#2-4-逻辑赋值运算符" class="headerlink" title="2.4  逻辑赋值运算符"></a>2.4  逻辑赋值运算符</h2><p>即是将逻辑运算与赋值运算相结合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 或赋值运算符</span></span><br><span class="line">x ||= y</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">x || (x = y)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与赋值运算符</span></span><br><span class="line">x &amp;&amp;= y</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">x &amp;&amp; (x = y)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Null 赋值运算符</span></span><br><span class="line">x ??= y</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">x ?? (x = y)</span><br></pre></td></tr></table></figure><p>使用举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 老的写法</span></span><br><span class="line">user.id = user.id || <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 新的写法</span></span><br><span class="line">user.id ||= <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  opts.foo ??= <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">  opts.baz ??= <span class="string">&#x27;qux&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Symbol"><a href="#3-Symbol" class="headerlink" title="3. Symbol"></a>3. Symbol</h1><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因;</p><p>ES6 引入了一种新的<strong>原始数据类型<code>Symbol</code>，表示独一无二的值</strong>。它是 JavaScript 语言的第七种数据类型，前六种是：<code>undefined</code>、<code>null</code>、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有参数的情况</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数的情况</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="3-1-Symbol-prototype-description-创建Symbol时添加一个描述"><a href="#3-1-Symbol-prototype-description-创建Symbol时添加一个描述" class="headerlink" title="3.1 Symbol.prototype.description(创建Symbol时添加一个描述)"></a>3.1 Symbol.prototype.description(创建Symbol时添加一个描述)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);  <span class="comment">// sym的描述就是字符串foo</span></span><br></pre></td></tr></table></figure><p>新增的一个实例属性<code>description</code>，直接返回 Symbol 的描述，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">sym.description <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-作为属性名的Symbol（防止重写）"><a href="#3-2-作为属性名的Symbol（防止重写）" class="headerlink" title="3.2 作为属性名的Symbol（防止重写）"></a>3.2 作为属性名的Symbol（防止重写）</h2><p>能防止某一个键被不小心改写或覆盖；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, mySymbol, &#123; <span class="attr">value</span>: <span class="string">&#x27;Hello!&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上写法都得到同样结果</span></span><br><span class="line">a[mySymbol] <span class="comment">// &quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>，Symbol 值作为对象属性名时，不能用点运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line">a.mySymbol = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line">a[mySymbol] <span class="comment">// undefined</span></span><br><span class="line">a[<span class="string">&#x27;mySymbol&#x27;</span>] <span class="comment">// &quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，因为点运算符后面总是字符串，所以不会读取<code>mySymbol</code>作为标识名所指代的那个值，导致<code>a</code>的属性名实际上是一个字符串，而不是一个 Symbol 值。</p><h2 id="3-3-Symbol作为属性名时，不会被for…in、for…of遍历"><a href="#3-3-Symbol作为属性名时，不会被for…in、for…of遍历" class="headerlink" title="3.3 Symbol作为属性名时，不会被for…in、for…of遍历"></a>3.3 Symbol作为属性名时，不会被for…in、for…of遍历</h2><p>作为对象当属性名时，它也不是私有属性，具有<code>Object.getOwnPropertySymbols()</code>方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">obj[b] = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectSymbols = <span class="built_in">Object</span>.getOwnPropertySymbols(obj);</span><br><span class="line"></span><br><span class="line">objectSymbols</span><br><span class="line"><span class="comment">// [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure><h1 id="4-Set和Map数据结构"><a href="#4-Set和Map数据结构" class="headerlink" title="4. Set和Map数据结构"></a>4. Set和Map数据结构</h1><h2 id="4-1-Set结构（可比作集合）"><a href="#4-1-Set结构（可比作集合）" class="headerlink" title="4.1 Set结构（可比作集合）"></a>4.1 Set结构（可比作集合）</h2><ul><li>它与数组类似，但是它的成员的值都是唯一的，没有重复的值，在判断值是否相等时采用的是精确相等运算符（===）,唯一区别就是NaN会认为相等于自身；</li><li><code>Set</code>本身是一个构造函数，用来生成 Set 数据结构。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="params">x</span>=&gt;</span>s.add(x)); <span class="comment">// 通过add()方法向set结构中添加成员</span></span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> s )&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 1,2,3,4,5,6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>set结构可以接收一个函数作为参数用来初始化；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(s2); <span class="comment">// 1,3,5,7,9</span></span><br><span class="line"><span class="built_in">console</span>.log(s2.size); <span class="comment">// 长度为5</span></span><br></pre></td></tr></table></figure><ol start="2"><li>set结构可以除去数组中重复的元素</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">// 注意此处的...运算符不可省略</span></span><br><span class="line">arr = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><ol start="3"><li>set结构可以除去字符串中重复的字符</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...new <span class="built_in">Set</span>(<span class="string">&#x27;ababbc&#x27;</span>)]; <span class="comment">// 注意此时是一个 字符串数组[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;];</span></span><br><span class="line">[...new <span class="built_in">Set</span>(<span class="string">&#x27;ababbc&#x27;</span>)].join(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 结果是将字符串ababbc转为没有重复字符的字符串abc</span></span><br></pre></td></tr></table></figure><h2 id="4-2-set结构的属性和方法"><a href="#4-2-set结构的属性和方法" class="headerlink" title="4.2 set结构的属性和方法"></a>4.2 set结构的属性和方法</h2><ol><li><p>Set结构实例有如下属性</p><ul><li>Set.prototype.constructor: 构造函数，默认就是Set函数</li><li>Set.prototype.size: 返回Set实例的成员总数</li></ul></li><li><p>Set实例方法一：操作方法（用于操作数据）</p><ul><li>Set.prototype.add(value): 添加某个值，返回Set结构本身；</li><li>Set.prototype.delete(value): 删除某个值，返回一个布尔值，表示是否成功删除；</li><li>Set.prototype.has(value): 返回一个布尔值，表示该值是否是当前Set实例的一个成员；</li><li>Set.prototype.clear(): 清空当前实例的所有成员；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set实例方法操作展示</span></span><br><span class="line"><span class="keyword">let</span> oneSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">oneSet.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">8</span>).add(<span class="number">1</span>); <span class="comment">//注意此处1被添加了两次</span></span><br><span class="line"><span class="built_in">console</span>.log(oneSet); <span class="comment">// 1,2,8</span></span><br><span class="line">oneSet.delete(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(oneSet);</span><br><span class="line"><span class="built_in">console</span>.log(oneSet.has(<span class="number">3</span>));<span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(oneSet.clear()); <span class="comment">//undefined 因为被删除完毕</span></span><br></pre></td></tr></table></figure><ul><li>Array.from(setItem) 方法可以将Set结构转为数组与(return <strong>[…new Set(array)]</strong>;)类似</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrOne = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> setItem = <span class="keyword">new</span> <span class="built_in">Set</span>(arrOne);</span><br><span class="line"><span class="keyword">let</span> arrNew = <span class="built_in">Array</span>.from(setItem);</span><br><span class="line"><span class="built_in">console</span>.log(arrNew);</span><br></pre></td></tr></table></figure><p>这就提供了除去数组中重复元素的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupe</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array)); <span class="comment">//等同于下面</span></span><br><span class="line">  <span class="comment">// return [...new Set(array)];</span></span><br><span class="line">&#125;</span><br><span class="line">dedupe([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>Set实例方法二：遍历方法，用于遍历数据</p><ul><li>Set.prototype.keys(): 返回键名的遍历器</li><li>Set.prototype.values(): 返回键值的遍历器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item); <span class="comment">// red green blue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Set.prototype.entries(): 返回键值对的遍历器</p></li><li><p>set.prototype.forEach(): 使用回调函数遍历每一个成员</p><ul><li>Set 结构的实例与数组一样，也拥有<code>forEach</code>方法，用于对每个成员执行某种操作，没有返回值;</li><li><code>forEach</code>方法还可以有第二个参数，表示绑定处理函数内部的<code>this</code>对象;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setTwo = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line">setTwo.forEach(<span class="function">(<span class="params">value,key</span>)=&gt;</span><span class="built_in">console</span>.log(value+<span class="string">&#x27;:&#x27;</span>+key));</span><br><span class="line"><span class="comment">// red : red</span></span><br><span class="line"><span class="comment">// green : green</span></span><br><span class="line"><span class="comment">// blue : blue</span></span><br></pre></td></tr></table></figure></li></ul><p>Set的遍历顺序就是插入顺序；</p><ul><li>Set结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype[<span class="built_in">Symbol</span>.iterator] === <span class="built_in">Set</span>.prototype.values; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这就意味着可以省略values方法，直接用for…of循环遍历Set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setTwo = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> setTwo)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// red green blue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>遍历的运用</p><p>扩展运算符（<code>...</code>）内部使用<code>for...of</code>循环，所以也可以用于 Set 结构，可用于出去重复的元素</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let setTwo = new Set([&#x27;red&#x27;,&#x27;green&#x27;,&#x27;blue&#x27;]);</span><br><span class="line">// 扩展运算符的应用</span><br><span class="line">console.log([...setTwo]);</span><br><span class="line">let setThree = new Set([1,2,3,4,1,2,3,4]);</span><br><span class="line">console.log([...setThree]); // 1,2,3,4 除去重复的元素</span><br></pre></td></tr></table></figure><p>​        并且数组中的map，filter方法也可以间接用于Set结构；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log([...set1].map(<span class="function"><span class="params">x</span>=&gt;</span>&#123;<span class="keyword">return</span> x*<span class="number">2</span>;&#125;)); <span class="comment">// 2,4,6,8,10</span></span><br><span class="line"><span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log([...set2].filter(<span class="function"><span class="params">x</span>=&gt;</span>&#123;<span class="keyword">return</span> x&gt;=<span class="number">7</span>&#125;)); <span class="comment">// 9,8,7</span></span><br></pre></td></tr></table></figure><p>​        使用Set结构实现并集，交集，和差集；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br><span class="line"><span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Set</span>([...set1,...set2])); <span class="comment">// 1,2,3,4,5,6,7,8,9</span></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="built_in">console</span>.log([...set1].filter(<span class="function"><span class="params">x</span>=&gt;</span>&#123;<span class="keyword">return</span> set2.has(x)&#125;)); <span class="comment">// 4,5,6</span></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="built_in">console</span>.log([...set1].filter(<span class="function"><span class="params">x</span>=&gt;</span>&#123;<span class="keyword">return</span> !set2.has(x)&#125;)); <span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-3-WeakSet-结构与-Set-类似，也是不重复的值的集合"><a href="#4-3-WeakSet-结构与-Set-类似，也是不重复的值的集合" class="headerlink" title="4.3 WeakSet 结构与 Set 类似，也是不重复的值的集合"></a>4.3 WeakSet 结构与 Set 类似，也是不重复的值的集合</h2><ul><li>WeakSet 的成员只能是对象，而不能是其他类型的值</li></ul><ol><li><p>WeakSet结构有三个方法</p><p>WeakSet.prototype.add(value): 向实例中添加一个新成员</p><p>WeakSet.prototype.delete(value): 清除实例中的指定成员</p><p>WeakSet.prototype.has(value): 返回一个布尔值，表示某个值是否在实例中</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">const</span> windows = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;窗户&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">ws.add(windows);</span><br><span class="line">ws.add(person);</span><br><span class="line"><span class="built_in">console</span>.log(ws.has(windows)); <span class="comment">// true</span></span><br><span class="line">ws.delete(windows);</span><br><span class="line"><span class="built_in">console</span>.log(ws.has(windows)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>WeakSet的使用注意</strong></p><p>WeakSet 不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏</p></li></ol><h2 id="4-4-Map数据结构"><a href="#4-4-Map数据结构" class="headerlink" title="4.4 Map数据结构"></a>4.4 Map数据结构</h2><p>Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适</p><h3 id="4-4-1Map属性和操作方法"><a href="#4-4-1Map属性和操作方法" class="headerlink" title="4.4.1Map属性和操作方法"></a>4.4.1Map属性和操作方法</h3><ol><li>size属性，返回Map数据结构的成员总数；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map1.set(<span class="string">&#x27;foo&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">map1.set(<span class="string">&#x27;person&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map1.size); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Map.prototype.set(key,value); </li></ol><p><code>set</code>方法设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个 Map 结构。如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>)        <span class="comment">// 键是字符串</span></span><br><span class="line">m.set(<span class="number">262</span>, <span class="string">&#x27;standard&#x27;</span>)     <span class="comment">// 键是数值</span></span><br><span class="line">m.set(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>)    <span class="comment">// 键是 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br></pre></td></tr></table></figure><p>另外可以通过链式调用的方式来创建新的键：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="string">&#x27;person&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;money&#x27;</span>,<span class="number">1800</span>)</span><br><span class="line">  .set(<span class="number">18</span>,<span class="string">&#x27;李世民&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Map.prototype.get(key);</p><p>get()方法用来读取响应的值，如果找不到key，就返回undefined;</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="string">&#x27;person&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;money&#x27;</span>,<span class="number">1800</span>)</span><br><span class="line">  .set(<span class="number">18</span>,<span class="string">&#x27;李世民&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="number">18</span>));</span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="string">&#x27;money&#x27;</span>))</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Map.prototype.has(key);</p><p>has()方法返回一个布尔值，表示某个键是否在当前的对象中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="string">&#x27;person&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;money&#x27;</span>,<span class="number">1800</span>)</span><br><span class="line">  .set(<span class="number">18</span>,<span class="string">&#x27;李世民&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.has(<span class="string">&#x27;money&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>Map.prototype.delete(key);</p><p>表示删除某个键，删除成功返回true，删除失败返回false;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(m.delete(<span class="string">&#x27;money&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>Map.prototype.clear(); 清空所有元素，没有返回值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.cleat();</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-4-2-遍历方法"><a href="#4-4-2-遍历方法" class="headerlink" title="4.4.2 遍历方法"></a>4.4.2 遍历方法</h3><ol><li>Map.prototype.keys(): 返回键名的遍历器</li><li>Map.prototype.values(): 返回键值的遍历器</li><li>Map.prototype.entries(): 返回所有成员的遍历器</li><li>Map.prototype.forEach(): 遍历Map的所有成员</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="string">&#x27;person&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;money&#x27;</span>,<span class="number">1800</span>)</span><br><span class="line">  .set(<span class="number">18</span>,<span class="string">&#x27;李世民&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;stock&#x27;</span>,<span class="string">&#x27;股票&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;company&#x27;</span>,<span class="string">&#x27;恒瑞医药&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;fund&#x27;</span>,<span class="string">&#x27;中概互联网&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(m.keys());</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> m.keys())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> m.values())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> m.entries())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item[<span class="number">0</span>],item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">m.forEach(<span class="function">(<span class="params">key,value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：Map实例的遍历顺序就是插入顺序；</p><ul><li>Map结构转为数组结构使用扩展运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log([...map.values()]); <span class="comment">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log([...map.keys()]); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log([...map.entries()]); <span class="comment">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span></span><br><span class="line"><span class="built_in">console</span>.log([...map]); <span class="comment">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span></span><br></pre></td></tr></table></figure><ul><li>Map结合数组的filter实现遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map0 = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  .set(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  .set(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">  [...map0].filter(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> &#123; <span class="keyword">return</span> k &lt; <span class="number">3</span>;&#125;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 产生 Map 结构 &#123;1 =&gt; &#x27;a&#x27;, 2 =&gt; &#x27;b&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map1);</span><br></pre></td></tr></table></figure><h3 id="4-4-3-Map数据结构与其它数据结构的转换"><a href="#4-4-3-Map数据结构与其它数据结构的转换" class="headerlink" title="4.4.3 Map数据结构与其它数据结构的转换"></a>4.4.3 Map数据结构与其它数据结构的转换</h3><ol><li><p>Map转数组，使用扩展运算符(…)</p></li><li><p>数组转map，使用map构造函数</p></li><li><p>Map转为对象</p></li><li><p>对象转为 Map 可以通过<code>Object.entries()</code></p></li><li><p>Map转JSON(1. map的键为字符串的情况,转为对象JSON 2.map中的键含有非字符串,转为数组JSON)</p></li><li><p>JSON转map</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map0 = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="string">&#x27;person&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;stock&#x27;</span>,<span class="string">&#x27;股票&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;company&#x27;</span>,<span class="string">&#x27;恒瑞医药&#x27;</span>)</span><br><span class="line">  .set(<span class="string">&#x27;fund&#x27;</span>,<span class="string">&#x27;中概互联网&#x27;</span>);</span><br><span class="line"><span class="comment">// map 转数组</span></span><br><span class="line"><span class="built_in">console</span>.log([...map0]); </span><br><span class="line"><span class="keyword">let</span> arr = [[<span class="string">&#x27;person&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>],[<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>],[<span class="string">&#x27;country&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组转map</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Map</span>(arr)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// map 转对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeObj</span>(<span class="params">map0</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> changeObject = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> map0.entries())&#123;</span><br><span class="line">    changeObject[item[<span class="number">0</span>]] = item[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> changeObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = changeObj(map0);</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象转map</span></span><br><span class="line"><span class="keyword">let</span> newObj = &#123;</span><br><span class="line">  <span class="attr">person</span>:<span class="string">&#x27;刘恒&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;汉文帝&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(newObj)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map转JSON(map的键为字符串的情况,转为对象JSON)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(changeObj(map0)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map转JSON(map中的键含有非字符串,转为数组JSON)</span></span><br><span class="line"><span class="keyword">let</span> map1 = map0;</span><br><span class="line">map1.set(<span class="number">1</span>,<span class="string">&#x27;转为数组JSON&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify([...map1]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON转map</span></span><br><span class="line"><span class="comment">// let jsonMap = JSON.stringify(changeObj(map0));</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToStrMap</span>(<span class="params">jsonStr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// JSON.parse 将字符串转为对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(<span class="built_in">JSON</span>.parse(jsonStr)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(jsonToStrMap(<span class="string">&#x27;&#123;&quot;yes&quot;: true, &quot;no&quot;: false&#125;&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="4-5-weakMap数据结构"><a href="#4-5-weakMap数据结构" class="headerlink" title="4.5 weakMap数据结构"></a>4.5 weakMap数据结构</h2><ul><li><code>WeakMap</code>结构与<code>Map</code>结构类似，也是用于生成键值对的集合，但是weakMap只接受对象类型的键值对，如果将数值<code>1</code>和<code>Symbol</code>值作为 WeakMap 的键名，都会报错；</li></ul><p>其次，<code>WeakMap</code>的键名所指向的对象，不计入垃圾回收机制。</p><p><code>WeakMap</code>的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。请看下面的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> e1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> e2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [e1, <span class="string">&#x27;foo 元素&#x27;</span>],</span><br><span class="line">  [e2, <span class="string">&#x27;bar 元素&#x27;</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>上面代码中，<code>e1</code>和<code>e2</code>是两个对象，我们通过<code>arr</code>数组对这两个对象添加一些文字说明。这就形成了<code>arr</code>对<code>e1</code>和<code>e2</code>的引用。</p><p>一旦不再需要这两个对象，我们就必须手动删除这个引用，否则垃圾回收机制就不会释放<code>e1</code>和<code>e2</code>占用的内存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要 e1 和 e2 的时候</span></span><br><span class="line"><span class="comment">// 必须手动删除引用</span></span><br><span class="line">arr [<span class="number">0</span>] = <span class="literal">null</span>;</span><br><span class="line">arr [<span class="number">1</span>] = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>上面这样的写法显然很不方便。一旦忘了写，就会造成内存泄露。</p><p>WeakMap 就是为了解决这个问题而诞生的，它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。</p><p>基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。一个典型应用场景是，在网页的 DOM 元素上添加数据，就可以使用<code>WeakMap</code>结构。当该 DOM 元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;example&#x27;</span>);</span><br><span class="line"></span><br><span class="line">wm.set(element, <span class="string">&#x27;some information&#x27;</span>);</span><br><span class="line">wm.get(element) <span class="comment">// &quot;some information&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，先新建一个 WeakMap 实例。然后，将一个 DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对<code>element</code>的引用就是弱引用，不会被计入垃圾回收机制。</p><ul><li>总之，<code>WeakMap</code>的专用场合就是，它的键所对应的对象，可能会在将来消失。<code>WeakMap</code>结构有助于防止内存泄漏。</li></ul><h3 id="4-5-1-weakMap语法"><a href="#4-5-1-weakMap语法" class="headerlink" title="4.5.1 weakMap语法"></a>4.5.1 weakMap语法</h3><ol><li>与weakMap与Map的API主要差别在于，一是没有遍历操作（即没有<code>keys()</code>、<code>values()</code>和<code>entries()</code>方法），也没有<code>size</code>属性。</li><li>无法清空，即是没有clear()方法；</li><li>weakMap只有4个方法可以用，即是get(),set(),has(),delete();</li></ol><p>注意：<strong>WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用</strong>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> key = &#123;&#125;;</span><br><span class="line">wm.set(key,person);</span><br><span class="line"><span class="built_in">console</span>.log(wm);</span><br><span class="line">person = <span class="literal">null</span>; <span class="comment">// 此处体现了引用的只是键名，键值正常引用</span></span><br><span class="line"><span class="built_in">console</span>.log(wm.get(key));</span><br></pre></td></tr></table></figure><h2 id="4-6-weakRef数据结构，用于直接创建对象的弱引用"><a href="#4-6-weakRef数据结构，用于直接创建对象的弱引用" class="headerlink" title="4.6 weakRef数据结构，用于直接创建对象的弱引用"></a>4.6 weakRef数据结构，用于直接创建对象的弱引用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> wr = <span class="keyword">new</span> WeakRef(target);</span><br></pre></td></tr></table></figure><p>上面示例中，<code>target</code>是原始对象，构造函数<code>WeakRef()</code>创建了一个基于<code>target</code>的新对象<code>wr</code>。这里，<code>wr</code>就是一个 WeakRef 的实例，属于对<code>target</code>的弱引用，垃圾回收机制不会计入这个引用，也就是说，<code>wr</code>的引用不会妨碍原始对象<code>target</code>被垃圾回收机制清除。</p><p>WeakRef 实例对象有一个<code>deref()</code>方法，如果原始对象存在，该方法返回原始对象；如果原始对象已经被垃圾回收机制清除，该方法返回<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> wr = <span class="keyword">new</span> WeakRef(target);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = wr.deref();</span><br><span class="line"><span class="keyword">if</span> (obj) &#123; <span class="comment">// target 未被垃圾回收机制清除</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例中，<code>deref()</code>方法可以判断原始对象是否已被清除。</p><h1 id="5-Proxy-代理"><a href="#5-Proxy-代理" class="headerlink" title="5. Proxy(代理)"></a>5. Proxy(代理)</h1><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”；</p><ul><li>实例的生成，ES6原生提供Proxy构造函数，用来生成Proxy实例；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler);</span><br></pre></td></tr></table></figure><p>Proxy对象当所有用法，都是上面的形式，不同的只是handler参数的写法，其中，new Proxy()表示生成一个Proxy实例，target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定义拦截行为；</p><h2 id="5-1-Proxy实例方法的使用"><a href="#5-1-Proxy实例方法的使用" class="headerlink" title="5.1 Proxy实例方法的使用"></a>5.1 Proxy实例方法的使用</h2><h3 id="5-1-1get-方法"><a href="#5-1-1get-方法" class="headerlink" title="5.1.1get()方法"></a>5.1.1get()方法</h3><ol><li><code>get</code>方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">country</span>: <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person,&#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target,propKey</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(propKey <span class="keyword">in</span> target)&#123;</span><br><span class="line">    <span class="keyword">return</span> target[propKey];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">&quot;Prop name &quot;</span>+propKey +<span class="string">&quot; does not exist!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.name);  <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.tall); <span class="comment">// ReferenceError: Prop name tall does not exist!</span></span><br></pre></td></tr></table></figure><p>上面代码表示，如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回<code>undefined</code>；</p><p>注意：get()方法可以继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对读取的拦截</span></span><br><span class="line"><span class="keyword">let</span> proto = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;,&#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target,propKey,receiver</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;GET&#x27;</span>,propKey,target);</span><br><span class="line">    <span class="keyword">return</span> target[propKey];</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proto);</span><br><span class="line">obj.foo; <span class="comment">// 此处是读取操作，因此会被拦截，如果是写操作如：(obj.foo=&quot;张三&quot;),则不会被get拦截</span></span><br></pre></td></tr></table></figure><p>上面代码中，拦截操作定义在<code>Prototype</code>对象上面，所以如果读取<code>obj</code>对象继承的属性时，拦截会生效。</p><p>下面的例子使用<code>get</code>拦截，实现数组读取负数的索引(待补充）：</p><h3 id="5-1-2-set-方法"><a href="#5-1-2-set-方法" class="headerlink" title="5.1.2 set()方法"></a>5.1.2 set()方法</h3><p>set方法用来拦截某个属性的赋值操作，可以接收4个参数，依次为目标对象、属性名、属性值和Proxy实例本身，最后一个参数可选；</p><p><strong>举例：</strong> 假定<code>Person</code>对象有一个<code>age</code>属性，该属性应该是一个不大于 200 的整数，那么可以使用<code>Proxy</code>保证<code>age</code>的属性值符合要求；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对赋值的拦截</span></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">obj,name,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name = <span class="string">&#x27;age&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value&gt;=<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">&quot;error,您所设置的值过大！！！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">Number</span>.isInteger(value))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;The age is not an integer!!!&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 满足条件则直接保存</span></span><br><span class="line">    obj[name]=value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;,handler);</span><br><span class="line">person.age = <span class="number">100</span>;</span><br><span class="line">person.age = <span class="number">1000</span>; <span class="comment">// error,您所设置的值过大！！！</span></span><br><span class="line">person.age = <span class="string">&#x27;stupid&#x27;</span>; <span class="comment">// The age is not an integer!!!</span></span><br></pre></td></tr></table></figure><ul><li>set和get方法的结合，实现私有变量不让修改；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// get 结合 set</span></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">    isFlag(key,<span class="string">&#x27;get&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> target[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target,key,value</span>)</span>&#123;</span><br><span class="line">    isFlag(key,<span class="string">&#x27;set&#x27;</span>);</span><br><span class="line">    target[key] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFlag</span>(<span class="params">key,action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(key[<span class="number">0</span>]===<span class="string">&#x27;_&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private &quot;<span class="subst">$&#123;key&#125;</span>&quot; property`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler);</span><br><span class="line">proxy._prop;</span><br><span class="line">proxy._prop = <span class="string">&#x27;set&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="5-1-2-apply-方法"><a href="#5-1-2-apply-方法" class="headerlink" title="5.1.2 apply()方法"></a>5.1.2 apply()方法</h3><ul><li><p>含义</p><p>apply方法拦截函数的调用，call和apply操作</p><p>apply方法可以接收三个参数，分别是目标对象、目标对象当上下文对象（this）和目标对象当参数数组；</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply()方法</span></span><br><span class="line"><span class="keyword">let</span> twice = &#123;</span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">target, ctx, args</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(...arguments)*<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(sum,twice);</span><br><span class="line"><span class="built_in">console</span>.log(proxy(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">proxy.call(<span class="literal">null</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="comment">// 22</span></span><br><span class="line">proxy.apply(<span class="literal">null</span>, [<span class="number">7</span>, <span class="number">8</span>]) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>上面代码中，每当执行<code>proxy</code>函数（直接调用或<code>call</code>和<code>apply</code>调用），就会被<code>apply</code>方法拦截；</p><h3 id="5-1-4-has-方法"><a href="#5-1-4-has-方法" class="headerlink" title="5.1.4 has()方法"></a>5.1.4 has()方法</h3><p><code>has()</code>方法用来拦截<code>HasProperty</code>操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是<code>in</code>运算符。</p><p><code>has()</code>方法可以接受两个参数，分别是目标对象、需查询的属性名。</p><p>下面的例子使用<code>has()</code>方法隐藏某些属性，不被<code>in</code>运算符发现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  <span class="attr">_foo</span>: <span class="string">&#x27;_prop&#x27;</span>,</span><br><span class="line">  <span class="attr">person</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key[<span class="number">0</span>]===<span class="string">&#x27;_&#x27;</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;该属性不存在&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;_foo&#x27;</span> <span class="keyword">in</span> proxy); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person&#x27;</span> <span class="keyword">in</span> proxy); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>值得注意的是，<code>has()</code>方法拦截的是<code>HasProperty</code>操作，而不是<code>HasOwnProperty</code>操作，即<code>has()</code>方法不判断一个属性是对象自身的属性，还是继承的属性;</p><h1 id="6-Reflect结构"><a href="#6-Reflect结构" class="headerlink" title="6.Reflect结构"></a>6.Reflect结构</h1><p>含义：Reflect对象与Proxy对象一样，也是ES6为了操作对象而提供的API。Reflect对象当设计目的如下</p><ol><li>将Object对象的一些明显属于语言内部的方法（比如Object。defineProperty）,放到Reflect对象上；</li><li>修改某些Object方法返回的结果，让其变得更合理，如Reflect.defineProperty(obj,name,desc)在无法定义属性时，会抛出一个错误，但是，使用Reflect之后则返回false；</li><li></li></ol><h1 id="11-Interator和-for…of循环"><a href="#11-Interator和-for…of循环" class="headerlink" title="11. Interator和 for…of循环"></a>11. Interator和 for…of循环</h1><ul><li>定义</li></ul><p>Interator的作用有三个：一是为各种数据结构提供一个统一的、简便的访问接口；二十使得数据结构的成员能够按某种次序排列；三是ES6创造了一种新的遍历命令：for…of循环，Interator接口主要供for…of使用；</p><ul><li>默认iterator接口</li></ul><p>ES6的有些数据结构原生具备iterator接口(比如数组)，即不用任何处理，就可以被for…of循环遍历。原因在于，这些数据结构原生部署了Symbol.iterator属性，另外的数据结构就没有(比如对象)。凡是部署了Symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个借口，就会返回一个遍历器对象。</p><p>原生具备Iterator接口的数据结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">Map</span><br><span class="line">Set</span><br><span class="line">String</span><br><span class="line">TypedArray</span><br><span class="line">函数的arguments对象</span><br><span class="line">NodeList对象</span><br></pre></td></tr></table></figure><h2 id="11-1-数组的iterator属性"><a href="#11-1-数组的iterator属性" class="headerlink" title="11.1 数组的iterator属性"></a>11.1 数组的iterator属性</h2><h1 id="12-类的基本语法"><a href="#12-类的基本语法" class="headerlink" title="12. 类的基本语法"></a>12. 类的基本语法</h1><p>类与ES5中的构造函数类似，ES6中的类可以看做是构造函数的另一种写法，类的数据类型就是函数，类本身就指向构造函数。使用的时候，也是直接对类使用<code>new</code>命令，跟构造函数的用法完全一致。构造函数的<code>prototype</code>属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的<code>prototype</code>属性上面；</p><p>下面的Person类可以体现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;I am &#x27;</span>+<span class="built_in">this</span>.name+ <span class="string">&#x27; and I was &#x27;</span> +<span class="built_in">this</span>.age +<span class="string">&#x27; year ago!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的say()方法定义等同于</span></span><br><span class="line"><span class="comment">/* Person.prototype.say = function()&#123;</span></span><br><span class="line"><span class="comment">      console.log(&#x27;我是一个人类！&#x27;);</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person); <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person); <span class="comment">// true</span></span><br><span class="line">person1.say();</span><br></pre></td></tr></table></figure><ul><li>由于类的方法都定义在<code>prototype</code>对象上面，所以类的新方法可以添加在<code>prototype</code>对象上面。<code>Object.assign()</code>方法可以很方便地一次向类添加多个方法。</li></ul><p>接Person类，将两个方法添加到Persona类中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(Person.prototype,&#123;</span><br><span class="line">  <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Javascript Person class!&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">returnNumber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">99999999</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">person1.sayHello(); <span class="comment">//Hello Javascript Person class!</span></span><br></pre></td></tr></table></figure><h2 id="1-constructor方法"><a href="#1-constructor方法" class="headerlink" title="1. constructor方法"></a>1. constructor方法</h2><p><code>constructor()</code>方法是类的默认方法，也叫构造方法，通过<code>new</code>命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor()</code>方法，如果没有显式定义，一个空的<code>constructor()</code>方法会被默认添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类必须使用<code>new</code>调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo()</span><br><span class="line"><span class="comment">// TypeError: Class constructor Foo cannot be invoked without &#x27;new&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-类的实例"><a href="#2-类的实例" class="headerlink" title="2. 类的实例"></a>2. 类的实例</h2><ul><li><p>生成类的实例的写法，与 ES5 完全一样，也是使用<code>new</code>命令。前面说过，如果忘记加上<code>new</code>，像函数那样调用<code>Class</code>，将会报错</p></li><li><p>与 ES5 一样，实例的属性除非显式定义在其本身（即定义在<code>this</code>对象上），否则都是定义在原型上（即定义在<code>class</code>上），类的所有实例共享一个原型对象，这也意味着，可以通过实例的<code>__proto__</code>属性为“类”添加方法（但不推荐使用）。；</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="comment">// 显式定义方法</span></span><br><span class="line">    <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;I will run!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 非显式定义方法</span></span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;I am &#x27;</span>+<span class="built_in">this</span>.name+ <span class="string">&#x27; and I was &#x27;</span> +<span class="built_in">this</span>.age +<span class="string">&#x27; year ago!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person(<span class="string">&#x27;Jacket&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === person2.__proto__); <span class="comment">// true 可见person1和person2共享一个原型对象</span></span><br><span class="line"><span class="comment">// 通过__proto__添加方法,一个实例定义所有实例都可以使用</span></span><br><span class="line">person1.__proto__.fly = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;I will fly!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">person2.fly(); <span class="comment">// I will fly!</span></span><br><span class="line">person1.fly(); <span class="comment">// I will fly!</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&#x27;age&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&#x27;say&#x27;</span>)); <span class="comment">// false 非显式定义，因此不是本身含有的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&#x27;run&#x27;</span>)); <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h2 id="3-类的取值函数-getter-和存值函数-setter"><a href="#3-类的取值函数-getter-和存值函数-setter" class="headerlink" title="3. 类的取值函数(getter)和存值函数(setter)"></a>3. 类的取值函数(getter)和存值函数(setter)</h2><p>在类的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数拦截该属性的存取行为；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.element = element;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">prop</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">prop</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setter存的数是：&#x27;</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(</span><br><span class="line">  MyClass.prototype,<span class="string">&quot;prop&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;get&quot;</span> <span class="keyword">in</span> descriptor); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> meClass = <span class="keyword">new</span> MyClass();</span><br><span class="line">meClass.prop = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(meClass.prop);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>prop</code>属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了，上面代码中，存值函数和取值函数是定义在<code>html</code>属性的描述对象上面，这与 ES5 完全一致。</p><h2 id="4-Class表达式"><a href="#4-Class表达式" class="headerlink" title="4. Class表达式"></a>4. Class表达式</h2><p>与函数一样，类也可以使用表达式的形式定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getClassName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Me.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是<code>Me</code>，但是<code>Me</code>只在 Class 的内部可用，指代当前类。在 Class 外部，这个类只能用<code>MyClass</code>引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line">inst.getClassName() <span class="comment">// Me</span></span><br><span class="line">Me.name <span class="comment">// ReferenceError: Me is not defined</span></span><br></pre></td></tr></table></figure><p>上面代码表示，<code>Me</code>只在 Class 内部有定义。</p><p>如果类的内部没用到的话，可以省略<code>Me</code>，也就是可以写成下面的形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> </span>&#123; <span class="comment">/* ... */</span> &#125;;</span><br></pre></td></tr></table></figure><p>采用 Class 表达式，可以写出立即执行的 Class。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"></span><br><span class="line">person.sayName(); <span class="comment">// &quot;张三&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>person</code>是一个立即执行的类的实例。</p><h2 id="5-注意点"><a href="#5-注意点" class="headerlink" title="5. 注意点"></a>5. 注意点</h2><ol><li>class自定义开始就是使用严格模式</li><li>不存在提升，必须要先定义类才能够使用类，顺序不能够颠倒</li><li>name属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Animal.name);</span><br></pre></td></tr></table></figure><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h3><p>类的方法内部如果含有<code>this</code>，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this指向问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayLog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.sayHello();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> logger = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="keyword">let</span> &#123; sayLog &#125; = logger; </span><br><span class="line"><span class="comment">//TypeError: Cannot read properties of undefined (reading &#x27;sayHello&#x27;)</span></span><br><span class="line">sayLog();</span><br></pre></td></tr></table></figure><p>上面代码中，<code>sayLog</code>方法中的<code>this</code>，默认指向<code>Logger</code>类的实例。但是，如果将这个方法提取出来单独使用，<code>this</code>会指向该方法运行时所在的环境（由于 class 内部是严格模式，所以 this 实际指向的是<code>undefined</code>），从而导致找不到<code>sayHello</code>方法而报错。</p><p>一个比较简单的解决方法是，在构造方法中绑定<code>this</code>，这样就不会找不到<code>print</code>方法了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">this</span>.sayLog = <span class="built_in">this</span>.sayLog.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayLog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.sayHello();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> logger = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="keyword">let</span> &#123; sayLog &#125; = logger; </span><br><span class="line">sayLog();</span><br></pre></td></tr></table></figure><p>另一种解决方法是使用箭头函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  sayLog=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.sayHello();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> logger = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="keyword">let</span> &#123; sayLog &#125; = logger; </span><br><span class="line">sayLog();</span><br></pre></td></tr></table></figure><p><strong>箭头函数内部的<code>this</code>总是指向定义时所在的对象</strong>。上面代码中，箭头函数位于构造函数内部，它的定义生效的时候，是在构造函数执行的时候。这时，箭头函数所在的运行环境，肯定是实例对象，所以<code>this</code>会总是指向实例对象。</p><h2 id="6-类的静态方法"><a href="#6-类的静态方法" class="headerlink" title="6. 类的静态方法"></a>6. 类的静态方法</h2><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前加上static关键字，就表示该方法不会被实例继承，而是直接通过类自身来调用，这就成为静态方法；静态方法可以与非静态方法重名。</p><p>类自身来调用静态方法，如果在实例上调用静态方法，会抛出一个错误，表示不存在该方法：    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> log1 = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="comment">// log1.sayHello(); // TypeError: log1.sayHello is not a function</span></span><br><span class="line">Logger.sayHello();  <span class="comment">// Hello World!</span></span><br></pre></td></tr></table></figure><p>父类的静态方法，可以被子类继承：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Son.sayHello(); <span class="comment">//  Hello World!</span></span><br></pre></td></tr></table></figure><h1 id="13-类的继承"><a href="#13-类的继承" class="headerlink" title="13. 类的继承"></a>13. 类的继承</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Class 可以通过<code>extends</code>关键字实现继承父类的所有属性和方法(包括静态方法)；</p><p><strong>子类必须在<code>constructor</code>方法中调用<code>super</code>方法</strong>，否则新建实例时会报错。这是因为子类自己的<code>this</code>对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name,typeClimate</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.typeClimate = typeClimate;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">returnClimate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&quot; belong &quot;</span>+<span class="built_in">this</span>.typeClimate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name,typeClimate,food</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 如果没有super()方法，会在创建类实例的时候报错</span></span><br><span class="line">  <span class="comment">// ReferenceError: Must call super constructor in derived class before </span></span><br><span class="line">  <span class="comment">// accessing &#x27;this&#x27; or returning from derived constructor at new Pig</span></span><br><span class="line">  <span class="built_in">super</span>(name,typeClimate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pig1 = <span class="keyword">new</span> Pig(<span class="string">&#x27;小猪佩奇&#x27;</span>,<span class="string">&#x27;pig&#x27;</span>,<span class="string">&#x27;rice&#x27;</span>);</span><br><span class="line">pig1.returnClimate();</span><br></pre></td></tr></table></figure><h2 id="2-Object-getPrototypeOf"><a href="#2-Object-getPrototypeOf" class="headerlink" title="2. Object.getPrototypeOf()"></a>2. Object.getPrototypeOf()</h2><p><code>Object.getPrototypeOf</code>方法可以用来从子类上获取父类;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Pig) === Animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="3-super关键字"><a href="#3-super关键字" class="headerlink" title="3. super关键字"></a>3. super关键字</h2><p><code>super</code>这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同；ES6 要求，子类的构造函数必须执行一次<code>super</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，子类B的构造函数中的super()，代表调用父类的构造函数、这是必须的，否则会报错；</p><p>注意，<code>super</code>虽然代表了父类<code>A</code>的构造函数，但是返回的是子类<code>B</code>的实例，即<code>super</code>内部的<code>this</code>指的是<code>B</code>的实例，因此<code>super()</code>在这里相当于<code>A.prototype.constructor.call(this)</code>，作为函数时，<code>super()</code>只能用在子类的构造函数之中，用在其他地方就会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span>.target.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> A()); <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> B()); <span class="comment">// B</span></span><br></pre></td></tr></table></figure><p>上面的代码中，new.target指向当前正在执行的函数，可以看到，在super()执行的时候，指向的是子类B的构造函数，而不是父类A的构造函数，即super()内部的this指向的是B；</p><ul><li>第二种情况，<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">p</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;super 调用&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">super</span>.p());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B(); <span class="comment">// super 调用</span></span><br></pre></td></tr></table></figure><p>上面代码中，子类当中的super.p()，就是将super当作一个对象来使用。这时，super在普通方法之中，指向A.prototype，因此super.p()相当于A.prototype.p();</p><p>这里需要注意，由于<code>super</code>指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过<code>super</code>调用的，但是定义在父类的原型对象上，则可以通过super进行访问:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">super</span>.x);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">super</span>.y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bClass = <span class="keyword">new</span> B();</span><br><span class="line">bClass.say();  <span class="comment">// x为undefined 获取失败 y为5 获取成功</span></span><br></pre></td></tr></table></figure><p>ES6 规定，在子类普通方法中通过<code>super</code>调用父类的方法时，方法内部的<code>this</code>指向当前的子类实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.outPut = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.outPut); <span class="comment">// 这里的this指向的是子类的实例对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.outPut = <span class="number">99</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bClass = <span class="keyword">new</span> B();</span><br><span class="line">bClass.say();  <span class="comment">// 99</span></span><br></pre></td></tr></table></figure><p>上面代码中，super.print()虽然调用的是A.prototype.print()，但是由于A.prototype.print()内部的this指向的是子类B实例，因此导致输出是99，而不是2也就是说明实际上执行的是super.print.call(this);</p><ul><li>由于<code>this</code>指向子类实例，所以如果通过<code>super</code>对某个属性赋值，这时<code>super</code>就是<code>this</code>，赋值的属性会变成子类实例的属性:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.outPut = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.outPut); <span class="comment">// 这里的this指向的是子类的实例对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">super</span>();</span><br><span class="line">  <span class="built_in">super</span>.outPut = <span class="number">33</span>;</span><br><span class="line">  <span class="built_in">this</span>.outPut = <span class="number">11</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">super</span>.outPut); <span class="comment">// undefined </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.outPut); <span class="comment">// 11 outPut被super.outPut改变了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bClass = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure><p>上面代码，super.outPut = 11，将outPut赋值为11，在输出super.outPut时，super指向父类A的原型对象prototype，由于super无法访问父类上的属性和方法，因此会报错undefined，在输出this.outPut中的this指向B类的实例 因此输出11；</p><ul><li>如果<code>super</code>作为对象，用在静态方法之中，这时<code>super</code>将指向父类，而不是父类的原型对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">method</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message+<span class="string">&#x27;static method&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">myMethod</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message+<span class="string">&#x27;ordinary method&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">method</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.method(message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">myMethod</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.myMethod(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.method(<span class="string">&#x27;super的测试！&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line">child1.myMethod(<span class="string">&#x27;what do you say?&#x27;</span>);</span><br><span class="line"><span class="comment">// 因为子类的实例通过super访问父类的静态方法</span></span><br><span class="line"><span class="comment">// this指向的是子类，而子类中没有method方法，因此报错</span></span><br><span class="line">child1.method(<span class="string">&#x27;can I say?&#x27;</span>); <span class="comment">// TypeError: child1.method is not a function</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>super</code>在静态方法之中指向父类，在普通方法之中指向父类的原型对象。</p><p>注意，使用<code>super</code>的时候，必须显式指定是作为函数、还是作为对象使用，<strong>否则会报错</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="comment">// console.log(super);//报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>console.log(super)</code>当中的<code>super</code>，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这时，如果能清晰地表明<code>super</code>的数据类型，就不会报错；</p><h2 id="4-类的prototype和-proto-属性"><a href="#4-类的prototype和-proto-属性" class="headerlink" title="4. 类的prototype和__proto__属性"></a>4. 类的prototype和<code>__proto__</code>属性</h2><p>大多数浏览器的 ES5 实现之中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。Class 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链；</p><ol><li>子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类；</li><li>子类prototype属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的prototype属性；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(B.__proto__ === A); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(B.prototype.__proto__ === A.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>子类B的<code>__proto__</code>属性指向了父类A，子类B的原型对象上的<code>__proto__</code>属性指向了父类A的原型原型对象prototype</p><h2 id="5-extends关键字后面可以跟多种类型的值"><a href="#5-extends关键字后面可以跟多种类型的值" class="headerlink" title="5. extends关键字后面可以跟多种类型的值"></a>5. <code>extends</code>关键字后面可以跟多种类型的值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的<code>A</code>，只要是一个有<code>prototype</code>属性的函数，就能被<code>B</code>继承。由于函数都有<code>prototype</code>属性（除了<code>Function.prototype</code>函数），因此<code>A</code>可以是任意函数。</p><ol><li>子类继承Object类</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类继承Object类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(A.__proto__ === <span class="built_in">Object</span>); <span class="comment">// ture </span></span><br><span class="line"><span class="built_in">console</span>.log(A.prototype.__proto__ === <span class="built_in">Object</span>.prototype);</span><br></pre></td></tr></table></figure><p>这种情况下，<code>A</code>其实就是构造函数<code>Object</code>的复制，<code>A</code>的实例就是<code>Object</code>的实例</p><ol start="2"><li>不存在任何继承</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(A.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(A.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这种情况下，<code>A</code>作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承<code>Function.prototype</code>。但是，<code>A</code>调用后返回一个空对象（即<code>Object</code>实例），所以<code>A.prototype.__proto__</code>指向构造函数（<code>Object</code>）的<code>prototype</code>属性；</p><h2 id="6-实例的-proto"><a href="#6-实例的-proto" class="headerlink" title="6. 实例的__proto__"></a>6. 实例的<code>__proto__</code></h2><p>子类实例的<code>__proto__</code>属性的<code>__proto__</code>属性，指向父类实例的<code>__proto__</code>属性。也就是说，子类的原型的原型，是父类的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> classA = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">let</span> classB = <span class="keyword">new</span> B();</span><br><span class="line"><span class="comment">// 改变了父类的行为，看classA.printName()方法可知</span></span><br><span class="line">classB.__proto__.__proto__.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(classA.__proto__ === classB.__proto__); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(classA.__proto__ === classB.__proto__.__proto__); <span class="comment">// true</span></span><br><span class="line">classA.printName();</span><br></pre></td></tr></table></figure><p>因此，通过子类实例的<code>__proto__.__proto__</code>属性，可以修改父类实例的行为;</p><h2 id="7-原生构造函数的继承"><a href="#7-原生构造函数的继承" class="headerlink" title="7. 原生构造函数的继承"></a>7. 原生构造函数的继承</h2><p>原生的构造函数有如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>()</span><br><span class="line"><span class="built_in">Number</span>()</span><br><span class="line"><span class="built_in">String</span>()</span><br><span class="line"><span class="built_in">Array</span>()</span><br><span class="line"><span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">Function</span>()</span><br><span class="line"><span class="built_in">RegExp</span>()</span><br><span class="line"><span class="built_in">Error</span>()</span><br><span class="line"><span class="built_in">Object</span>()</span><br></pre></td></tr></table></figure><p>ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象<code>this</code>，然后再用子类的构造函数修饰<code>this</code>，使得父类的所有行为都可以继承。下面是一个继承<code>Array</code>的例子；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myArray</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">...arg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">super</span>(...arg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这里的this指自身</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="built_in">this</span>.length;i++)&#123;</span><br><span class="line">    result += <span class="built_in">parseInt</span>(<span class="built_in">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> myArray();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr.sum());</span><br></pre></td></tr></table></figure><p>上面这个例子也说明，<code>extends</code>关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客网刷题总结</title>
      <link href="/2021/10/09/%E7%89%9B%E5%AE%A2%E7%BD%91%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2021/10/09/%E7%89%9B%E5%AE%A2%E7%BD%91%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-找出数组-arr-中重复出现过的元素（不用考虑返回顺序）"><a href="#1-找出数组-arr-中重复出现过的元素（不用考虑返回顺序）" class="headerlink" title="1. 找出数组 arr 中重复出现过的元素（不用考虑返回顺序）"></a>1. 找出数组 arr 中重复出现过的元素（不用考虑返回顺序）</h3><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 4, 4, 3, 3, 1, 5, 3]</span><br></pre></td></tr></table></figure><p>复制</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 3, 4]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicates</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = arr.sort();</span><br><span class="line">    <span class="keyword">let</span> resultArr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span> ;i&lt;newArr.length;i++)&#123;</span><br><span class="line">        <span class="comment">//判断是否重复</span></span><br><span class="line">        <span class="keyword">if</span>(newArr[i]==newArr[i+<span class="number">1</span>]&amp;&amp;newArr[i]!==newArr[i-<span class="number">1</span>])&#123;</span><br><span class="line">            resultArr.push(newArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicates</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resultArr = [];</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.indexOf(value)!==arr.lastIndexOf(value)&amp;&amp;resultArr.indexOf(value)==-<span class="number">1</span>)&#123;</span><br><span class="line">            resultArr.push(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> resultArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-在数组-arr-中，查找值与-item-相等的元素出现的所有位置"><a href="#2-在数组-arr-中，查找值与-item-相等的元素出现的所有位置" class="headerlink" title="2.在数组 arr 中，查找值与 item 相等的元素出现的所有位置"></a>2.在数组 arr 中，查找值与 item 相等的元素出现的所有位置</h3><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] &#x27;a&#x27;</span><br></pre></td></tr></table></figure><p>复制</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 6]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findAllOccurrences</span>(<span class="params">arr, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.map(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value === target)&#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-正确的使用-parseInt"><a href="#3-正确的使用-parseInt" class="headerlink" title="3.正确的使用 parseInt"></a>3.<strong>正确的使用 parseInt</strong></h3><p>举例，如果 <em>string</em> 以 “0x” 开头，parseInt() 会把 <em>string</em> 的其余部分解析为十六进制的整数。如果 <em>string</em> 以 0 开头，那么 ECMAScript v3 允许 parseInt() 的一个实现把其后的字符解析为八进制或十六进制的数字。如果 <em>string</em> 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse2Int</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(num,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-判断完全相对"><a href="#4-判断完全相对" class="headerlink" title="4.判断完全相对"></a>4.判断完全相对</h3><p>判断 val1 和 val2 是否完全等同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">val1, val2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val1===val2)&#123;</span><br><span class="line">        <span class="comment">// +0不等于-0；但是用===的话会返回true；所以要做额外的判断</span></span><br><span class="line">        <span class="keyword">return</span> val1 !== <span class="number">0</span> || val2 !== <span class="number">0</span> || <span class="number">1</span>/val1 === <span class="number">1</span>/val2;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//NaN等于NaN 但是上面的判断 NaN === NaN 会返回false;所以做额外的判断</span></span><br><span class="line">        <span class="keyword">return</span> val1 !== val1 &amp;&amp; val2!== val2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-函数传参"><a href="#5-函数传参" class="headerlink" title="5.函数传参"></a>5.函数传参</h3><p>将数组 arr 中的元素作为调用函数 fn 的参数</p><p>输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">greeting, name, punctuation</span>) </span>&#123;<span class="keyword">return</span> greeting + <span class="string">&#x27;, &#x27;</span> + name + (punctuation || <span class="string">&#x27;!&#x27;</span>);&#125;, [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;Ellie&#x27;</span>, <span class="string">&#x27;!&#x27;</span>]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, Ellie!</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用函数可以使用call或者apply这两个方法，区别在于call需要将传递给函数的参数明确写出来</span></span><br><span class="line"><span class="comment">//是多少参数就需要写多少参数。而apply则将传递给函数的参数放入一个数组中，传入参数数组即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里的this指向window,但是function里没有用到this,也就是说function里没有会根据作用域不同而需要指定的this的值,所以这里apply的第一个参数放什么都可以,null也行.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argsAsArray</span>(<span class="params">fn, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>,arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-返回函数"><a href="#6-返回函数" class="headerlink" title="6.返回函数"></a>6.<strong>返回函数</strong></h3><p>实现函数 functionFunction，调用之后满足如下条件：<br>1、返回值为一个函数 f<br>2、调用返回的函数 f，返回值为按照调用顺序的参数拼接，拼接字符为英文逗号加一个空格，即 ‘, ‘<br>3、所有函数的参数数量为 1，且均为 String 类型</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">functionFunction(&#x27;Hello&#x27;)(&#x27;world&#x27;)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, world</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此时相当于函数的柯里化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionFunction</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="function">(<span class="params">word</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str+<span class="string">&quot;, &quot;</span>+word;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-使用闭包"><a href="#7-使用闭包" class="headerlink" title="7.使用闭包"></a>7.使用闭包</h3><p>实现函数 makeClosures，调用之后满足如下条件：<br>1、返回一个函数数组 result，长度与 arr 相同<br>2、运行 result 中第 i 个函数，即 result<a href="">i</a>，结果与 fn(arr[i]) 相同</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3], function (x) &#123; </span><br><span class="line">return x * x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>非闭包的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeClosures</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span><br><span class="line">        result[index]=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value*value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用闭包的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeClosures</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">     arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">         result.push(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">return</span> fn(num);</span><br><span class="line">             &#125;;</span><br><span class="line">         &#125;(e));</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">简单的描述闭包：如果在函数func内部声明函数inner，然后在函数外部调用inner，这个过程即产生了一个闭包。</span><br><span class="line">题目要求的是返回一个函数数组，如果在循环中直接写result[i] = function()&#123;return fn(arr[i]);&#125;或者result.push(function()&#123;return fn(arr[i]);&#125;)，最终的结果是不正确的，因为在每次迭代的时候，那样的语句后面的方法并没有执行，只是创建了一个函数体为“return fn(arr[i]);”的函数对象而已，当迭代停止时，i为最终迭代停止的值，在函数被调用时，i依旧为最终迭代停止的值，因此无法返回正确的结果。</span><br><span class="line">为了解决这个问题，需要声明一个匿名函数，并立即执行它。</span><br><span class="line">function(num)&#123;return function()&#123;return fn(arr[num]); &#125;; &#125;(i)，函数执行后，i立即传入并被内部函数访问到，因此就能得到正确的结果。闭包允许你引用存在于外部函数中的变量。</span><br></pre></td></tr></table></figure><h3 id="8-关于Array-prototype-slice-call-的理解"><a href="#8-关于Array-prototype-slice-call-的理解" class="headerlink" title="8.关于Array.prototype.slice.call()的理解"></a>8.关于Array.prototype.slice.call()的理解</h3><p>1、基础<br>1）slice() 方法可从已有的数组中返回选定的元素。</p><p>start：必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</p><p>end：可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</p><p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。该方法并不会修改数组，而是返回一个子数组。</p><p>2）call（）和apply（）方法都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。apply和call方法的第一个参数都是特定的作用域第二个参数不同，apply第二个参数可以是Array的实例，也可以是arguments对象。call方法需要逐个列出需要传递的参数。</p><p>3）arguments对象指数与数组类似（它并不是Array的实例），但是可以使用方括号语法访问每一个元素，使用length来确定传递进来多少个参数。</p><p>4）Array.prototype.slice.call()可以理解为：改变数组的slice方法的作用域，在特定作用域中去调用slice方法，call（）方法的第二个参数表示传递给slice的参数即截取数组的起始位置。</p><p>2、原理<br>Array.prototype.slice.call(arguments)能将具有length属性的对象(key值为数字)转成数组。[]是Array的示例，所以可以直接使用[].slice（）方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="number">0</span>:<span class="string">&#x27;hello&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;world&#x27;</span>,<span class="attr">length</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.call(obj,<span class="number">0</span>));<span class="comment">//[&quot;hello&quot;, &quot;world&quot;]</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>没有length属性的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="number">0</span>:<span class="string">&#x27;hello&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;world&#x27;</span>&#125;;<span class="comment">//没有length属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.call(obj,<span class="number">0</span>));<span class="comment">//[]</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p>1、 使用apply 时要注意：apply或call 只是切换了函数内部 this 的调用，但是执行的方法依然是原始对象上的方法， 即使你在 Array.prototype.slice.call（obj）的 obj 上 覆盖了slice 方法 ，依然会执行 Array 上的 slice 方法;</p><p>2、由于apply方法（或者call方法）也可以绑定函数执行时所在的对象，但是会立即执行函数，因此不得不把绑定语句写在一个函数体内。建议使用函数改变this指向时使用 bind 方法。</p><p>3、bind方法每运行一次，就返回一个新函数，这会产生一些问题。比如，监听事件的时候，不能写成下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">&#x27;click&#x27;</span>, o.m.bind(o));</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>上面代码表示，click事件绑定bind方法生成的一个匿名函数。这样会导致无法取消绑定，所以，下面的代码是无效的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.removeEventListener(<span class="string">&#x27;click&#x27;</span>, o.m.bind(o));</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>正确的方法是写成下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listener = o.m.bind(o);</span><br><span class="line">element.addEventListener(<span class="string">&#x27;click&#x27;</span>, listener);</span><br><span class="line"><span class="comment">//  ...</span></span><br><span class="line">element.removeEventListener(<span class="string">&#x27;click&#x27;</span>, listener);</span><br></pre></td></tr></table></figure><h4 id="eval-函数用法详解"><a href="#eval-函数用法详解" class="headerlink" title="eval()函数用法详解:"></a>eval()函数用法详解:</h4><p>此函数可能使用的频率并不是太高，但是在某些情况下具有很大的作用，下面就介绍一下eval()函数的用法。<br>语法结构:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(str)</span><br></pre></td></tr></table></figure><p>此函数可以接受一个字符串str作为参数，并把此str当做一段javascript代码去执行，如果str执行结果是一个值则返回此值，否则返回undefined。如果参数不是一个字符串，则直接返回该参数，实例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;var a=1&quot;</span>);<span class="comment">//声明一个变量a并赋值1。</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;2+3&quot;</span>);<span class="comment">//执行加运算，并返回运算值。</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;mytest()&quot;</span>);<span class="comment">//执行mytest()函数。 eval(&quot;&#123;b:2&#125;&quot;);//声明一个对象。</span></span><br></pre></td></tr></table></figure><p>在以上代码特别注意的是，最后一个语句是声明了一个对象，如果想返回此对象，则需要在对象外面再嵌套一层小括号，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;(&#123;b:2&#125;)&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="9-使用apply-调用函数"><a href="#9-使用apply-调用函数" class="headerlink" title="9.使用apply()调用函数"></a>9.使用apply()调用函数</h3><p>实现函数 callIt，调用之后满足如下条件<br>1、返回的结果为调用 fn 之后的结果<br>2、fn 的调用参数为 callIt 的第一个参数之后的全部参数</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><p>因为arguments并非真正的数组，因此要获得callIt的第一个参数之后的所有参数，不能直接使用slice方法截取，需要先将arguments转换为真正的数组才行。有两种常见的方法:</p><ul><li>一是使用slice方法：var args = Array . prototype . slice . call ( arguments );</li><li>二是循环遍历逐一填入新数组。在获得了args之后，就可以调用apply来执行传入的函数参数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callIt</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);<span class="comment">//从第一位开始截取</span></span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>,arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-toString-方法"><a href="#10-toString-方法" class="headerlink" title="10 toString()方法"></a>10 toString()方法</h3><h3 id="11-arguments对象的使用"><a href="#11-arguments对象的使用" class="headerlink" title="11 arguments对象的使用"></a>11 arguments对象的使用</h3><p>在函数代码中，使用特殊对象 arguments，我们<strong>无需明确指出参数名</strong>，就能访问它们</p><ul><li><p>arguments 对象作用：（1）实现js的重载（2）检测参数个数</p></li><li><p>使用场景</p><p>arguments对象大多用来针对同个方法多处调用并且传递参数个数不一样时使用。</p><p>例：实现传递参数的累加，由于传递的参数的个数不一致，故使用arguments对象。</p></li></ul><p>实例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arguments对象的使用,可以指定...arguments</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">arguFunction</span>(<span class="params">...<span class="built_in">arguments</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">arguments</span>.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">        total+=value;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(total);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    arguFunction(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 不指定形参也可以获取到arguments</span></span><br><span class="line"><span class="comment">// arguments对象的使用,无需指定形参</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">arguFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        total+=<span class="built_in">arguments</span>[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(total);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    arguFunction(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js复习总结</title>
      <link href="/2021/09/28/js%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2021/09/28/js%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1-javascript中的基础方法"><a href="#1-javascript中的基础方法" class="headerlink" title="1.javascript中的基础方法"></a>1.javascript中的基础方法</h1><p>代码示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arrayOne = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arrayTwo = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>];</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.数组的join(separator)方法: 将数组的元素组起一个字符串,只在中间插入</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------join()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arrayJoin = arrayOne;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> joinString = arrayJoin.join(<span class="string">&#x27;@&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(joinString);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(arrayOne);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过join()方法可以实现重复字符串，只需传入字符串以及重复的次数，就能返回重复后的字符串，函数如下：</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">secondString</span>(<span class="params">str,num</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(num+<span class="number">1</span>).join(str);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> result=secondString(<span class="string">&#x27;aichihaidilao&#x27;</span>,<span class="number">4</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.push(): 可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------push()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">returnPush</span>(<span class="params">array1</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;array1.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        arrayOne.push(array1[i]);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(arrayOne);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;数组长度变为：&#x27;</span>,arrayOne.length);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    returnPush(arrayTwo);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3.pop()：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注意：pop() 里面没有参数，及时有参数，也是删除最后一项。</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">returnPop</span>(<span class="params">n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------pop()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;未进行pop时的数组：&#x27;</span>,arrayOne);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(arrayOne.length);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="javascript">        arrayOne.pop();</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;pop改变后的数组：&#x27;</span>,arrayOne);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    returnPop(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 4.shift()：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">returnShift</span>(<span class="params">n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------shift()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;进行shift()操作之前：&#x27;</span>,arrayTwo);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="javascript">        arrayTwo.shift();</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;进行shift()操作之后：&#x27;</span>,arrayTwo);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    returnShift(<span class="number">3</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 5.unshift:将参数添加到原数组开头，并返回数组的长度</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">returnUnshift</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------unshift()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;进行unshift()操作之前：&#x27;</span>,arrayTwo);</span></span><br><span class="line"><span class="javascript">      arrayTwo.unshift(<span class="string">&#x27;c&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      arrayTwo.unshift(<span class="string">&#x27;b&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      arrayTwo.unshift(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;进行unshift()操作之后：&#x27;</span>,arrayTwo);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    returnUnshift();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* 总结push()和pop()与shift()和unshift()都是对数组的增删，前者在末尾，后者在首位 */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 6.sort()：按升序排列数组项——即最小的值位于最前面，最大的值排在最后面</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在排序时，sort()方法会调用每个数组项的 toString()转型方法，</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值,sort()方法比较的也是字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 因此会出现以下的这种情况</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">returnSort1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------sort()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      arrayOne.sort();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 上面说的情况</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(arrayOne);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 直接比较字符串则没问题</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> arrayTwo1=[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>];</span></span><br><span class="line"><span class="javascript">      arrayTwo1.sort();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(arrayTwo1);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    returnSort1();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 为了解决上述问题，sort()方法可以接收一个比较函数作为参数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 以便我们指定哪个值位于哪个值的前面。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果第一个参数应该位于第二个之后则返回一个正数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 以下就是一个简单的比较函数：</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">returnCompare</span>(<span class="params">value1,value2</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> value1-value2;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arrayOne1=[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>];</span></span><br><span class="line"><span class="javascript">    arrayOne1.sort(returnCompare);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(arrayOne1);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 7.reverse()：反转数组项的顺序</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">returnReverse</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------reverse()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> reverseArray=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(reverseArray.reverse());</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    returnReverse();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 8.concat() ：将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------concat()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> concatArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> testConcatArray = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">7</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> newConcatArray1 =  concatArray.concat(<span class="number">9</span>,testConcatArray);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;concat处理后的新数组：&#x27;</span>,newConcatArray1);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;原数组：&#x27;</span>,concatArray);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 传递的参数是二维数组的情况 二维数组会被作为一个参数进行传递</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> newConcatArray2 =  concatArray.concat(<span class="number">9</span>,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(newConcatArray2);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 9.slice() 返回从原数组中指定开始下标到结束下标之间的项组成的新数组</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// slice()方法可以接受一或两个参数，即返回项的起始和结束位置</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果有两个参数，该方法返回起始和结束位置之间的项，但不包含结束位置的项</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*start：必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">end：可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。该方法并不会修改数组，而是返回一个子数组。*/</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------slice()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> sliceArray1=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 两个参数的情况</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> newSliceArray = sliceArray1.slice(<span class="number">2</span>,<span class="number">5</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(newSliceArray);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 一个参数的情况</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> newSliceArray1 = sliceArray1.slice(<span class="number">5</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(newSliceArray1);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 10 splice()：很强大的数组方法，它有很多种用法，可以实现删除、插入和替换</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 删除：可以删除任意数量的项,并且返回被删除的项</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> spliceArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------splice()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    spliceArray.splice(<span class="number">1</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(spliceArray);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6</span></span></span><br><span class="line"><span class="javascript">    spliceArray.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;插入操作：&#x27;</span>,spliceArray);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6</span></span></span><br><span class="line"><span class="javascript">    spliceArray.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(spliceArray);</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组 */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 11.indexOf()和LastIndexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 其中， 从数组的开头（位置 0）开始向后查找 单个参数时默认从0开始查找</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;-----------------indexOf()方法------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> indexOfArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(indexOfArray.indexOf(<span class="number">7</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(indexOfArray.indexOf(<span class="number">6</span>,<span class="number">3</span>));</span></span><br><span class="line"><span class="javascript">    <span class="comment">// lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中从数组的末尾开始向前查找</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> lastIndexOfArray = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lastIndexOfArray.lastIndexOf(<span class="string">&#x27;b&#x27;</span>,<span class="number">4</span>));</span></span><br><span class="line"><span class="javascript">   <span class="comment">/* 这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。在比较第一个参数与数组中的每一项时，会使用全等操作符。 */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-数组中的迭代方法"><a href="#2-数组中的迭代方法" class="headerlink" title="2.数组中的迭代方法"></a>2.数组中的迭代方法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组的迭代方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ECMAScript为数组定义了五个迭代方法，每个方法都接收两个参数：</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 要在每一项上面运行的函数和运行该函数的作用域——影响this的值</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 传入这些方法的函数会接收三个参数（数组项的值，索引，数组本身）</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// （1）forEach()  对数组的每一项运行给定函数，该方法没有返回值</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> forEachArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;---------------------forEach()方法-------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    forEachArray.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      value=value*<span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(forEachArray);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// （2）some（）： 对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 直到找到一项为true就停止执行，如果全为false,则所有的项都会被执行</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> someArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;---------------------some()方法-------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> resultSome = someArray.some(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(value);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(resultSome);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// (3) every()  对数组中的每一项运行都给定函数，如果该函数对每一项都返回true，则返回true</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 找到一项为false,则后面的项不再执行,如果全为true,则所有项都被执行</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> everyArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;---------------------every()方法-------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> everyResult = everyArray.every(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(value);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> value&lt;<span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(everyResult);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// （4）filter（） ：对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 对新数组变化不会影响原数组的改变</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;---------------------filter()方法-------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> filterArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> filterResult = filterArray.filter(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(value);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(filterResult);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// （5）map（） ：对数组的每一项运行给定函数，返回每次函数调用结果所组成的数组</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 对新数组变化不会影响原数组的改变</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;---------------------map()方法-------------------&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> mapArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> mapResult = mapArray.map(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> mapResult1 = mapArray.map(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> value*<span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(mapResult);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(mapResult1);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-1-新增的迭代方法"><a href="#2-1-新增的迭代方法" class="headerlink" title="2.1.新增的迭代方法"></a>2.1.新增的迭代方法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组迭代方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* ES5新增了两个归并数组的方法：reduce（）和 reduceRight()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    这两个方法都会迭代数组所有的项，然后构建一个最终的值返回。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    这两个方法都接收两个参数：一个在每一项上面调用的函数和（可选）作为归并基础的初始值。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    给reduce和reduceRight这两个方法的函数都接收四个参数值：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    前一个值，当前值，索引，数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数是数组的第二项。*/</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> reduceArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> reduceResult = reduceArray.reduce(<span class="function">(<span class="params">pre,cur,index,array</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> pre+cur;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(reduceResult);</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* 第一次执行回调函数的时候</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    pre为1，cur为2，第二次，pre为3（1加2的结果），cur为3（数组的第三项）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    依次类推，直到将数组的每一项都访问一遍，最后返回结果。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    reduceRight（）与reduce（）使用一样，只不过是从后往前遍历。 */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">      区别：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      1.操作数组的方法中，分为变异方法和非变异方法。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      2.其中，变异方法意味着会改变原数组，而非变异方法则只会返回一个新数组，不会修改原始数组</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">      数组变异方法：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      push() //数组尾部追加一个元素</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      pop()　　//数组尾部弹出一个元素</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      shift() //数组头部弹出一个元素</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      unshift() //数组头部插入一个元素</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      splice() //删除或替换某一个元素</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      sort() //按照特定的规则排序（数字根据从小到大排序，字符串根据unicode位点排序）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      reverse() //反转数组</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      数组非变异方法：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      filter() //过滤数组中某些元素，返回符合条件的元素组成的新数组</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      concat() //合并两个或两个以上的数组，可以链式调用，返回合并后的数组　</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      slice() //切割数组中某一段元素，返回一个切割出来的数组</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      map() //使用map方法会产生一个新的数组，数组的每一项就是我们return出去的值（所以map方法必须有返回值，如果没有return，那么新数组的每一项都为undefined），数组的个数与原数组一样</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      some()   //会遍历数组中的每个元素，让每个值都执行一遍callback函数,如果有一个元素满足条件，返回true , 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      forEach() //遍历数组</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      every() //检测数组所有元素是否满足条件</span></span></span><br><span class="line"><span class="comment"><span class="javascript"> */</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-1-判断方法是否是变异"><a href="#3-1-判断方法是否是变异" class="headerlink" title="3.1 判断方法是否是变异"></a>3.1 判断方法是否是变异</h2><p>区别：<br>1.操作数组的方法中，分为变异方法和非变异方法。<br>2.其中，变异方法意味着会改变原数组，而非变异方法则只会返回一个新数组，不会修改原始数组</p><p>数组变异方法：<br>push() //数组尾部追加一个元素<br>pop()　　//数组尾部弹出一个元素<br>shift() //数组头部弹出一个元素<br>unshift() //数组头部插入一个元素<br>splice() //删除或替换某一个元素<br>sort() //按照特定的规则排序（数字根据从小到大排序，字符串根据unicode位点排序）<br>reverse() //反转数组<br>数组非变异方法：<br>filter() //过滤数组中某些元素，返回符合条件的元素组成的新数组<br>concat() //合并两个或两个以上的数组，可以链式调用，返回合并后的数组　<br>slice() //切割数组中某一段元素，返回一个切割出来的数组<br>map() //使用map方法会产生一个新的数组，数组的每一项就是我们return出去的值（所以map方法必须有返回值，如果没有return，那么新数组的每一项都为undefined），数组的个数与原数组一样<br>some()   //会遍历数组中的每个元素，让每个值都执行一遍callback函数,如果有一个元素满足条件，返回true , 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。<br>forEach() //遍历数组<br>every() //检测数组所有元素是否满足条件</p><h1 id="3-对象新增的方法"><a href="#3-对象新增的方法" class="headerlink" title="3. 对象新增的方法"></a>3. 对象新增的方法</h1><h2 id="1-Object-is"><a href="#1-Object-is" class="headerlink" title="1.Object.is()"></a>1.Object.is()</h2><p>它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致;不同之处只有两个：一是<code>+0</code>不等于<code>-0</code>，二是<code>NaN</code>等于自身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(&#123;&#125;,&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(-<span class="number">0</span>,+<span class="number">0</span>));   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新部署Object.is()</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>,<span class="string">&#x27;is&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x===y)&#123;</span><br><span class="line">    <span class="comment">// 针对+0不等于-0的情况</span></span><br><span class="line">    <span class="keyword">return</span> x!==<span class="number">0</span> || <span class="number">1</span>/x === <span class="number">1</span>/y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x!==x || y!==y;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="attr">writable</span>:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-Object-assign"><a href="#2-Object-assign" class="headerlink" title="2.Object.assign()"></a>2.Object.assign()</h2><p><code>Object.assign()</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p><code>Object.assign()</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p><p>注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性</p><h2 id="3-Object-keys-Object-values-Object-entries"><a href="#3-Object-keys-Object-values-Object-entries" class="headerlink" title="3.Object.keys() Object.values() Object.entries()"></a>3.Object.keys() Object.values() Object.entries()</h2><ul><li><p><code>Object.keys</code>方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名，<code>Object.keys</code>配套的<code>Object.values</code>和<code>Object.entries</code>，作为遍历一个对象的补充手段，供<code>for...of</code>循环使用。</p></li><li><p><code>Object.values</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值</p></li><li><p><code>Object.entries()</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组，如果原对象的属性名是一个 Symbol 值，该属性会被忽略</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">onePerson</span>:<span class="string">&#x27;李世民&#x27;</span>,</span><br><span class="line">  <span class="attr">twoPerson</span>:<span class="string">&#x27;朱元璋&#x27;</span>,</span><br><span class="line">  <span class="attr">threePerson</span>:<span class="string">&#x27;袁世凯&#x27;</span>,</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;keys,values,entries&#125; = <span class="built_in">Object</span>;</span><br><span class="line"><span class="built_in">console</span>.log(keys(obj1)); <span class="comment">// onePerson twoPerson threePerson a b c</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> keys(obj1))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key);  <span class="comment">// 键名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> values(obj1))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);  <span class="comment">// 键值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> entry <span class="keyword">of</span> entries(obj1))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(entry); <span class="comment">// 键值对数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Object-fromEntries"><a href="#4-Object-fromEntries" class="headerlink" title="4. Object.fromEntries()"></a>4. Object.fromEntries()</h2><p><code>Object.fromEntries()</code>方法是<code>Object.entries()</code>的逆操作，用于将一个键值对数组转为对象，该方法的主要目的，是将键值对的数据结构还原为对象，因此特别适合将 Map 结构转为对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrObject = [[<span class="string">&#x27;onePerson&#x27;</span>,<span class="string">&#x27;李世民&#x27;</span>],[<span class="string">&#x27;twoPerson&#x27;</span>,<span class="string">&#x27;朱元璋&#x27;</span>],[<span class="string">&#x27;threePerson&#x27;</span>,<span class="string">&#x27;袁世凯&#x27;</span>]];</span><br><span class="line"><span class="keyword">let</span> result = <span class="built_in">Object</span>.fromEntries(arrObject);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">// &#123;onePerson: &#x27;李世民&#x27;, twoPerson: &#x27;朱元璋&#x27;, threePerson: &#x27;袁世凯&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="4-闭包"><a href="#4-闭包" class="headerlink" title="4. 闭包"></a>4. 闭包</h1><p><strong>「函数」和「函数内部能访问到的变量」的总和，就是一个闭包</strong>；</p><p>如果在一个内部函数里，对在外部作用域(但不是全局作用域)的变量进行引用，那么内部函数就被认为是闭包(closure)。</p><h4 id="7-1闭包的作用："><a href="#7-1闭包的作用：" class="headerlink" title="7.1闭包的作用："></a>7.1闭包的作用：</h4><p>闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」</p><h4 id="7-2-闭包的特点"><a href="#7-2-闭包的特点" class="headerlink" title="7.2 闭包的特点"></a>7.2 闭包的特点</h4><ol><li>可以读取自身函数外部的变量(沿着作用域链寻找)先从自身开始查找，如果自身没有才会继续往上级查找，自身如果拥有将直接调用。(哪个离的最近就用哪一个)</li><li>延长内部变量的生命周期</li></ol><h4 id="7-3-错题中的闭包理解："><a href="#7-3-错题中的闭包理解：" class="headerlink" title="7.3 错题中的闭包理解："></a>7.3 错题中的闭包理解：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.闭包是指有权访问另一个函数作用域中变量的函数；</span><br><span class="line">2.函数内再嵌套函数，返回到外部形成闭包；</span><br><span class="line">3.内部函数可以引用外层的参数和变量</span><br><span class="line">4.参数和变量不会被垃圾回收机制回收</span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> local = <span class="string">&#x27;变量&#x27;</span>; <span class="comment">//local是一个变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;    <span class="comment">//foo()是一个函数</span></span><br><span class="line"><span class="built_in">console</span>.log(local);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在函数foo()内部就可以访问到变量local，这个过程叫做闭包</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一句是变量声明，第二句是函数声明，第三句是 console.log。</span><br><span class="line">每一句我都学过，为什么合起来我就看不出来是闭包？</span><br><span class="line">我告诉你答案，你根本不需要知道闭包这个概念，一样可以使用闭包！</span><br><span class="line">闭包是 JS 函数作用域的副产品。</span><br><span class="line">换句话说，正是由于 JS 的函数内部可以使用函数外部的变量，所以这段代码正好符合了闭包的定义。而不是 JS 故意要使用闭包。</span><br><span class="line">很多编程语言也支持闭包，另外有一些语言则不支持闭包。</span><br><span class="line">只要你懂了 JS 的作用域，你自然而然就懂了闭包，即使你不知道那就是闭包！</span><br></pre></td></tr></table></figure><p>如下例子中（local 变量和 bar() 函数就组成了一个闭包（Closure）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> local = <span class="number">1</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    local++</span><br><span class="line">    <span class="keyword">return</span> local</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = foo()</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p><strong>为什么上面的例子要函数套函数呢？</strong></p><p>是因为需要局部变量，所以才把 local 放在一个函数里，如果不把 local 放在一个函数里，local 就是一个全局变量了，达不到使用闭包的目的——隐藏变量（等会会讲）。</p><p>这也是为什么我上面要说「运行在一个立即执行函数中」。</p><p>有些人看到「闭包」这个名字，就一定觉得要用什么包起来才行。其实这是翻译问题，闭包的原文是 Closure，跟「包」没有任何关系。</p><p>所以函数套函数只是为了造出一个局部变量，跟闭包无关。</p><p><strong>为什么要 return bar 呢？</strong></p><p>因为如果不 return，你就无法使用这个闭包。把 return bar 改成 window.bar = bar 也是一样的，只要让外面可以访问到这个 bar 函数就行了。</p><p>所以 return bar 只是为了 bar 能被使用，也跟闭包无关</p><h4 id="7-2使用闭包解决问题的例子"><a href="#7-2使用闭包解决问题的例子" class="headerlink" title="7.2使用闭包解决问题的例子"></a>7.2使用闭包解决问题的例子</h4><p>实现函数 makeClosures，调用之后满足如下条件：<br>1、返回一个函数数组 result，长度与 arr 相同<br>2、运行 result 中第 i 个函数，即 result<a href="">i</a>，结果与 fn(arr[i]) 相同</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3], function (x) &#123; </span><br><span class="line">return x * x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>非闭包的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeClosures</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span><br><span class="line">        result[index]=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value*value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用闭包的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeClosures</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">     arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">         result.push(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">return</span> fn(num);</span><br><span class="line">             &#125;;</span><br><span class="line">         &#125;(e));</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="5-字符串方法"><a href="#5-字符串方法" class="headerlink" title="5.字符串方法"></a>5.字符串方法</h1><h4 id="5-1-chart"><a href="#5-1-chart" class="headerlink" title="5.1 chart()"></a>5.1 chart()</h4><p>返回在指定位置的字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>))<span class="comment">//a</span></span><br></pre></td></tr></table></figure><h4 id="5-2-charCodeAt"><a href="#5-2-charCodeAt" class="headerlink" title="5.2 charCodeAt()"></a>5.2 charCodeAt()</h4><p>返回在指定的位置的字符的 Unicode 编码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc&quot;</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.charCodeAt(<span class="number">1</span>))<span class="comment">//98</span></span><br></pre></td></tr></table></figure><h4 id="5-3-concat"><a href="#5-3-concat" class="headerlink" title="5.3 concat()"></a>5.3 concat()</h4><p>连接字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span>;  </span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;def&quot;</span>;  </span><br><span class="line"><span class="keyword">var</span> c = a.concat(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//abcdef</span></span><br></pre></td></tr></table></figure><h4 id="5-4-indexOf"><a href="#5-4-indexOf" class="headerlink" title="5.4 indexOf()"></a>5.4 indexOf()</h4><p>检索字符串。indexOf() 方法对大小写敏感！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Hello world!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;Hello&quot;</span>))<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;World&quot;</span>))<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;world&quot;</span>))<span class="comment">///6</span></span><br></pre></td></tr></table></figure><h4 id="5-5-match"><a href="#5-5-match" class="headerlink" title="5.5 match()"></a>5.5 match()</h4><p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;1 abc 2 def 3&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d+/g</span>))<span class="comment">//123</span></span><br></pre></td></tr></table></figure><h4 id="5-6-replace"><a href="#5-6-replace" class="headerlink" title="5.6 replace()"></a>5.6 replace()</h4><p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc Def!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/abc/</span>, <span class="string">&quot;CBA&quot;</span>))<span class="comment">//CBA Def!</span></span><br></pre></td></tr></table></figure><h4 id="5-7-search"><a href="#5-7-search" class="headerlink" title="5.7 search()"></a>5.7 search()</h4><p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。要执行忽略大小写的检索，请追加标志 i。如果没有找到任何匹配的子串，则返回 -1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc DEF!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/DEF/</span>))<span class="comment">//4</span></span><br></pre></td></tr></table></figure><h4 id="5-8-slice"><a href="#5-8-slice" class="headerlink" title="5.8 slice()"></a>5.8 slice()</h4><p>提取字符串的片断，并在新的字符串中返回被提取的部分。<br>stringObject.slice(<strong>start,end</strong>);<br><strong>start</strong> :要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。<br><strong>end</strong>：紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc def ghk&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">6</span>))<span class="comment">//f ghk</span></span><br></pre></td></tr></table></figure><h4 id="5-9-split"><a href="#5-9-split" class="headerlink" title="5.9 split()"></a>5.9 split()</h4><p>把字符串分割为字符串数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc def ghi jkl&quot;</span>    </span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot; &quot;</span>))<span class="comment">//[&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;&quot;</span>) )<span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot; &quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot; &quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot; &quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot; &quot;</span>,<span class="number">3</span>))<span class="comment">//[&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="5-10-toLocaleLowerCase"><a href="#5-10-toLocaleLowerCase" class="headerlink" title="5.10 toLocaleLowerCase()"></a>5.10 toLocaleLowerCase()</h4><p>把字符串转换为小写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;ABC def!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleLowerCase())<span class="comment">//abc def!</span></span><br></pre></td></tr></table></figure><h4 id="5-11-toLocaleUpperCase"><a href="#5-11-toLocaleUpperCase" class="headerlink" title="5.11 toLocaleUpperCase()"></a>5.11 toLocaleUpperCase()</h4><p>把字符串转换为大写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;ABC def!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleUpperCase())<span class="comment">//ABC DEF!</span></span><br></pre></td></tr></table></figure><h4 id="5-12-toLowerCase"><a href="#5-12-toLowerCase" class="headerlink" title="5.12 toLowerCase()"></a>5.12 toLowerCase()</h4><p>把字符串转换为小写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;ABC def!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase())<span class="comment">//abc def!</span></span><br></pre></td></tr></table></figure><h4 id="5-13-toUpperCase"><a href="#5-13-toUpperCase" class="headerlink" title="5.13 toUpperCase()"></a>5.13 toUpperCase()</h4><p>把字符串转换为大写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;ABC def!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase())<span class="comment">//ABC DEF!</span></span><br></pre></td></tr></table></figure><h4 id="5-14-substr"><a href="#5-14-substr" class="headerlink" title="5.14 substr()"></a>5.14 substr()</h4><p>从起始索引号提取字符串中指定数目的字符。<br>stringObject.substr(<strong>start,length</strong>)。<br><strong>start：</strong>必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。<br><strong>length：</strong>可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc def&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>))<span class="comment">//c def</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>,<span class="number">4</span>))<span class="comment">// c de </span></span><br></pre></td></tr></table></figure><h4 id="5-15-substring"><a href="#5-15-substring" class="headerlink" title="5.15 substring()"></a>5.15 substring()</h4><p>提取字符串中两个指定的索引号之间的字符。<br>stringObject.substring(<strong>start,stop</strong>)。<br><strong>start ：</strong>必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。<br><strong>stop ：</strong>可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc def&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>))<span class="comment">//c def</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>,<span class="number">4</span>))<span class="comment">// c </span></span><br></pre></td></tr></table></figure><p><strong>相同点：</strong>如果只是写一个参数，两者的作用都一样：都是是截取字符串从当前下标以后直到字符串最后的字符串片段。<br>substr(startIndex);<br>substring(startIndex);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123456789&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>));    <span class="comment">//  &quot;3456789&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>)) ;<span class="comment">//  &quot;3456789&quot;</span></span><br></pre></td></tr></table></figure><p><strong>不同点：</strong>第二个参数<br>substr（startIndex,lenth）： 第二个参数是截取字符串的长度（从起始点截取某个长度的字符串）；<br>substring（startIndex, endIndex）： 第二个参数是截取字符串最终的下标 （截取2个位置之间的字符串,‘含头不含尾’）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;123456789&quot;.substr(2,5));    //  &quot;34567&quot;</span><br><span class="line">console.log(&quot;123456789&quot;.substring(2,5)) ;//  &quot;345&quot;</span><br></pre></td></tr></table></figure><h1 id="6-ES6-新增的操作字符串的方法"><a href="#6-ES6-新增的操作字符串的方法" class="headerlink" title="6.ES6 新增的操作字符串的方法"></a>6.ES6 新增的操作字符串的方法</h1><h4 id="6-1-codePointAt"><a href="#6-1-codePointAt" class="headerlink" title="6.1 codePointAt()"></a>6.1 codePointAt()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;?a&#x27;</span>;</span><br><span class="line">s.codePointAt(<span class="number">0</span>) <span class="comment">// 134071</span></span><br><span class="line">s.codePointAt(<span class="number">1</span>) <span class="comment">// 57271</span></span><br><span class="line">s.codePointAt(<span class="number">2</span>) <span class="comment">// 97</span></span><br></pre></td></tr></table></figure><p>codePointAt方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“?a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“?”，返回了它的十进制码点 134071（即十六进制的20BB7）。在第二个字符（即“?”的后两个字节）和第三个字符“a”上，codePointAt方法的结果与charCodeAt方法相同。</p><h4 id="6-2-String-fromCodePoint"><a href="#6-2-String-fromCodePoint" class="headerlink" title="6.2 String.fromCodePoint()"></a>6.2 String.fromCodePoint()</h4><p>ES5 提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别 32 位的 UTF-16 字符（Unicode 编号大于0xFFFF）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">0x20BB7</span>)</span><br><span class="line"><span class="comment">// &quot;ஷ&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，String.fromCharCode不能识别大于0xFFFF的码点，所以0x20BB7就发生了溢出，最高位2被舍弃了，最后返回码点U+0BB7对应的字符，而不是码点U+20BB7对应的字符。<br>ES6 提供了String.fromCodePoint方法，可以识别大于0xFFFF的字符，弥补了String.fromCharCode方法的不足。在作用上，正好与codePointAt方法相反。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String.fromCodePoint(0x20BB7)// &quot;?&quot;</span><br><span class="line">String.fromCodePoint(0x78, 0x1f680, 0x79) === &#x27;x\uD83D\uDE80y&#x27;// true</span><br></pre></td></tr></table></figure><h4 id="6-3-字符串遍历器接口-for-of"><a href="#6-3-字符串遍历器接口-for-of" class="headerlink" title="6.3 字符串遍历器接口 for of"></a>6.3 字符串遍历器接口 for of</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">&#x27;abc&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(codePoint)&#125;<span class="comment">// &quot;a&quot;// &quot;b&quot;// &quot;c&quot;</span></span><br></pre></td></tr></table></figure><p>除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。</p><h4 id="6-4-at-方法可以识别Unicode-编号大于0xFFFF的字符，返回正确的字符。"><a href="#6-4-at-方法可以识别Unicode-编号大于0xFFFF的字符，返回正确的字符。" class="headerlink" title="6.4  at() 方法可以识别Unicode 编号大于0xFFFF的字符，返回正确的字符。"></a>6.4  at() 方法可以识别Unicode 编号大于0xFFFF的字符，返回正确的字符。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">‘abc’.at(<span class="number">0</span>)<span class="comment">//&quot;a&quot;</span></span><br><span class="line"><span class="string">&#x27;吉&#x27;</span>.at(<span class="number">0</span>)<span class="comment">//&quot;吉&quot;</span></span><br></pre></td></tr></table></figure><h4 id="6-5-normalize"><a href="#6-5-normalize" class="headerlink" title="6.5 normalize()"></a>6.5 normalize()</h4><p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如Ǒ（u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如O（u004F）和ˇ（u030C）合成Ǒ（u004Fu030C）。</p><p>这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;\u01D1&#x27;</span>===<span class="string">&#x27;\u004F\u030C&#x27;</span> <span class="comment">//false    </span></span><br><span class="line"><span class="string">&#x27;\u01D1&#x27;</span>.length <span class="comment">// 1</span></span><br><span class="line"><span class="string">&#x27;\u004F\u030C&#x27;</span>.length <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。<br>ES6 提供字符串实例的normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;\u01D1&#x27;</span>.normalize() === <span class="string">&#x27;\u004F\u030C&#x27;</span>.normalize() <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="6-6-includes-startsWith-endsWIth"><a href="#6-6-includes-startsWith-endsWIth" class="headerlink" title="6.6 includes(),startsWith(),endsWIth()"></a>6.6 includes(),startsWith(),endsWIth()</h4><p>传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**includes()**：返回布尔值，表示是否找到了参数字符串。</span><br><span class="line">**startsWith()**：返回布尔值，表示参数字符串是否在原字符串的头部。</span><br><span class="line">**endsWith()**：返回布尔值，表示参数字符串是否在原字符串的尾部。</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;    </span><br><span class="line">s.startsWith(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">&#x27;!&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">&#x27;o&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;    </span><br><span class="line">s.startsWith(<span class="string">&#x27;world&#x27;</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码表示，使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</p><h4 id="9-7-repeat方法返回一个新字符串，表示将原字符串重复n次。"><a href="#9-7-repeat方法返回一个新字符串，表示将原字符串重复n次。" class="headerlink" title="9.7 repeat方法返回一个新字符串，表示将原字符串重复n次。"></a>9.7 repeat方法返回一个新字符串，表示将原字符串重复n次。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.repeat(<span class="number">3</span>) <span class="comment">// &quot;xxx&quot;</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.repeat(<span class="number">2</span>) <span class="comment">// &quot;hellohello&quot;</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(<span class="number">0</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>参数如果是小数，会被取整。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;na&#x27;.repeat(2.9) // &quot;nana&quot;</span><br></pre></td></tr></table></figure><p>如果repeat的参数是负数或者Infinity，会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(<span class="literal">Infinity</span>)<span class="comment">// RangeError</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(-<span class="number">1</span>)<span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><h4 id="9-8-padStart-padEnd"><a href="#9-8-padStart-padEnd" class="headerlink" title="9.8 padStart(),padEnd()"></a>9.8 padStart(),padEnd()</h4><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;abax&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xaba&#x27;</span></span><br></pre></td></tr></table></figure><p>上面代码中，padStart和padEnd一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。<br>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;xxx&#x27;</span>.padStart(<span class="number">2</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"><span class="string">&#x27;xxx&#x27;</span>.padEnd(<span class="number">2</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;0123456789&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;0123456abc&#x27;</span></span><br></pre></td></tr></table></figure><p>如果省略第二个参数，默认使用空格补全长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">4</span>) <span class="comment">// &#x27;   x&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">4</span>) <span class="comment">// &#x27;x   &#x27;</span></span><br></pre></td></tr></table></figure><p>padStart的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;1&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment">// &quot;0000000001&quot;</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment">// &quot;0000000012&quot;</span></span><br><span class="line"><span class="string">&#x27;123456&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment">// &quot;0000123456&quot;</span></span><br></pre></td></tr></table></figure><p>另一个用途是提示字符串格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;12&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="comment">// &quot;YYYY-MM-12&quot;</span></span><br><span class="line"><span class="string">&#x27;09-12&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="comment">// &quot;YYYY-09-12&quot;</span></span><br></pre></td></tr></table></figure><h4 id="9-9-matchAll"><a href="#9-9-matchAll" class="headerlink" title="9.9 matchAll()"></a>9.9 matchAll()</h4><p>matchAll方法返回一个正则表达式在当前字符串的所有匹配;</p><h1 id="7-Js-中parseInt-方法的使用"><a href="#7-Js-中parseInt-方法的使用" class="headerlink" title="7.Js 中parseInt()方法的使用"></a>7.Js 中parseInt()方法的使用</h1><ul><li><p>parseInt方法接收两个参数，parseInt(string，radix?)；</p><p>string：要被解析的值。如果参数不是一个字符串，则将其转换为字符串(toString)。字符串开头的空白符将会被忽略。<br>radix：可选。从 2 到 36，表示被解析的值的进制。例如说指定 10 就等于指定十进位。</p></li></ul><ol><li><p>基本用法，只接受一个参数，可以当做第二个参数默认是10。parseInt的返回值只有两种可能，不是一个十进制整数，就是NaN。</p><p>a.将字符串转为整数。<br>parseInt(‘123’); // 123<br>b.如果字符串头部有空格，空格会被自动去除。<br>parseInt(‘  81’); // 81<br>c.如果parseInt的参数不是字符串，则会先转为字符串再转换。这个很重要<br>d.字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。<br>parseInt(‘99aa’); // 99<br>e.如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回NaN。<br>parseInt(‘aa99’); // NaN<br>parseInt(‘-99’); // -99<br>f.如果字符串以0x或0X开头，parseInt会将其按照十六进制数解析。<br>parseInt(‘0x10’); // 16<br>g.如果字符串以0开头，将其按照10进制解析。<br>parseInt(‘011’) // 11<br>h.如果参数以0开头，但不是字符串，则会先将数值转成字符串，然后解析，见规则c；<br>parseInt(011); // 9<br>// 解释一下，(011).toString()得到的结果是‘9’，具体原因请查看我的博文中有介绍toString方法<br>i.对于那些会自动转为科学计数法的数字，parseInt会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。<br>parseInt(1000000000000000000000.5); // 1<br>// 等同于<br>parseInt(‘1e+21’); // 1</p><p>parseInt(0.0000008); // 8<br>// 等同于<br>parseInt(‘8e-7’); // 8</p></li></ol><p>2.进制转换（接收两个参数），parseInt方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，parseInt的第二个参数为10，即默认是十进制转十进制。</p><ul><li><p>a.第一个参数解析规则参照第一条基本用法<br>b.如果第二个参数不是数值，会被自动转为 一个整数。这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回NaN。如果第二个参数是0、undefined和null，则直接忽略。<br>parseInt(“19”, 10); // 19 (10+9)<br>parseInt(“11”, 2); // 3 (2+1)<br>parseInt(“17”, 8); // 15 (8+7)<br>parseInt(“1f”, 16); // 31 (16+15)</p><p>parseInt(‘-99’, null); // -99<br>parseInt(‘-99’, undefined); // -99<br>parseInt(‘-99’, 0); // -99</p></li></ul><h1 id="8-正则表达式"><a href="#8-正则表达式" class="headerlink" title="8.正则表达式"></a>8.正则表达式</h1><p>正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式；</p><h4 id="11-1-语法"><a href="#11-1-语法" class="headerlink" title="11.1 语法"></a>11.1 语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/正则表达式主体/修饰符(可选)  <span class="comment">//其中修饰符是可选的。</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/runoob/i</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实例解析：</span></span><br><span class="line"><span class="comment">  /runoob/i  是一个正则表达式</span></span><br><span class="line"><span class="comment">  runoob  是一个正则表达式主体 (用于检索)</span></span><br><span class="line"><span class="comment">  i  是一个修饰符 (搜索不区分大小写)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="11-2使用字符串方法"><a href="#11-2使用字符串方法" class="headerlink" title="11.2使用字符串方法"></a>11.2使用字符串方法</h4><ul><li><strong>search() 方法</strong> 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置，如果没有找到该字符串则返回-1;</li></ul><p>实例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.search 方法的使用,查找父字符串中的子字符串，并返回子字符串在父字符串的初始位置,如果没有找到则返回-1</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> result = str.search(<span class="string">&#x27;wqorld&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 2.search 方法可使用字符串作为参数。字符串参数会转换为正则表达式：</span></span><br><span class="line">    <span class="keyword">let</span> result1 = str.search(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result1);</span><br></pre></td></tr></table></figure><ul><li><strong>replace() 方法</strong> 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li></ul><p>实例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.replace()方法使用正则表达式,匹配字符串并替换</span></span><br><span class="line">    <span class="keyword">let</span> replaceResult = str.replace(<span class="regexp">/world/i</span>,<span class="string">&#x27;zhaoming&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(replaceResult);</span><br><span class="line"><span class="comment">// 4.replace()方法使用字符串,并将字符串进行替换</span></span><br><span class="line">    <span class="keyword">let</span> replaceResult1 = str.replace(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;good morning&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(replaceResult1);</span><br></pre></td></tr></table></figure><h4 id="11-3-使用RegExp对象"><a href="#11-3-使用RegExp对象" class="headerlink" title="11.3 使用RegExp对象"></a>11.3 使用RegExp对象</h4><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象；</p><ul><li><p>使用test()方法，test() 方法是一个正则表达式方法。</p><p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p></li></ul><p>实例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.RegExp对象中的test()方法</span></span><br><span class="line">    <span class="keyword">let</span> findStr = <span class="regexp">/e/</span>;</span><br><span class="line">    <span class="keyword">let</span> resultTest = findStr.test(<span class="string">&#x27;hello, world!&#x27;</span>);<span class="comment">//在字符串中寻找字母e</span></span><br><span class="line">    <span class="built_in">console</span>.log(resultTest); </span><br></pre></td></tr></table></figure><h4 id="11-4-正则表达式的反向引用"><a href="#11-4-正则表达式的反向引用" class="headerlink" title="11.4 正则表达式的反向引用"></a>11.4 正则表达式的反向引用</h4><p>详情可以参考如下链接：</p><p><a href="https://www.cnblogs.com/-ShiL/archive/2012/04/06/Star201204061009.html">https://www.cnblogs.com/-ShiL/archive/2012/04/06/Star201204061009.html</a></p><p>捕获组捕获到的内容，不仅可以在正则表达式外部通过程序进行引用，也可以在正则表达式内部进行引用，这种引用方式就是反向引用。要了解反向引用，首先要了解捕获组，关于捕获组，参考 <a href="http://blog.csdn.net/lxcnn/archive/2009/05/03/4146148.aspx">正则基础之——捕获组（capture group）</a>。</p><p>反向引用的作用通常是用来查找或限定重复、查找或限定指定标识配对出现等等。</p><p>对于普通捕获组和命名捕获组的引用，语法如下：</p><p>普通捕获组反向引用：<strong>\k<number><strong>，通常简写为</strong>\number</strong></p><p>命名捕获组反向引用：<strong>\k<name><strong>或者</strong>\k’name’</strong></p><p>普通捕获组反向引用中<strong>number</strong>是十进制的数字，即捕获组的编号；命名捕获组反向引用中的<strong>name</strong>为命名捕获组的组名。</p><ul><li>反向匹配原理</li></ul><p>捕获组**(Expression)<strong>在匹配成功时，会将子表达式匹配到的内容，保存到内存中一个以数字编号的组里，可以简单的认为是对一个局部变量进行了赋值，这时就可以通过反向引用方式，引用这个局部变量的值。一个捕获组</strong>(Expression)**在匹配成功之前，它的内容可以是不确定的，一旦匹配成功，它的内容就确定了，反向引用的内容也就是确定的了。</p><p>反向引用必然要与捕获组一同使用的，如果没有捕获组，而使用了反向引用的语法，不同语言的处理方式不一致，有的语言会抛异常，有的语言会当作普通的转义处理。</p><ul><li>实例如下</li></ul><p>源字符串：<strong>abcdebbcde</strong></p><p>正则表达式：**([ab])\1**</p><p>对于正则表达式“**([ab])\1<strong>”，捕获组中的子表达式“</strong>[ab]<strong>”虽然可以匹配“</strong>a<strong>”或者“</strong>b<strong>”，但是捕获组一旦匹配成功，反向引用的内容也就确定了。如果捕获组匹配到“</strong>a<strong>”，那么反向引用也就只能匹配“</strong>a<strong>”，同理，如果捕获组匹配到的是“</strong>b<strong>”，那么反向引用也就只能匹配“</strong>b<strong>”。由于后面反向引用“</strong>\1<strong>”的限制，要求必须是两个相同的字符，在这里也就是“</strong>aa<strong>”或者“</strong>bb**”才能匹配成功。</p><p>考察一下这个正则表达式的匹配过程，在位置0处，由“**([ab])<strong>”匹配“</strong>a<strong>”成功，将捕获的内容保存在编号为1的组中，然后把控制权交给“</strong>\1<strong>”，由于此时捕获组已记录了捕获内容为“</strong>a<strong>”，“</strong>\1<strong>”也就确定只有匹配到“</strong>a<strong>”才能匹配成功，这里显然不满足，“</strong>\1**”匹配失败，由于没有可供回溯的状态，整个表达式在位置0处匹配失败。</p><p>正则引擎向前传动，在位置5之前，“**([ab])<strong>”一直匹配失败。传动到位置5处时，，“</strong>([ab])<strong>”匹配到“</strong>b<strong>”，匹配成功，将捕获的内容保存在编号为1的组中，然后把控制权交给“</strong>\1<strong>”，由于此时捕获组已记录了捕获内容为“</strong>b<strong>”，“</strong>\1<strong>”也就确定只有匹配到“</strong>b<strong>”才能匹配成功，满足条件，“</strong>\1<strong>”匹配成功，整个表达式匹配成功，匹配结果为“</strong>bb**”，匹配开始位置为5，结束位置为7。</p><p>扩展一下，正则表达式“**([a-z])\1{2}**”也就表达连续三个相同的小写字母。</p><h4 id="11-5-match-方法"><a href="#11-5-match-方法" class="headerlink" title="11.5 match()方法"></a>11.5 match()方法</h4><p>match()返回的是正则表达式匹配的字符串数组;</p><p>示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">captureThreeNumbers</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> strTest = <span class="regexp">/\d&#123;3&#125;/</span>;</span><br><span class="line">    <span class="keyword">if</span>(str.match(strTest))&#123;</span><br><span class="line">        <span class="keyword">return</span> str.match(strTest)[<span class="number">0</span>];<span class="comment">//返回第一次匹配成功的数组</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-6-正则常用符号"><a href="#11-6-正则常用符号" class="headerlink" title="11.6 正则常用符号"></a>11.6 正则常用符号</h4><ul><li>修饰符，修饰符用于执行区分大小写和全局匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i : 执行对大小写不敏感的匹配</span><br><span class="line">g : 执行全局匹配(查找所有匹配而非在找到第一个匹配后停止)</span><br><span class="line">m : 执行多行匹配</span><br></pre></td></tr></table></figure><ul><li>方括号，方括号用于查找某个范围内的字符</li></ul><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[abc]</td><td align="left">查找方括号之间的任何字符</td></tr><tr><td align="left">[^abc]</td><td align="left">查找非方括号内的任何字符</td></tr><tr><td align="left">[0-9]</td><td align="left">查找任何从0至9的数字</td></tr><tr><td align="left">[a-z]</td><td align="left">查找任何从小写a到小写z的字符</td></tr><tr><td align="left">[A-Z]</td><td align="left">查找任何从大写A至大写Z的字符</td></tr><tr><td align="left">[asfas]</td><td align="left">查找指定集合内的任何字符</td></tr><tr><td align="left">[^asdfs]</td><td align="left">查找指定集合外的任何字符</td></tr><tr><td align="left">[red|blue|yellow]</td><td align="left">查找任何指定的选项</td></tr></tbody></table><ul><li>元字符，指拥有特殊含义的字符</li></ul><table><thead><tr><th align="left">元字符</th><th>描述</th></tr></thead><tbody><tr><td align="left">.</td><td>查找单个字符，除了换行和行结束符</td></tr><tr><td align="left">\w</td><td>查找数字、字母、及下划线</td></tr><tr><td align="left">\W</td><td>查找非单词字符</td></tr><tr><td align="left">\d</td><td>查找数字</td></tr><tr><td align="left">\D</td><td>查找非数字字符</td></tr><tr><td align="left">\s</td><td>查找空白字符</td></tr><tr><td align="left">\S</td><td>查找非空白字符</td></tr><tr><td align="left">\b</td><td>匹配单吃边界</td></tr><tr><td align="left">\B</td><td>匹配非单词边界</td></tr><tr><td align="left">\0</td><td>查找NULL字符</td></tr><tr><td align="left">\n</td><td>查找换行符</td></tr><tr><td align="left">\n</td><td>查找换页符</td></tr><tr><td align="left">\r</td><td>查找回车符</td></tr></tbody></table><h1 id="12-对象、类、面向对象编程"><a href="#12-对象、类、面向对象编程" class="headerlink" title="12.对象、类、面向对象编程"></a>12.对象、类、面向对象编程</h1><h2 id="12-1-理解对象"><a href="#12-1-理解对象" class="headerlink" title="12.1 理解对象"></a>12.1 理解对象</h2><p>对象定义为：一组属性的无序集合，对象的每一个属性或方法都由一个名称来标识，值可以是数据或函数；</p><ol><li>使用Object创建一个自定义对象实例；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Object方式创建对象</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj1.name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">obj1.age = <span class="number">18</span>;</span><br><span class="line">obj1.country = <span class="string">&#x27;China&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用字面量的方式创建对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">country</span>:<span class="string">&#x27;China&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><ol start="3"><li>使用构造函数的方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,country</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.country = country;</span><br><span class="line">  <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello my name is &#x27;</span>+ <span class="built_in">this</span>.name +<span class="string">&#x27; and I come from &#x27;</span>+ <span class="built_in">this</span>.country);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;China&#x27;</span>);</span><br><span class="line">person1.say(); </span><br></pre></td></tr></table></figure><ol start="4"><li>数据属性：</li></ol><ul><li>Configurable：表示属性是否可以通过delete删除并定义，是否可以修改它的特性，默认true</li><li>Enumberable: 表示属性是否可以通过for-in循环返回</li><li>Writable: 表示该属性是否可以被修改</li><li>Value: 表示实例对象属性包含的实际的值</li></ul><ol><li>访问器属性<ul><li>Get：获取函数，在读取属性时使用，默认值undefined；</li><li>Set：设置函数，在设置函数时使用，默认值undefined；</li></ul></li></ol><h2 id="12-2-对象方法"><a href="#12-2-对象方法" class="headerlink" title="12.2 对象方法"></a>12.2 对象方法</h2><h3 id="1-Object-defineProperty"><a href="#1-Object-defineProperty" class="headerlink" title="1.Object.defineProperty()"></a>1.Object.defineProperty()</h3><ul><li>用于修改属性的默认特性，接收3个参数：要给其添加属性的对象、属性的名称和一个描述符对象（数据属性），最后一个参数对象中可以包含数据属性中的一个或多个；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">  <span class="attr">writable</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="attr">value</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line">person.name = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三,可见使用Object.defineProperty()设置数据属性writable=false之后，不可以进行修改</span></span><br></pre></td></tr></table></figure><p>代码创建一个名为name属性，并赋值了一个只读的值为“张三”。这个属性的值就不能修改了；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line">  <span class="attr">year_</span>:<span class="number">2021</span>,</span><br><span class="line">  <span class="attr">edition</span>:<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// year_中的下划线常用来表示该属性并不希望在对象方法的外部被访问</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book,<span class="string">&quot;year&quot;</span>,&#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.year_;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">valueNew</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(valueNew&gt;<span class="number">2021</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.year_ = valueNew;</span><br><span class="line">      <span class="built_in">this</span>.edition += valueNew - <span class="number">2021</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.year=<span class="number">2022</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.edition);</span><br></pre></td></tr></table></figure><p>对访问器属性（get,set）进行操作，即设置一个属性或导致其它的变化；</p><p><strong>注意</strong> ：在调用Object.defineProperty()时，如果不对数据属性进行定义，则数据属性的值默认为false；</p><h3 id="2-Object-defineProperties"><a href="#2-Object-defineProperties" class="headerlink" title="2. Object.defineProperties()"></a>2. Object.defineProperties()</h3><p>同时定义多个属性，并进行操作，有两个参数：要为之添加或修改属性的对象和另一个描述对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperties(book,&#123;</span><br><span class="line">      <span class="attr">year_</span>:&#123;</span><br><span class="line">        <span class="attr">value</span>:<span class="number">2017</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">edition</span>:&#123;</span><br><span class="line">        <span class="attr">value</span>:<span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.year_;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">valueNew</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(valueNew&gt;<span class="number">2021</span>)&#123;</span><br><span class="line">          <span class="built_in">this</span>.year_ = valueNew;</span><br><span class="line">          <span class="built_in">this</span>.edition += valueNew - <span class="number">2021</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>与Object.defineProperty的区别就是所有的属性都是同时定义的；</p><h3 id="3-Object-getOwenPropertyDescriptor"><a href="#3-Object-getOwenPropertyDescriptor" class="headerlink" title="3. Object.getOwenPropertyDescriptor()"></a>3. Object.getOwenPropertyDescriptor()</h3><ul><li>可以获取指定属性的属性描述符；</li></ul><h3 id="4-Object-assign"><a href="#4-Object-assign" class="headerlink" title="4. Object.assign()"></a>4. Object.assign()</h3><p>合并对象的方法，这个方法接收一个目标对象和一个或多个源对象作为参数，并将每个源对象中可枚举和自有的属性复制到目标对象，当目标对象和源对象有相同的属性时，属性值会被后面的覆盖，复制之后对目标对象的操作不影响源对象。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并对象</span></span><br><span class="line"><span class="keyword">let</span> one = &#123;<span class="attr">name</span>:<span class="string">&#x27;李世民&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> two = &#123;<span class="attr">id</span>:<span class="string">&#x27;wyu3118&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line">result = <span class="built_in">Object</span>.assign(one,two);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="built_in">console</span>.log(one);</span><br><span class="line"><span class="built_in">console</span>.log(result===one);<span class="comment">// true</span></span><br><span class="line">one.id=<span class="string">&quot;asdfaf&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(two); <span class="comment">//对合并之后的操作不会影响源对象</span></span><br></pre></td></tr></table></figure><p>多个源对象合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one = &#123;<span class="attr">name</span>:<span class="string">&#x27;李世民&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> two = &#123;<span class="attr">id</span>:<span class="string">&#x27;wyu3118&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">country</span>:<span class="string">&quot;China&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> student = &#123;<span class="attr">grade</span>:<span class="number">100</span>,<span class="attr">id</span>:<span class="string">&#x27;110&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> result = <span class="built_in">Object</span>.assign(one,two,person,student);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="built_in">console</span>.log(one);<span class="comment">// id 被覆盖为110</span></span><br><span class="line"><span class="built_in">console</span>.log(result===one);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="12-3-构造函数和原型"><a href="#12-3-构造函数和原型" class="headerlink" title="12.3 构造函数和原型"></a>12.3 构造函数和原型</h2><h3 id="12-3-1-实例成员"><a href="#12-3-1-实例成员" class="headerlink" title="12.3.1 实例成员"></a>12.3.1 实例成员</h3><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中name age say country 就是实例成员,实例成员只能通过实例化的对象来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,country</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.country = country;</span><br><span class="line">  <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello my name is &#x27;</span>+ <span class="built_in">this</span>.name +<span class="string">&#x27; and I come from &#x27;</span>+ <span class="built_in">this</span>.country);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;China&#x27;</span>);</span><br><span class="line">person1.say();</span><br><span class="line"><span class="built_in">console</span>.log(person1.age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="12-3-2-静态成员"><a href="#12-3-2-静态成员" class="headerlink" title="12.3.2 静态成员"></a>12.3.2 静态成员</h3><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态成员</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,country</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.country = country;</span><br><span class="line">&#125;</span><br><span class="line">Person.sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;China&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2.sex); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.sex);  <span class="comment">// 男 可见静态成员只能由构造函数来访问</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong> 使用构造函数容易发生造成内存浪费，如下的say()方法就是，如果两个对象实例能够使用同一个方法就不会造成浪费了；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,country</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;China&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person3 = <span class="keyword">new</span> Person(<span class="string">&#x27;李四&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2.say == person3.say); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="12-3-3-构造函数原型prototype"><a href="#12-3-3-构造函数原型prototype" class="headerlink" title="12.3.3 构造函数原型prototype"></a>12.3.3 构造函数原型prototype</h3><p>构造函数通过原型的分配的函数是所有对象共享的；</p><p><strong>每个构造函数都拥有一个prototype属性，指向另一个对象，注意的是prototype也是一个对象，这个对象所有的属性和方法都会被构造函数所拥有</strong></p><p>所以可以把共同使用的方法和属性定义到prototype中，下方的实例person1和实例person2公用方法say()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,country</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;China&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person3 = <span class="keyword">new</span> Person(<span class="string">&#x27;李四&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2.say == person3.say); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="12-3-4-对象原型-‘proto‘"><a href="#12-3-4-对象原型-‘proto‘" class="headerlink" title="12.3.4 对象原型(‘proto‘)"></a>12.3.4 对象原型(‘<strong>proto</strong>‘)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象都会有一个属性 __proto__ 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 __proto__ 原型的存在;</span><br><span class="line">__proto__对象原型和原型对象 prototype 是等价的</span><br><span class="line">__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</span><br></pre></td></tr></table></figure><p>在开发中不常使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person2.__proto__ === Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="12-3-5-constructor构造函数"><a href="#12-3-5-constructor构造函数" class="headerlink" title="12.3.5 constructor构造函数"></a>12.3.5 constructor构造函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</span><br><span class="line">constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</span><br><span class="line">一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</span><br></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,<strong>则必须手动的利用constructor指回原来的构造函数</strong>如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">      <span class="attr">constructor</span>:Person, <span class="comment">// 如果缺少这行代码，则看不到 constructor: ƒ Person(name,age)</span></span><br><span class="line">      <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;I will singing song!&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">game</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;I will play game!&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">let</span> zxy = <span class="keyword">new</span> Person(<span class="string">&#x27;张学友&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zxy);</span><br></pre></td></tr></table></figure><h2 id="12-4-原型链"><a href="#12-4-原型链" class="headerlink" title="12.4 原型链"></a>12.4 原型链</h2><p>每一个实例对象又有一个__proto__属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有__proto__属性，这样一层一层往上找就形成了原型链；</p><h3 id="12-4-1-构造函数实例和原型对象三角关系"><a href="#12-4-1-构造函数实例和原型对象三角关系" class="headerlink" title="12.4.1 构造函数实例和原型对象三角关系"></a>12.4.1 构造函数实例和原型对象三角关系</h3><ol><li>构造函数的prototype属性指向了构造函数原型对象</li><li>实例对象是由构造函数创建的,实例对象的__proto__属性指向了构造函数的原型对象</li><li>构造函数的原型对象的constructor属性指向了构造函数,实例对象的原型的constructor属性也指向了构造函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name,weight</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tom = <span class="keyword">new</span> Dog(<span class="string">&#x27;小狗花花&#x27;</span>,<span class="string">&#x27;4kg&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(tom);</span><br><span class="line"><span class="built_in">console</span>.log(Dog.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(tom.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(tom.__proto__=== Dog.prototype); <span class="comment">// true 1和2的结合，都指向了原型对象prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(tom.__proto__.constructor === Dog.prototype.constructor); <span class="comment">// true 3</span></span><br><span class="line"><span class="built_in">console</span>.log(tom.__proto__.constructor === Dog); <span class="comment">// true 3</span></span><br><span class="line"><span class="built_in">console</span>.log(Dog.prototype.constructor === Dog); <span class="comment">// true 3</span></span><br></pre></td></tr></table></figure><h3 id="12-4-2-原型链和查找机制"><a href="#12-4-2-原型链和查找机制" class="headerlink" title="12.4.2 原型链和查找机制"></a>12.4.2 原型链和查找机制</h3><p>任何对象都有原型对象,也就是<strong>prototype属性</strong>,任何原型对象也是一个对象,该对象就有__proto__属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</span><br><span class="line">如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。</span><br><span class="line">如果还没有就查找原型对象的原型（Object的原型对象）。</span><br><span class="line">依此类推一直找到 Object 为止（null）。</span><br><span class="line">__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</span><br></pre></td></tr></table></figure><h3 id="12-4-3-原型对象中的this指向"><a href="#12-4-3-原型对象中的this指向" class="headerlink" title="12.4.3 原型对象中的this指向"></a>12.4.3 原型对象中的this指向</h3><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name,weight</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> that;</span><br><span class="line">    Dog.prototype = &#123;</span><br><span class="line">      <span class="attr">constructor</span>:Dog,</span><br><span class="line">      <span class="attr">say</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;------内部-----&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tom = <span class="keyword">new</span> Dog(<span class="string">&#x27;小狗花花&#x27;</span>,<span class="string">&#x27;6kg&#x27;</span>);</span><br><span class="line">    tom.say();</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br></pre></td></tr></table></figure><h2 id="12-5-继承-apply-和call-方法"><a href="#12-5-继承-apply-和call-方法" class="headerlink" title="12.5 继承 apply()和call()方法"></a>12.5 继承 apply()和call()方法</h2><ol><li>apply()方法能够劫持另一个对象的方法，继承另一个对象的属性</li><li>使用：Function.apply(obj,args)方法能接收两个参数<ul><li>obj:这个对象将代替Function类或函数中的this对象</li><li>args:这是一个数组，它将作为参数传递给Function(args–&gt;arguments)</li></ul></li><li>call()和apply()意思一样，只不过参数列表不一样</li><li>Function.call(obj,[param1[,param2[,…[,paramN]]]])；<ul><li>obj：这个对象将代替Function类里this对象</li><li>params：这个是一个参数列表</li></ul></li></ol><h3 id="5-1-apply-示例如下："><a href="#5-1-apply-示例如下：" class="headerlink" title="5.1 apply() 示例如下："></a>5.1 apply() 示例如下：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.apply示例:  </span></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;   </span><br><span class="line"><span class="comment">/*定义一个人类*/</span>   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;   </span><br><span class="line">    <span class="built_in">this</span>.name=name; <span class="built_in">this</span>.age=age;   </span><br><span class="line">&#125;   </span><br><span class="line"> <span class="comment">/*定义一个学生类*/</span>   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,grade</span>) </span>&#123;   </span><br><span class="line">    Person.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>); <span class="built_in">this</span>.grade=grade;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">//创建一个学生类   </span></span><br><span class="line"><span class="keyword">var</span> student=<span class="keyword">new</span> Student(<span class="string">&quot;qian&quot;</span>,<span class="number">21</span>,<span class="string">&quot;一年级&quot;</span>);   </span><br><span class="line"><span class="comment">//测试   </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name:&quot;</span>+student.name+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;age:&quot;</span>+student.age+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;grade:&quot;</span>+student.grade);   </span><br><span class="line"><span class="comment">//大家可以看到测试结果name:qian age:21 grade:一年级   </span></span><br><span class="line"><span class="comment">//学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.   </span></span><br><span class="line">&lt;/script&gt;   </span><br></pre></td></tr></table></figure><ul><li><p>apply() 分析: Person.apply(this,arguments);</p><p>this:在创建对象在这个时候代表的是student</p><p>arguments:是一个数组,也就是[“qian”,”21”,”一年级”];</p><p>也就是通俗一点讲就是:用student去执行Person这个类里面的内容,在Person这个类里面存在this.name等之类的语句,这样就将属性创建到了student对象里面</p></li></ul><h3 id="5-2-call-示例如下："><a href="#5-2-call-示例如下：" class="headerlink" title="5.2 call()示例如下："></a>5.2 call()示例如下：</h3><p>在Studen函数里面可以将apply中修改成如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.call(<span class="built_in">this</span>,name,age);  </span><br></pre></td></tr></table></figure><h3 id="5-3-什么情况下用apply-什么情况下用call"><a href="#5-3-什么情况下用apply-什么情况下用call" class="headerlink" title="5.3 什么情况下用apply,什么情况下用call"></a>5.3 什么情况下用apply,什么情况下用call</h3><ul><li><p>在给对象参数的情况下,如果参数的形式是数组的时候:</p><p>比如apply示例里面传递了参数arguments,这个参数是数组类型,并且在调用Person的时候参数的列表是对应一致的(也就是Person和Student的参数列表前两位是一致的) 就可以采用 apply </p></li><li><p>如果我的Person的参数列表是这样的(age,name),而Student的参数列表是(name,age,grade)</p><p>这样就可以用call来实现了,也就是直接指定参数列表对应值的位置(Person.call(this,age,name,grade));</p></li></ul><h3 id="5-4-apply的巧妙用法"><a href="#5-4-apply的巧妙用法" class="headerlink" title="5.4 apply的巧妙用法"></a>5.4 apply的巧妙用法</h3><p>细心可以发现,在调用apply方法的时候,第一个参数是对象(this), 第二个参数是一个数组集合,</p><p>在调用Person的时候,他需要的不是一个数组,但是为什么他给我一个数组我仍然可以将数组解析为一个一个的参数,这个就是apply的一个巧妙的用处,<strong>可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3)</strong> 这个如果让我们用程序来实现将数组的每一个项,来装换为参数的列表,可能都得费一会功夫,借助apply的这点特性,所以就有了以下高效率的方法:</p><ul><li>使用一</li></ul><p>a)Math.max 可以实现得到数组中最大的一项或最小一项</p><p>因为Math.max 参数里面不支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max([param1,param2])<span class="number">1</span></span><br></pre></td></tr></table></figure><p>也就是数组</p><p>但是它支持Math.max(param1,param2,param3…),所以可以根据刚才apply的那个特点来解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> max=<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,array)</span><br></pre></td></tr></table></figure><p>这样轻易的可以得到一个数组中最大的一项</p><p>(apply会将一个数组装换为一个参数接一个参数的传递给方法)</p><p>这块在调用的时候第一个参数给了一个null,这个是因为没有对象去调用这个方法,我只需要用这个方法帮我运算,得到返回的结果就行,.所以直接传递了一个null过去；</p><h2 id="12-6-bind-方法的使用"><a href="#12-6-bind-方法的使用" class="headerlink" title="12.6.bind()方法的使用"></a>12.6.bind()方法的使用</h2><h3 id="6-1bind-作用"><a href="#6-1bind-作用" class="headerlink" title="6.1bind()作用"></a>6.1bind()作用</h3><ul><li>bind()方法主要就是将函数绑定到某个对象，bind()会创建一个函数，函数体内的this对象的值会被绑定到传入bind()第一个参数的值，例如，f.bind(obj)，实际上可以理解为obj.f()，这时，f函数体内的this自然指向的是obj</li><li>bind()方法跟call、apply方法都能改变this的指向，区别就在于bind的返回值是原函数的拷贝，供以后调用 ，而call、apply返回值取决于目标函数的返回值 ， 则是立即调用。</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="attr">getValue</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=a.getValue</span><br><span class="line"><span class="built_in">console</span>.log(b())     <span class="comment">//undefined  </span></span><br><span class="line"><span class="comment">//此时this指向为全局，而全局变量中没有value，因此为undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c=b.bind(a)   <span class="comment">//创建一个新函数，把 &#x27;this&#x27; 绑定到a对象</span></span><br><span class="line"><span class="built_in">console</span>.log(c)  <span class="comment">//a</span></span><br><span class="line"><span class="built_in">console</span>.log(c())   <span class="comment">//a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以后无论由哪个对象调用绑定函数，绑定函数中的this依然指向bind()方法中的第一个参数。</p><p>如果绑定函数作为构造函数，已经捆绑的this会被忽略掉，this依然指向实例对象;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> bindPerson = Person.bind(&#123;<span class="attr">name</span>:<span class="string">&quot;person&quot;</span>&#125;)</span><br><span class="line"><span class="comment">//将构造函数中this对象name的值指向了&#123;name:&#x27;person&#x27;&#125;</span></span><br><span class="line"><span class="keyword">new</span> bindPerson(<span class="string">&quot;小明&quot;</span>)  <span class="comment">//Person &#123;name:&#x27;小明&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2预设参数"><a href="#6-2预设参数" class="headerlink" title="6.2预设参数"></a>6.2预设参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c,d)         </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFn = fn.bind(&#123;&#125; , <span class="number">1</span> ,<span class="number">2</span>);        </span><br><span class="line"><span class="comment">// 拷贝原函数时的第2个参数开始往后称为预设参数</span></span><br><span class="line">bindFn(<span class="number">3</span>,<span class="number">4</span>);   <span class="comment">// 1 ，2 ，3 ，4</span></span><br></pre></td></tr></table></figure><h3 id="6-3-没有预设参数"><a href="#6-3-没有预设参数" class="headerlink" title="6.3 没有预设参数"></a>6.3 没有预设参数</h3><p>当bind()没有参数、第一个参数为undefined、第一个参数为null时，this的指向为window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">this</span>&#125;,</span><br><span class="line">    <span class="attr">fn1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">this</span> &#125;.bind(),</span><br><span class="line">    <span class="attr">fn2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">this</span> &#125;.bind( <span class="literal">undefined</span> ),</span><br><span class="line">    <span class="attr">fn3</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">this</span> &#125;.bind( <span class="literal">null</span> )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.fn())  <span class="comment">//obj</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.fn1())  <span class="comment">//window</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.fn2())  <span class="comment">//window</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.fn3())  <span class="comment">//window</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java搭建后台接口</title>
      <link href="/2021/09/18/java%E6%90%AD%E5%BB%BA%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/09/18/java%E6%90%AD%E5%BB%BA%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-java文件搭建"><a href="#1-java文件搭建" class="headerlink" title="1.java文件搭建"></a>1.java文件搭建</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React应用(基于React脚手架)</title>
      <link href="/2021/09/16/React%E5%BA%94%E7%94%A8-%E5%9F%BA%E4%BA%8EReact%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2021/09/16/React%E5%BA%94%E7%94%A8-%E5%9F%BA%E4%BA%8EReact%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-React脚手架创建react应用"><a href="#1-React脚手架创建react应用" class="headerlink" title="1.React脚手架创建react应用"></a>1.React脚手架创建react应用</h3><ul><li>创建步骤如下：</li></ul><ol><li><p>全局安装（如果安装了就不必再安装了），命令如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g create-react-app</span><br></pre></td></tr></table></figure></li><li><p>切换到想要创建项目的目录，使用一下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app hello-react</span><br></pre></td></tr></table></figure></li><li><p>进入项目文件夹：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd hello-react</span><br></pre></td></tr></table></figure></li><li><p>启动项目：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种启动方式</span></span><br><span class="line">npm start</span><br><span class="line"><span class="comment">// 第二种启动方式</span></span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-React项目文件夹目录结构"><a href="#2-React项目文件夹目录结构" class="headerlink" title="2. React项目文件夹目录结构"></a>2. React项目文件夹目录结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public ---- 静态资源文件夹</span><br><span class="line">favicon.icon ------ 网站页签图标</span><br><span class="line">index.html -------- 主页面</span><br><span class="line">logo192.png ------- logo图</span><br><span class="line">logo512.png ------- logo图</span><br><span class="line">manifest.json ----- 应用加壳的配置文件</span><br><span class="line">robots.txt -------- 爬虫协议文件</span><br><span class="line">src ---- 源码文件夹</span><br><span class="line">App.css -------- App组件的样式</span><br><span class="line">App.js --------- App组件</span><br><span class="line">App.test.js ---- 用于给App做测试</span><br><span class="line">index.css ------ 样式</span><br><span class="line">index.js ------- 入口文件（所有文件的入口）</span><br><span class="line">logo.svg ------- logo图</span><br><span class="line">reportWebVitals.js</span><br><span class="line">--- 页面性能分析文件(需要web-vitals库的支持)</span><br><span class="line">setupTests.js</span><br><span class="line">---- 组件单元测试的文件(需要jest-dom库的支持)</span><br></pre></td></tr></table></figure><h3 id="3-功能界面的组件化编码"><a href="#3-功能界面的组件化编码" class="headerlink" title="3.功能界面的组件化编码"></a>3.功能界面的组件化编码</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 项目创建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架React学习总结</title>
      <link href="/2021/09/07/%E6%A1%86%E6%9E%B6React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2021/09/07/%E6%A1%86%E6%9E%B6React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-React简介"><a href="#1-React简介" class="headerlink" title="1.React简介"></a>1.React简介</h3><ul><li> 用于动态构建用户界面的 JavaScript 库(只关注于视图)，由Facebook开源</li><li>React的特点：1.声明式编码 2.组件化编码 3.React Native编写原生应用 4.高效（原因：使用虚拟(virtual)DOM, 不总是直接操作页面真实DOM、DOM Diffing算法, 最小化页面重绘）</li><li>相关JS库：1、react.js：React核心库  2、react-dom.js：提供操作DOM的react扩展库  3、babel.min.js：解析JSX语法代码转为JS代码的库</li></ul><h3 id="2-React编写规则"><a href="#2-React编写规则" class="headerlink" title="2.React编写规则"></a>2.React编写规则</h3><ul><li>React JSX是Javascript的扩展语法，在 React 中使用这种语法来描述 UI 信息；</li><li>如下变量的声明就是一个React JSX的标准使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>babel.js的作用：</p><ol><li><p>浏览器不能直接解析JSX代码, 需要babel转译为纯JS的代码才能运行</p></li><li><p>只要用了JSX，都要加上type=”text/babel”, 声明需要babel来处理</p></li></ol></li><li><p>虚拟DOM元素：</p><ol><li><p>语法:  <em><strong>*ReactDOM*</strong>***</em>*.*<strong><strong><strong>*render*</strong></strong></strong>*(*<strong><strong><strong>*virtualDOM*</strong></strong></strong>*,**** <em><strong>*containerDOM*</strong>***</em>*)****</p></li><li><p>作用: 将虚拟DOM元素渲染到页面中的真实容器DOM中显示</p></li><li><p>参数说明</p></li></ol><p>　1) 参数一: 纯js或jsx创建的虚拟dom对象</p><p> 　2) 参数二: 用来包含虚拟DOM元素的真实dom元素对象(一般是一个div)</p></li><li><p>代码示例如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .title&#123;</span><br><span class="line">      background-color: red;</span><br><span class="line">      color:white;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 引入react核心库 --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 引入react-dom,用于支持react操作dom --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 引入babel,用于将jsx转为js --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">  const myId = &#x27;aTGuiGu&#x27;;</span><br><span class="line">  const myData = &quot;hello,react&quot;;</span><br><span class="line">  // 1.创建虚拟dom,此处的虚拟DOM不能够加引号</span><br><span class="line">  const VDOM = &lt;div&gt;</span><br><span class="line">      &lt;h2 className=&quot;title&quot;&gt;</span><br><span class="line">        &lt;span style=&#123;&#123;width:&#x27;100px&#x27;,fontSize:&#x27;29px&#x27;&#125;&#125;&gt;&#123;myData.toLocaleLowerCase()&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  // 2.渲染虚拟dom到页面</span><br><span class="line">  ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;));</span><br><span class="line">  /*</span><br><span class="line">  jsx 语法规则：</span><br><span class="line">  1.定义虚拟dom时，不要写引号</span><br><span class="line">  2.标签中混入JS表达式时，要用&#123;&#125;</span><br><span class="line">  3.样式的类名指定不要用class，要用className</span><br><span class="line">  4.内联样式要用style=&#123;&#123;key:value&#125;&#125;的形式去写，第一个&#123;&#125;指的是规范，第二个&#123;&#125;指的是对象</span><br><span class="line">  5.虚拟dom只能有一个根标签 如上方的：&lt;div&gt;&lt;/div&gt;则是根标签</span><br><span class="line">  6.标签必须闭合</span><br><span class="line">  7.标签首字母：</span><br><span class="line">    （1）、若是小写字母开头，则将标签转为HTML中同名元素，若HTML中无该标签对应的同名元素，则会报错</span><br><span class="line">    （2）、若是大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错</span><br><span class="line">  */</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="3-React组件"><a href="#3-React组件" class="headerlink" title="3.React组件"></a>3.React组件</h3><h4 id="3-1函数式组件"><a href="#3-1函数式组件" class="headerlink" title="3.1函数式组件"></a>3.1函数式组件</h4><ul><li><p>函数式组件没有实例对象，使用较少</p></li><li><p>实例</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .title&#123;</span><br><span class="line">      background-color: red;</span><br><span class="line">      color:white;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 引入react核心库 --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 引入react-dom,用于支持react操作dom --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 引入babel,用于将jsx转为js --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">    // 1.创建函数式组件</span><br><span class="line">    function Mycomponent()&#123;</span><br><span class="line">      console.log(this); //此处的this是undefined 因为babel编译之后开启了严格模式</span><br><span class="line">      return &lt;h2&gt;我是用函数定义的组件(适用于【简单组件】的定义)&lt;/h2&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    // 2.渲染组件到页面</span><br><span class="line">    ReactDOM.render(&lt;Mycomponent/&gt;,document.getElementById(&#x27;test&#x27;));</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    执行了ReactDOM.render(.....)之后发生的事情：</span><br><span class="line">    1.React解析组件标签，找到Mycomponent组件</span><br><span class="line">    2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实的DOM，随后展示在页面中</span><br><span class="line">    */</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-类式组件"><a href="#3-2-类式组件" class="headerlink" title="3.2 类式组件"></a>3.2 类式组件</h4><ul><li><p>类式组件使用较多，可以在浏览器的React扩展中看到react组件，组件名必须首字母大写</p></li><li><p>实例：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .title&#123;</span><br><span class="line">      background-color: red;</span><br><span class="line">      color:white;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 引入react核心库 --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 引入react-dom,用于支持react操作dom --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 引入babel,用于将jsx转为js --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">    // 1.创建函数式组件</span><br><span class="line">    function Mycomponent()&#123;</span><br><span class="line">      console.log(this); //此处的this是undefined 因为babel编译之后开启了严格模式</span><br><span class="line">      return &lt;h2&gt;我是用函数定义的组件(适用于【简单组件】的定义)&lt;/h2&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    // 2.渲染组件到页面</span><br><span class="line">    ReactDOM.render(&lt;Mycomponent/&gt;,document.getElementById(&#x27;test&#x27;));</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    执行了ReactDOM.render(.....)之后发生的事情：</span><br><span class="line">    1.React解析组件标签，找到Mycomponent组件</span><br><span class="line">    2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实的DOM，随后展示在页面中</span><br><span class="line">    */</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="4-组件的三大属性之status"><a href="#4-组件的三大属性之status" class="headerlink" title="4.组件的三大属性之status"></a>4.组件的三大属性之status</h3><h4 id="4-1status属性"><a href="#4-1status属性" class="headerlink" title="4.1status属性"></a>4.1status属性</h4><ul><li>1.state是组件对象中最重要的属性，值是对象（可以包含多个key-value的组合）</li><li>2.组件成为状态机，通过更新组件的的state来更新对应的页面显示（重新渲染组件）</li></ul><h4 id="4-2注意"><a href="#4-2注意" class="headerlink" title="4.2注意"></a>4.2注意</h4><ul><li><p>1.组件中render方法中的this为组件实例对象；</p></li><li><p>2.组件自定义的方法中this为undefined，如何解决？</p><ul><li><p>a) 强制绑定this通过函数对象的bind()</p></li><li><p>```<br>// 此处的this.changeWeather是顺着原型链上的this.changeWeather找到的<br>this.changeWeather = this.changeWeather.bind(this);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 箭头函数（即是在类组件中创建箭头函数的方法）</span><br><span class="line"></span><br><span class="line">- 3.状态数据，不能直接修改或更新，状态必须通过setState进行更新</span><br><span class="line"></span><br><span class="line">  如：</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">   // 获取原来的isHot值</span><br><span class="line">   const isHot = this.state.isHot;</span><br><span class="line">   // 严重注意：状态必须通过setState进行更新(使用对象的方式更新)</span><br><span class="line">   this.setState(&#123;isHot:!isHot&#125;);</span><br><span class="line">   // 严重注意：状态(state)不可直接更改，下面这一句就是直接更改！！！</span><br><span class="line">   // this.state.isHot=!isHot 这是错误的写法</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4-3实例"><a href="#4-3实例" class="headerlink" title="4.3实例"></a>4.3实例</h4><ul><li>代码如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .title&#123;</span><br><span class="line">      background-color: red;</span><br><span class="line">      color:white;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 引入react核心库 --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 引入react-dom,用于支持react操作dom --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 引入babel,用于将jsx转为js --&gt;</span><br><span class="line">  &lt;script src=&quot;../../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">  const myData = [&#x27;angular&#x27;,&#x27;react&#x27;,&#x27;vue&#x27;];</span><br><span class="line">  // 1.创建组件</span><br><span class="line">  class Weather extends React.Component&#123;</span><br><span class="line">    // 构造器，对状态进行初始化动作</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">      super(props);</span><br><span class="line">      // 初始化状态</span><br><span class="line">      this.state=&#123;isHot:true,wind:&#x27;微风&#x27;&#125;;</span><br><span class="line">      // 解决changeWeather中this指向的问题</span><br><span class="line">      // 此处的this.changeWeather是顺着原型链上的this.changeWeather找到的</span><br><span class="line">      this.changeWeather = this.changeWeather.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">      // 读取状态 解构赋值获取到isHot</span><br><span class="line">      const &#123;isHot&#125; = this.state;</span><br><span class="line">      return &lt;h1 onClick=&#123;this.changeWeather&#125;&gt;今天天气很&#123;isHot?&#x27;炎热&#x27;:&#x27;凉爽&#x27;&#125;&lt;/h1&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    changeWeather()&#123;</span><br><span class="line">      // changeWeather放在哪里？ ---Weather的原型对象上，供实例使用</span><br><span class="line">      // 由于changeWeather是作为onClick的回掉所以不是通过实例调用的，是直接调用</span><br><span class="line">      // 类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined</span><br><span class="line">      console.log(this);  </span><br><span class="line">      // 获取原来的isHot值</span><br><span class="line">      const isHot = this.state.isHot;</span><br><span class="line">      // 严重注意：状态必须通过setState进行更新</span><br><span class="line">      this.setState(&#123;isHot:!isHot&#125;);</span><br><span class="line">      // 严重注意：状态(state)不可直接更改，下面这一句就是直接更改！！！</span><br><span class="line">      // this.state.isHot=!isHot 这是错误的写法</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 2.渲染组件到页面</span><br><span class="line">  ReactDOM.render(&lt;Weather/&gt;,document.getElementById(&#x27;test&#x27;));</span><br><span class="line">  function demo()&#123;</span><br><span class="line">    console.log(&#x27;标题被点击了&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-组件的三大属性之props"><a href="#5-组件的三大属性之props" class="headerlink" title="5.组件的三大属性之props"></a>5.组件的三大属性之props</h3><h4 id="5-1-props的理解"><a href="#5-1-props的理解" class="headerlink" title="5.1 props的理解"></a>5.1 props的理解</h4><ul><li>每个组件对象都会有props(properties的简写)属性</li><li> 组件标签的所有属性都保存在props中</li></ul><h4 id="5-2-props的作用"><a href="#5-2-props的作用" class="headerlink" title="5.2 props的作用"></a>5.2 props的作用</h4><ul><li> 通过标签属性从组件外向组件内传递变化的数据</li><li>注意: 组件内部不要修改props数据</li></ul><h4 id="5-3-编码操作"><a href="#5-3-编码操作" class="headerlink" title="5.3 编码操作"></a>5.3 编码操作</h4><ul><li><p>组件中读取每个属性值的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.name</span><br></pre></td></tr></table></figure></li><li><p>组件中对props中的属性值进行类型限制和必要性限制：</p></li><li><p>使用prop-types库进限制（需要引入prop-types库）</p></li><li><p>```js<br>Person.propTypes = {<br>  name: PropTypes.string.isRequired,<br>  age: PropTypes.number.<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 扩展属性: 将对象的所有属性通过props传递 </span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;Person &#123;...person&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p> 默认属性值：</p></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person.defaultProps = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>组件类的构造函数:</p></li><li><p>```js<br>constructor(props){<br>  super(props)<br>  console.log(props)//打印所有属性<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### 5.3 props 的基本使用</span><br><span class="line"></span><br><span class="line">- 代码实例</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```react</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;对props进行限制&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;test2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;test3&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入prop-types，用于对组件标签属性进行限制 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/prop-types.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">//创建组件</span><br><span class="line">class Person extends React.Component&#123;</span><br><span class="line">render()&#123;</span><br><span class="line">// console.log(this);</span><br><span class="line">const &#123;name,age,sex&#125; = this.props</span><br><span class="line">//props是只读的</span><br><span class="line">//this.props.name = &#x27;jack&#x27; //此行代码会报错，因为props是只读的</span><br><span class="line">return (</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;年龄：&#123;age+1&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//对标签属性进行类型、必要性的限制</span><br><span class="line">Person.propTypes = &#123;</span><br><span class="line">name:PropTypes.string.isRequired, //限制name必传，且为字符串</span><br><span class="line">sex:PropTypes.string,//限制sex为字符串</span><br><span class="line">age:PropTypes.number,//限制age为数值</span><br><span class="line">speak:PropTypes.func,//限制speak为函数</span><br><span class="line">&#125;</span><br><span class="line">//指定默认标签属性值</span><br><span class="line">Person.defaultProps = &#123;</span><br><span class="line">sex:&#x27;男&#x27;,//sex默认值为男</span><br><span class="line">age:18 //age默认值为18</span><br><span class="line">&#125;</span><br><span class="line">//渲染组件到页面</span><br><span class="line">ReactDOM.render(&lt;Person name=&#123;100&#125; speak=&#123;speak&#125;/&gt;,document.getElementById(&#x27;test1&#x27;))</span><br><span class="line">ReactDOM.render(&lt;Person name=&quot;tom&quot; age=&#123;18&#125; sex=&quot;女&quot;/&gt;,document.getElementById(&#x27;test2&#x27;))</span><br><span class="line"></span><br><span class="line">const p = &#123;name:&#x27;老刘&#x27;,age:18,sex:&#x27;女&#x27;&#125;</span><br><span class="line">// console.log(&#x27;@&#x27;,...p);</span><br><span class="line">// ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125;/&gt;,document.getElementById(&#x27;test3&#x27;))</span><br><span class="line">ReactDOM.render(&lt;Person &#123;...p&#125;/&gt;,document.getElementById(&#x27;test3&#x27;))</span><br><span class="line"></span><br><span class="line">function speak()&#123;</span><br><span class="line">console.log(&#x27;我说话了&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-组件的三大属性之refs-事件处理"><a href="#6-组件的三大属性之refs-事件处理" class="headerlink" title="6.组件的三大属性之refs(事件处理)"></a>6.组件的三大属性之refs(事件处理)</h3><h4 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1 作用"></a>6.1 作用</h4><ul><li>组件内的标签可以定义ref属性来标识自己</li></ul><h4 id="6-2-使用方式"><a href="#6-2-使用方式" class="headerlink" title="6.2 使用方式"></a>6.2 使用方式</h4><ul><li><p>1.字符串形式的ref(不建议使用)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input ref=&quot;input1&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用实例：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;1_字符串形式的ref&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">//创建组件</span><br><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">//展示左侧输入框的数据</span><br><span class="line">showData = ()=&gt;&#123;</span><br><span class="line">const &#123;input1&#125; = this.refs</span><br><span class="line">alert(input1.value)</span><br><span class="line">&#125;</span><br><span class="line">//展示右侧输入框的数据</span><br><span class="line">showData2 = ()=&gt;&#123;</span><br><span class="line">const &#123;input2&#125; = this.refs</span><br><span class="line">alert(input2.value)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input ref=&quot;input1&quot; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;&amp;nbsp;</span><br><span class="line">&lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;</span><br><span class="line">&lt;input ref=&quot;input2&quot; onBlur=&#123;this.showData2&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//渲染组件到页面</span><br><span class="line">ReactDOM.render(&lt;Demo a=&quot;1&quot; b=&quot;2&quot;/&gt;,document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p>2.回调形式的ref(建议使用)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input ref=&#123;(c)=&gt;&#123;this.input1 = c&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用实例：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;1_字符串形式的ref&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">//创建组件</span><br><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">//展示左侧输入框的数据</span><br><span class="line">showData = ()=&gt;&#123;</span><br><span class="line">const &#123;input1&#125; = this</span><br><span class="line">alert(input1.value)</span><br><span class="line">&#125;</span><br><span class="line">//展示右侧输入框的数据</span><br><span class="line">showData2 = ()=&gt;&#123;</span><br><span class="line">const &#123;input2&#125; = this</span><br><span class="line">alert(input2.value)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input ref=&#123;c =&gt; this.input1 = c &#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;&amp;nbsp;</span><br><span class="line">&lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;</span><br><span class="line">&lt;input onBlur=&#123;this.showData2&#125; ref=&#123;c =&gt; this.input2 = c &#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;&amp;nbsp;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//渲染组件到页面</span><br><span class="line">ReactDOM.render(&lt;Demo a=&quot;1&quot; b=&quot;2&quot;/&gt;,document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p>3.createRef创建ref容器(推荐使用)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myRef = React.createRef() </span><br><span class="line">&lt;input ref=&#123;this.myRef&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用实例：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;4_createRef&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">//创建组件</span><br><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">/* </span><br><span class="line">React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的</span><br><span class="line"> */</span><br><span class="line">myRef = React.createRef()</span><br><span class="line">myRef2 = React.createRef()</span><br><span class="line">//展示左侧输入框的数据</span><br><span class="line">showData = ()=&gt;&#123;</span><br><span class="line">alert(this.myRef.current.value);</span><br><span class="line">&#125;</span><br><span class="line">//展示右侧输入框的数据</span><br><span class="line">showData2 = ()=&gt;&#123;</span><br><span class="line">alert(this.myRef2.current.value);</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input ref=&#123;this.myRef&#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;&amp;nbsp;</span><br><span class="line">&lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;</span><br><span class="line">&lt;input onBlur=&#123;this.showData2&#125; ref=&#123;this.myRef2&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;&amp;nbsp;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//渲染组件到页面</span><br><span class="line">ReactDOM.render(&lt;Demo a=&quot;1&quot; b=&quot;2&quot;/&gt;,document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="6-3-事件处理"><a href="#6-3-事件处理" class="headerlink" title="6.3 事件处理"></a>6.3 事件处理</h4><ol><li><p>通过onXxx属性指定事件处理函数(注意大小写)</p><ul><li> React使用的是自定义(合成)事件, 而不是使用的原生DOM事件</li><li>React中的事件是通过事件委托方式处理的(委托给组件最外层的元素)</li></ul></li><li><p>通过event.target得到发生事件的DOM元素对象</p></li><li><p>高阶函数（满足以下条件其一即是）：</p><ol><li>当前函数传入的参数是一个函数；</li><li>当前函数返回(return的值)值是一个函数</li></ol><p>函数的柯里化：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;高阶函数_函数柯里化&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">//#region </span><br><span class="line">/* </span><br><span class="line">高阶函数：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</span><br><span class="line">1.若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</span><br><span class="line">2.若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</span><br><span class="line">常见的高阶函数有：Promise、setTimeout、arr.map()等等</span><br><span class="line"></span><br><span class="line">函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 </span><br><span class="line">function sum(a)&#123;</span><br><span class="line">return(b)=&gt;&#123;</span><br><span class="line">return (c)=&gt;&#123;</span><br><span class="line">return a+b+c</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">//#endregion</span><br><span class="line">//创建组件</span><br><span class="line">class Login extends React.Component&#123;</span><br><span class="line">//初始化状态</span><br><span class="line">state = &#123;</span><br><span class="line">username:&#x27;&#x27;, //用户名</span><br><span class="line">password:&#x27;&#x27; //密码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//保存表单数据到状态中</span><br><span class="line">saveFormData = (dataType)=&gt;&#123;</span><br><span class="line">return (event)=&gt;&#123;</span><br><span class="line">this.setState(&#123;[dataType]:event.target.value&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//表单提交的回调</span><br><span class="line">handleSubmit = (event)=&gt;&#123;</span><br><span class="line">event.preventDefault() //阻止表单提交</span><br><span class="line">const &#123;username,password&#125; = this.state</span><br><span class="line">alert(`你输入的用户名是：$&#123;username&#125;,你输入的密码是：$&#123;password&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">&lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">用户名：&lt;input onChange=&#123;this.saveFormData(&#x27;username&#x27;)&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span><br><span class="line">密码：&lt;input onChange=&#123;this.saveFormData(&#x27;password&#x27;)&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span><br><span class="line">&lt;button&gt;登录&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//渲染组件</span><br><span class="line">ReactDOM.render(&lt;Login/&gt;,document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="7-组件的生命周期"><a href="#7-组件的生命周期" class="headerlink" title="7. 组件的生命周期"></a>7. 组件的生命周期</h3><h4 id="7-1-生命周期的三个阶段（新）"><a href="#7-1-生命周期的三个阶段（新）" class="headerlink" title="7.1 生命周期的三个阶段（新）"></a>7.1 生命周期的三个阶段（新）</h4><ol><li><p>初始化阶段: 由ReactDOM.render()触发—初次渲染<br> 1.constructor()<br> 2.getDerivedStateFromProps<br> 3.render()<br> 4.componentDidMount()</p></li><li><p>更新阶段: 由组件内部this.setSate()或父组件重新render触发<br> 1.getDerivedStateFromProps<br> 2.shouldComponentUpdate()<br> 3.render()<br> 4.getSnapshotBeforeUpdate<br> 5.componentDidUpdate()</p></li><li><p>卸载组件: 由ReactDOM.unmountComponentAtNode()触发<br> 1.componentWillUnmount()</p></li><li><p>代码实例：</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;3_react生命周期(新)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/17.0.1/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/17.0.1/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/17.0.1/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">//创建组件</span><br><span class="line">class Count extends React.Component&#123;</span><br><span class="line">/* </span><br><span class="line">1. 初始化阶段: 由ReactDOM.render()触发---初次渲染</span><br><span class="line">1.constructor()</span><br><span class="line">2.getDerivedStateFromProps </span><br><span class="line">3.render()</span><br><span class="line">4.componentDidMount() =====&gt; 常用</span><br><span class="line">一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</span><br><span class="line">2. 更新阶段: 由组件内部this.setSate()或父组件重新render触发</span><br><span class="line">1.getDerivedStateFromProps</span><br><span class="line">2.shouldComponentUpdate()</span><br><span class="line">3.render()</span><br><span class="line">4.getSnapshotBeforeUpdate</span><br><span class="line">5.componentDidUpdate()</span><br><span class="line">3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发</span><br><span class="line">1.componentWillUnmount()  =====&gt; 常用</span><br><span class="line">一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span><br><span class="line">*/</span><br><span class="line">//构造器</span><br><span class="line">constructor(props)&#123;</span><br><span class="line">console.log(&#x27;Count---constructor&#x27;);</span><br><span class="line">super(props)</span><br><span class="line">//初始化状态</span><br><span class="line">this.state = &#123;count:0&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//加1按钮的回调</span><br><span class="line">add = ()=&gt;&#123;</span><br><span class="line">//获取原状态</span><br><span class="line">const &#123;count&#125; = this.state</span><br><span class="line">//更新状态</span><br><span class="line">this.setState(&#123;count:count+1&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//卸载组件按钮的回调</span><br><span class="line">death = ()=&gt;&#123;</span><br><span class="line">ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//强制更新按钮的回调</span><br><span class="line">force = ()=&gt;&#123;</span><br><span class="line">this.forceUpdate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</span><br><span class="line">static getDerivedStateFromProps(props,state)&#123;</span><br><span class="line">console.log(&#x27;getDerivedStateFromProps&#x27;,props,state);</span><br><span class="line">return null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在更新之前获取快照</span><br><span class="line">getSnapshotBeforeUpdate()&#123;</span><br><span class="line">console.log(&#x27;getSnapshotBeforeUpdate&#x27;);</span><br><span class="line">return &#x27;atguigu&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件挂载完毕的钩子</span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">console.log(&#x27;Count---componentDidMount&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件将要卸载的钩子</span><br><span class="line">componentWillUnmount()&#123;</span><br><span class="line">console.log(&#x27;Count---componentWillUnmount&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//控制组件更新的“阀门”</span><br><span class="line">shouldComponentUpdate()&#123;</span><br><span class="line">console.log(&#x27;Count---shouldComponentUpdate&#x27;);</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">//组件更新完毕的钩子</span><br><span class="line">componentDidUpdate(preProps,preState,snapshotValue)&#123;</span><br><span class="line">console.log(&#x27;Count---componentDidUpdate&#x27;,preProps,preState,snapshotValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">console.log(&#x27;Count---render&#x27;);</span><br><span class="line">const &#123;count&#125; = this.state</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;当前求和为：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button onClick=&#123;this.add&#125;&gt;点我+1&lt;/button&gt;</span><br><span class="line">&lt;button onClick=&#123;this.death&#125;&gt;卸载组件&lt;/button&gt;</span><br><span class="line">&lt;button onClick=&#123;this.force&#125;&gt;不更改任何状态中的数据，强制更新一下&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//渲染组件</span><br><span class="line">ReactDOM.render(&lt;Count count=&#123;199&#125;/&gt;,document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="7-2-生命周期中重要的勾子"><a href="#7-2-生命周期中重要的勾子" class="headerlink" title="7.2 生命周期中重要的勾子"></a>7.2 生命周期中重要的勾子</h4><ol><li><p>render：初始化渲染或更新渲染调用</p></li><li><p>componentDidMount：开启监听, 发送ajax请求</p></li><li><p>componentWillUnmount：做一些收尾工作, 如: 清理定时器</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中的浅拷贝和深拷贝</title>
      <link href="/2021/09/06/javascript%E4%B8%AD%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2021/09/06/javascript%E4%B8%AD%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-浅拷贝和深拷贝的区别"><a href="#1-浅拷贝和深拷贝的区别" class="headerlink" title="1.浅拷贝和深拷贝的区别"></a>1.浅拷贝和深拷贝的区别</h3><ul><li>浅拷贝：进行浅拷贝时，如果数据是基本数据类型，那么就如同直接赋值，会拷贝其本身，但是如果拷贝的内容出类基本数据类型还有另外一层对象，则浅拷贝只是拷贝了引用（即是拷贝了地址），对象的改变也会导致拷贝对象的改变；</li><li>深拷贝：深拷贝会拷贝多层，即使是嵌套了对象也会拷贝出来；</li></ul><h3 id="2-实现浅拷贝"><a href="#2-实现浅拷贝" class="headerlink" title="2.实现浅拷贝"></a>2.实现浅拷贝</h3><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign();"></a>Object.assign();</h4><ul><li><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign() 进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身;</p></li><li><p>```js<br>Object.assign(target, …sources);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 参数：target：目标对象；sources：任意多个源对象；返回值：目标对象会被返回；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 方法一，代码如下：</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">function simpleClone(initalObj) &#123;</span><br><span class="line">    var obj = &#123;&#125;;</span><br><span class="line">    for ( var i in initalObj) &#123;</span><br><span class="line">        obj[i] = initalObj[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: &quot;hello&quot;,</span><br><span class="line">    b:&#123;</span><br><span class="line">        a: &quot;world&quot;,</span><br><span class="line">        b: 21</span><br><span class="line">    &#125;,</span><br><span class="line">    c:[&quot;Bob&quot;, &quot;Tom&quot;, &quot;Jenny&quot;],</span><br><span class="line">    d:function() &#123;</span><br><span class="line">        alert(&quot;hello world&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var cloneObj = simpleClone(obj);</span><br><span class="line"> </span><br><span class="line">console.log(cloneObj.a);</span><br><span class="line">console.log(cloneObj.b);</span><br><span class="line">console.log(cloneObj.c);</span><br><span class="line">console.log(cloneObj.d);</span><br><span class="line"> </span><br><span class="line">//更改拷贝对象中的a,b,c,d，看看源对象是否变化</span><br><span class="line">cloneObj.a = &quot;changed&quot;;</span><br><span class="line">cloneObj.b.a = &quot;changed&quot;;</span><br><span class="line">cloneObj.b.b = 25;</span><br><span class="line">cloneObj.c = [1, 2, 3];</span><br><span class="line">cloneObj.d = function() &#123; alert(&quot;changed&quot;); &#125;;</span><br><span class="line">console.log(obj.a); //hello</span><br><span class="line">console.log(obj.b); //&#123;a:&quot;changed&quot;,b:25&#125;,事实上就是只有对象是拷贝的引用类型(即是拷贝是地址)</span><br><span class="line">console.log(obj.c); //[&#x27;Bob&#x27;,&#x27;Tom&#x27;,&#x27;Jenny&#x27;]</span><br><span class="line">console.log(obj.d); //...alert(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure></li></ul><p>浅拷贝就是拷贝了一层，除了对象是拷贝的引用类型，其他都是直接将值传递，有自己的内存空间的</p><h4 id="方法二，代码如下："><a href="#方法二，代码如下：" class="headerlink" title="方法二，代码如下："></a>方法二，代码如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">21</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> cloneObj1= <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line">cloneObj1.a = <span class="string">&quot;changed&quot;</span>;</span><br><span class="line">cloneObj1.b.a = <span class="string">&quot;changed&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.a);  <span class="comment">//hello(没有影响到原对象)</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b.a); <span class="comment">// &quot;changed&quot;(影响到原对象，可见对于第二层是浅拷贝)</span></span><br></pre></td></tr></table></figure><p>直接赋值的拷贝方法是直接把obj1的地址赋值给了cloneObj1, 改了里面的任何一项, 都会反应到新值上; 不同的, Object.assign(), 是把obj1中的每一项都拿出来放到{}中, 所以基本数据类型是自己的, 而引用类型是地址; </p><p>在这里obj1.b是对象类型，所以该项的拷贝是直接赋值，是浅拷贝，只是拷贝了地址的引用，对新值的修改会影响原对象（obj1）;</p><p>Object.assign()是可以拷贝一层，如果对象只有一层的话，可以使用这个函数作为深拷贝;</p><h3 id="3-实现深拷贝"><a href="#3-实现深拷贝" class="headerlink" title="3.实现深拷贝"></a>3.实现深拷贝</h3><h4 id="3-1-手动复制"><a href="#3-1-手动复制" class="headerlink" title="3.1 手动复制"></a>3.1 手动复制</h4><ul><li>把一个对象的每一个属性复制给另一个对象的属性</li></ul><h4 id="3-2-对象只有一层时"><a href="#3-2-对象只有一层时" class="headerlink" title="3.2 对象只有一层时"></a>3.2 对象只有一层时</h4><ul><li>可以使用Object.assign()方法</li></ul><h4 id="3-3-转成JSON字符串再转回对象（真正的深拷贝）"><a href="#3-3-转成JSON字符串再转回对象（真正的深拷贝）" class="headerlink" title="3.3 转成JSON字符串再转回对象（真正的深拷贝）"></a>3.3 转成JSON字符串再转回对象（真正的深拷贝）</h4><ul><li><p>用<code>JSON.stringify</code>把对象转成字符串，再用<code>JSON.parse</code>把字符串转成新的对象</p></li><li><p>```js<br>var obj1 = { body: { a: 10 } };<br>var obj2 = JSON.parse(JSON.stringify(obj1));<br>obj2.body.a = 20;<br>console.log(obj1);<br>// { body: { a: 10 } } &lt;– 沒被改到<br>console.log(obj2);<br>// { body: { a: 20 } }<br>console.log(obj1 === obj2);<br>// false<br>console.log(obj1.body === obj2.body);<br>// false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 坏处：</span><br><span class="line"></span><br><span class="line">  1. 它会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object。</span><br><span class="line">  2. Date对象, RegExp对象, Error对象等是无法通过这种方式深拷贝。这种方法能正确处理的对象只有 Number, String, Boolean, Array, 扁平对象，即那些能够被 json 直接表示的数据结构。</span><br><span class="line">  3. 如果原对象中有值为undefined的情况, JSON.stringify 后会丢失</span><br><span class="line">  4. 如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null</span><br><span class="line"></span><br><span class="line">  也就是说，只有可以转成JSON格式的对象才可以这样用，像function没办法转成JSON。</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### 3.4迭代递归法</span><br><span class="line"></span><br><span class="line">**for...in...法**</span><br><span class="line"></span><br><span class="line">对对象进行迭代操作，对它的每个值进行递归深拷贝</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">function isObject(o) &#123;</span><br><span class="line">    return (typeof o === &#x27;object&#x27; || typeof o === &#x27;function&#x27;) &amp;&amp; o !== null</span><br><span class="line">&#125;</span><br><span class="line">// 迭代递归法：深拷贝对象与数组</span><br><span class="line">function deepClone(obj) &#123;</span><br><span class="line">    if (!isObject(obj)) &#123;</span><br><span class="line">        throw new Error(&#x27;obj 不是一个对象！&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    let isArray = Array.isArray(obj)</span><br><span class="line">    let cloneObj = isArray ? [] : &#123;&#125;</span><br><span class="line">    for (let key in obj) &#123;</span><br><span class="line">        cloneObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key]</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return cloneObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Reflect 法</strong> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function deepClone(obj) &#123;</span><br><span class="line">    if (!isObject(obj)) &#123;</span><br><span class="line">        throw new Error(&#x27;obj 不是一个对象！&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    let isArray = Array.isArray(obj)</span><br><span class="line">    let cloneObj = isArray ? [...obj] : &#123; ...obj &#125;</span><br><span class="line">    Reflect.ownKeys(cloneObj).forEach(key =&gt; &#123;</span><br><span class="line">        cloneObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key]</span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">    return cloneObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Vue的电商管理系统后台总结</title>
      <link href="/2021/08/31/%E5%9F%BA%E4%BA%8EVue%E7%9A%84%E7%94%B5%E5%95%86%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/31/%E5%9F%BA%E4%BA%8EVue%E7%9A%84%E7%94%B5%E5%95%86%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="vue-create-shopmall-创建文件"><a href="#vue-create-shopmall-创建文件" class="headerlink" title="vue create shopmall (创建文件)"></a>vue create shopmall (创建文件)</h3><h3 id="1-登录功能实现"><a href="#1-登录功能实现" class="headerlink" title="1.登录功能实现"></a>1.登录功能实现</h3><ul><li><p>项目创建成功之后会生成一个默认页面，我们需要进行更改，打开项目的src目录，点击main.js文件（入口文件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./plugins/element.js&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>再打开App.vue(根组件)，将根组件的内容进行操作梳理(template中留下根节点，script中留下默认导出，去掉组件，style中去掉所有样式)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;app&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>再打开router.js(路由)，将routes数组中的路由规则清除，然后将views删除，将components中的helloworld.vue删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在components文件夹中新建Login.vue组件,添加template，script，style标签,style标签中的scoped可以防止组件之间的样式冲突，没有scoped则样式是全局的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;login_container&quot;&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.login_container &#123;</span><br><span class="line">  background-color: #2b5b6b;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在router.js中导入组件并设置规则,在App.vue中添加路由占位符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/login&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: Login &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>当我们给Login.vue中的内容添加样式的时候，会报错“缺少less-loader”，需要配置less加载器（开发依赖），安装less(开发依赖)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less-loader</span><br></pre></td></tr></table></figure></li><li><p>然后需要添加公共样式，在assets文件夹下面添加css文件夹，创建global.css文件,添加全局样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 全局样式表 */</span></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-id">#app</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在main.js中导入global.css，使得全局样式生效 import “./assets/css/global.css”，然后Login.vue中的根元素也需要设置撑满全屏（height:100%）<br>最终Login.vue文件中的代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;login_container&quot;&gt;</span><br><span class="line">        &lt;!-- 登录盒子  --&gt;</span><br><span class="line">        &lt;div class=&quot;login_box&quot;&gt;</span><br><span class="line">            &lt;!-- 头像 --&gt;</span><br><span class="line">            &lt;div class=&quot;avatar_box&quot;&gt;</span><br><span class="line">                &lt;img src=&quot;../assets/logo.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!-- 登录表单 --&gt;</span><br><span class="line">            &lt;el-form :model=&quot;loginForm&quot; ref=&quot;LoginFormRef&quot; :rules=&quot;loginFormRules&quot; label-width=&quot;0px&quot; class=&quot;login_form&quot;&gt;</span><br><span class="line">                &lt;!-- 用户名 --&gt;</span><br><span class="line">                &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">                    &lt;el-input v-model=&quot;loginForm.username&quot; prefix-icon=&quot;iconfont icon-user&quot; &gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt; </span><br><span class="line">                &lt;!-- 密码 --&gt;</span><br><span class="line">                &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">                    &lt;el-input type=&quot;password&quot; v-model=&quot;loginForm.password&quot; prefix-icon=&quot;iconfont icon-3702mima&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt; </span><br><span class="line">                &lt;!-- 按钮 --&gt;</span><br><span class="line">                &lt;el-form-item class=&quot;btns&quot;&gt;</span><br><span class="line">                    &lt;el-button type=&quot;primary&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">                    &lt;el-button type=&quot;info&quot; @click=&quot;resetLoginForm&quot;&gt;重置&lt;/el-button&gt;</span><br><span class="line">                &lt;/el-form-item&gt; </span><br><span class="line">            &lt;/el-form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      //数据绑定</span><br><span class="line">      loginForm: &#123;</span><br><span class="line">        username: &#x27;admin&#x27;,</span><br><span class="line">        password: &#x27;123456&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      //表单验证规则</span><br><span class="line">      loginFormRules: &#123;</span><br><span class="line">        username: [</span><br><span class="line">          &#123; required: true, message: &#x27;请输入登录名&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            min: 3,</span><br><span class="line">            max: 10,</span><br><span class="line">            message: &#x27;登录名长度在 3 到 10 个字符&#x27;,</span><br><span class="line">            trigger: &#x27;blur&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        password: [</span><br><span class="line">          &#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            min: 6,</span><br><span class="line">            max: 15,</span><br><span class="line">            message: &#x27;密码长度在 6 到 15 个字符&#x27;,</span><br><span class="line">            trigger: &#x27;blur&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //添加行为，</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //添加表单重置方法</span><br><span class="line">    resetLoginForm() &#123;</span><br><span class="line">      //this=&gt;当前组件对象，其中的属性$refs包含了设置的表单ref</span><br><span class="line">      //   console.log(this)</span><br><span class="line">      this.$refs.LoginFormRef.resetFields()</span><br><span class="line">    &#125;,</span><br><span class="line">    login() &#123;</span><br><span class="line">      //点击登录的时候先调用validate方法验证表单内容是否有误</span><br><span class="line">      this.$refs.LoginFormRef.validate(async valid =&gt; &#123;</span><br><span class="line">        console.log(this.loginFormRules)</span><br><span class="line">        //如果valid参数为true则验证通过</span><br><span class="line">        if (!valid) &#123;</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //发送请求进行登录</span><br><span class="line">        const &#123; data: res &#125; = await this.$http.post(&#x27;login&#x27;, this.loginForm)</span><br><span class="line">        //   console.log(res);</span><br><span class="line">        if (res.meta.status !== 200) &#123;</span><br><span class="line">          return this.$message.error(&#x27;登录失败:&#x27; + res.meta.msg) //console.log(&quot;登录失败:&quot;+res.meta.msg)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.$message.success(&#x27;登录成功&#x27;)</span><br><span class="line">        console.log(res)</span><br><span class="line">        //保存token</span><br><span class="line">        window.sessionStorage.setItem(&#x27;token&#x27;, res.data.token)</span><br><span class="line">        // 导航至/home</span><br><span class="line">        this.$router.push(&#x27;/home&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.login_container &#123;</span><br><span class="line">  background-color: #2b5b6b;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.login_box &#123;</span><br><span class="line">  width: 450px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">  .avatar_box &#123;</span><br><span class="line">    height: 130px;</span><br><span class="line">    width: 130px;</span><br><span class="line">    border: 1px solid #eee;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    box-shadow: 0 0 10px #ddd;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    img &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      border-radius: 50%;</span><br><span class="line">      background-color: #eee;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.login_form &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  padding: 0 20px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.btns &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: flex-end;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-添加第三方字体"><a href="#2-添加第三方字体" class="headerlink" title="2.添加第三方字体"></a>2.添加第三方字体</h3><ul><li><p>复制素材中的fonts文件夹到assets中</p></li><li><p>在入口文件main.js中导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./assets/fonts/iconfont.css&#x27;</span><br></pre></td></tr></table></figure></li><li><p>然后直接在 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input prefix-icon=&quot;iconfont icon-3702mima&quot;&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-导入axios以发送ajax请求"><a href="#3-导入axios以发送ajax请求" class="headerlink" title="3.导入axios以发送ajax请求"></a>3.导入axios以发送ajax请求</h3><ul><li><p>打开main.js，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>设置请求的根路径：</p></li><li><p>```js<br>axios.defaults.baseURL = ‘<a href="http://127.0.0.1:8888/api/private/v1/&#39;">http://127.0.0.1:8888/api/private/v1/&#39;</a>;<br>// 挂载axios：<br>Vue.prototype.$http = axios;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.登录成功之后的操作</span><br><span class="line"></span><br><span class="line">- 登录成功之后，需要将后台返回的token保存到sessionStorage中，操作完毕之后，需要跳转到/home</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  login() &#123;</span><br><span class="line">        //点击登录的时候先调用validate方法验证表单内容是否有误</span><br><span class="line">        this.$refs.LoginFormRef.validate(async valid =&gt; &#123;</span><br><span class="line">          console.log(this.loginFormRules)</span><br><span class="line">          //如果valid参数为true则验证通过</span><br><span class="line">          if (!valid) &#123;</span><br><span class="line">            return</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          //发送请求进行登录</span><br><span class="line">          const &#123; data: res &#125; = await this.$http.post(&#x27;login&#x27;, this.loginForm)</span><br><span class="line">          //   console.log(res);</span><br><span class="line">          if (res.meta.status !== 200) &#123;</span><br><span class="line">            return this.$message.error(&#x27;登录失败:&#x27; + res.meta.msg) //console.log(&quot;登录失败:&quot;+res.meta.msg)</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          this.$message.success(&#x27;登录成功&#x27;)</span><br><span class="line">          console.log(res)</span><br><span class="line">          //保存token</span><br><span class="line">          window.sessionStorage.setItem(&#x27;token&#x27;, res.data.token)</span><br><span class="line">          // 导航至/home</span><br><span class="line">          this.$router.push(&#x27;/home&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="5-添加一个组件Home-vue，并为之添加规则"><a href="#5-添加一个组件Home-vue，并为之添加规则" class="headerlink" title="5.添加一个组件Home.vue，并为之添加规则"></a>5.添加一个组件Home.vue，并为之添加规则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        this is home</span><br><span class="line">        &lt;el-button type=&quot;info&quot; @click=&quot;logout&quot;&gt; 退出 &lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    logout() &#123;</span><br><span class="line">      window.sessionStorage.clear()</span><br><span class="line">      this.$router.push(&#x27;/login&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&#x27;less&#x27; scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>添加路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/login&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: Login &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: Home &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加路由守卫<br>如果用户没有登录，不能访问/home,如果用户通过url地址直接访问，则强制跳转到登录页面<br>打开router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;./components/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./components/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>:<span class="string">&#x27;/login&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span> , <span class="attr">component</span>:Login &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span> , <span class="attr">component</span>:Home&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂载路由导航守卫,to表示将要访问的路径，from表示从哪里来，next是下一个要做的操作</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123; </span><br><span class="line">  <span class="keyword">if</span>(to.path === <span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> next();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取token</span></span><br><span class="line">  <span class="keyword">const</span> tokenStr = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!tokenStr)</span><br><span class="line">    <span class="keyword">return</span> next(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router </span><br></pre></td></tr></table></figure></li><li><p>实现退出功能<br>在Home组件中添加一个退出功能按钮,给退出按钮添加点击事件，添加事件处理代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.sessionStorage.clear();</span><br><span class="line">            <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>formData的基本使用</title>
      <link href="/2021/08/25/formData%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/08/25/formData%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-FormData对象的作用："><a href="#1-FormData对象的作用：" class="headerlink" title="1.FormData对象的作用："></a>1.FormData对象的作用：</h3><ul><li>模拟HTML表单，相当于将HTML表单映射成表单对象，自动将表单对象中的数据拼接成请求参数的格式</li><li>异步上传二进制文件</li></ul><h3 id="2-使用formData对象"><a href="#2-使用formData对象" class="headerlink" title="2.使用formData对象"></a>2.使用formData对象</h3><ol><li>准备html表单</li></ol><ul><li>```html<form id="form">     <input type="text" name="username" />     <input type="password" name="password" />     <input type="button" value="提交"/></form><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 将 HTML 表单转化为 formData 对象</span><br><span class="line"></span><br><span class="line">   ```html</span><br><span class="line">   var form = document.getElementById(&#x27;form&#x27;); </span><br><span class="line">   var formData = new FormData(form);</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>提交表单对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure></li><li><p>注意：<br>Formdata 对象不能用于 get 请求，因为对象需要被传递到 send 方法中，而 get 请求方式的请求参数只能放在请求地址的后面。<br>服务器端 bodyParser 模块不能解析 formData 对象表单数据，我们需要使用 formidable 模块进行解析。</p><p>即是在服务器端加上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br><span class="line">app.post(<span class="string">&#x27;/formData&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 创建formidable表单解析对象</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line"><span class="comment">// 解析客户端传递过来的FormData对象</span></span><br><span class="line">form.parse(req, <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">res.send(fields);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建具体实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建普通的html表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;form&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">button.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData(form);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// get(&#x27;key&#x27;)获取表单对象属性的值</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// set(&#x27;key&#x27;,&#x27;value&#x27;)设置表单对象属性的值</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// delete(&#x27;key&#x27;)删除表单中属性的值</span></span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(formData.get(<span class="string">&#x27;username&#x27;</span>));</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果设置的表单属性存在 将会覆盖属性原有的值</span></span></span><br><span class="line"><span class="javascript">      formData.set(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;itcast&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果设置的表单属性存在 将会自动创建这个表单属性</span></span></span><br><span class="line"><span class="javascript">      formData.set(<span class="string">&#x27;age&#x27;</span>,<span class="number">99</span>);</span></span><br><span class="line"><span class="javascript">      formData.delete(<span class="string">&#x27;password&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">xhr.open(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;http://localhost:3000/formData&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="javascript">xhr.send(formData);</span></span><br><span class="line"><span class="javascript">xhr.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 对http的状态码进行判断</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(xhr.status==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 创建空的表单对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> newForm = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">      newForm.append(<span class="string">&#x27;新内容&#x27;</span>,<span class="string">&#x27;我是新的表单对象&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(newForm.get(<span class="string">&#x27;新内容&#x27;</span>));</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-formData对象具有的方法"><a href="#3-formData对象具有的方法" class="headerlink" title="3.formData对象具有的方法"></a>3.formData对象具有的方法</h3><ol><li><p>获取表单对象中属性的值get(‘key’)</p></li><li><p>设置表单对象中属性的值set(‘key’,’value’)</p></li><li><p>删除表单对象中属性的值delete(‘key’)</p></li><li><p>向表单对象中追加属性值append(‘key’, ‘value’);</p></li><li><p>方法实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line"><span class="comment">// get(&#x27;key&#x27;)获取表单对象属性的值</span></span><br><span class="line"><span class="comment">// set(&#x27;key&#x27;,&#x27;value&#x27;)设置表单对象属性的值</span></span><br><span class="line"><span class="comment">// delete(&#x27;key&#x27;)删除表单中属性的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(formData.get(<span class="string">&#x27;username&#x27;</span>));</span><br><span class="line"><span class="comment">// 如果设置的表单属性存在 将会覆盖属性原有的值</span></span><br><span class="line">formData.set(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;itcast&#x27;</span>);</span><br><span class="line"><span class="comment">// 如果设置的表单属性存在 将会自动创建这个表单属性</span></span><br><span class="line">formData.set(<span class="string">&#x27;age&#x27;</span>,<span class="number">99</span>);</span><br><span class="line">formData.delete(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建空的表单对象</span></span><br><span class="line"><span class="keyword">var</span> newForm = <span class="keyword">new</span> FormData();</span><br><span class="line">newForm.append(<span class="string">&#x27;新内容&#x27;</span>,<span class="string">&#x27;我是新的表单对象&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newForm.get(<span class="string">&#x27;新内容&#x27;</span>));</span><br></pre></td></tr></table></figure></li></ol><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>set 方法与 append 方法的区别是，在属性名已存在的情况下，set 会覆盖已有键名的值，append会保留两个值（在实际传输中，默认传输最后面的值）；</li></ul><h3 id="4-FormData对象实现二进制文件上传"><a href="#4-FormData对象实现二进制文件上传" class="headerlink" title="4.FormData对象实现二进制文件上传"></a>4.FormData对象实现二进制文件上传</h3><ul><li><p>文件上传关键：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line"><span class="comment">// 当用户选择文件的时候</span></span><br><span class="line"> file.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 创建空表单对象</span></span><br><span class="line">     <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">     <span class="comment">// 将用户选择的二进制文件追加到表单对象中</span></span><br><span class="line">     formData.append(<span class="string">&#x27;attrName&#x27;</span>, <span class="built_in">this</span>.files[<span class="number">0</span>]);</span><br><span class="line">     <span class="comment">// 配置ajax对象，请求方式必须为post</span></span><br><span class="line">     xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;www.example.com&#x27;</span>);</span><br><span class="line">     xhr.send(formData);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="文件上传实例："><a href="#文件上传实例：" class="headerlink" title="文件上传实例："></a>文件上传实例：</h4><ul><li><p>示例代码(客户端)：</p></li><li><p>```html</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Document</title>    <link rel="stylesheet" href="/assets/bootstrap/dist/css/bootstrap.min.css">    <style type="text/css">        .container {            padding-top: 60px;        }        .padding {            padding: 5px 0 20px 0;        }    </style></head><body>    <div class="container">        <div class="form-group">            <label>请选择文件</label>            <input type="file" id="file">            <div class="padding" id="box">                <!--<img src="" class="img-rounded img-responsive">-->            </div>            <div class="progress">                <div class="progress-bar" style="width: 0%;" id="bar">0%</div>            </div>        </div>    </div>    <script type="text/javascript">        // 获取文件选择控件        var file = document.getElementById('file');        // 获取进度条元素        var bar = document.getElementById('bar');        // 获取图片容器        var box = document.getElementById('box');        // 为文件选择控件添加onchanges事件        // 在用户选择文件时触发        file.onchange = function () {            // 创建空的formData表单对象            var formData = new FormData();            // 将用户选择的文件追加到formData表单对象中            formData.append('attrName', this.files[0]);            // 创建ajax对象            var xhr = new XMLHttpRequest();            // 对ajax对象进行配置            xhr.open('post', 'http://localhost:3000/upload');            // 在文件上传的过程中持续触发            xhr.upload.onprogress = function (ev) {                // ev.loaded 文件已经上传了多少                // ev.total  上传文件的总大小                var result = (ev.loaded / ev.total) * 100 + '%';                // 设置进度条的宽度                bar.style.width = result;                // 将百分比显示在进度条中                bar.innerHTML = result;            }            // 发送ajax请求            xhr.send(formData);            // 监听服务器端响应给客户端的数据            xhr.onload = function () {                // 如果服务器端返回的http状态码为200                // 说明请求是成功的                if (xhr.status == 200) {                    // 将服务器端返回的数据显示在控制台中                    var result = JSON.parse(xhr.responseText);                    // 动态创建img标签                    var img = document.createElement('img');                    // 给图片标签设置src属性                    img.src = result.path;                    // 当图片加载完成以后                    img.onload = function () {                        // 将图片显示在页面中                        box.appendChild(img);                    }                }            }        }    </script></body></html><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 实例代码(服务器端):</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const formidable = require(&#x27;formidable&#x27;);</span><br><span class="line">  // 实现文件上传的路由</span><br><span class="line">  app.post(&#x27;/upload&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  // 创建formidable表单解析对象</span><br><span class="line">  const form = new formidable.IncomingForm();</span><br><span class="line">  // 设置客户端上传文件的存储路径</span><br><span class="line">  form.uploadDir = path.join(__dirname, &#x27;public&#x27;, &#x27;uploads&#x27;);</span><br><span class="line">  // 保留上传文件的后缀名字</span><br><span class="line">  form.keepExtensions = true;</span><br><span class="line">  // 解析客户端传递过来的FormData对象</span><br><span class="line">  form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class="line">  // 将客户端传递过来的文件地址响应到客户端</span><br><span class="line">  res.send(&#123;</span><br><span class="line">  path: files.attrName.path.split(&#x27;public&#x27;)[1]</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript构建链表</title>
      <link href="/2021/08/20/javascript%E6%9E%84%E5%BB%BA%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/08/20/javascript%E6%9E%84%E5%BB%BA%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="javascript构建链表"><a href="#javascript构建链表" class="headerlink" title="javascript构建链表"></a>javascript构建链表</h3><ul><li>链表是一种链式数据结构，链上的每个节点包含两种信息：节点本身的数据和指向下一个节点的指针;</li><li>一个单向链表通常具有以下方法：<ol><li><code>size</code>：返回链表中节点的个数</li><li><code>head</code>：返回链表中的头部元素</li><li><code>add</code>：向链表尾部增加一个节点</li><li><code>remove</code>：删除某个节点</li><li><code>indexOf</code>：返回某个节点的index</li><li><code>elementAt</code>：返回某个index处的节点</li><li><code>addAt</code>：在某个index处插入一个节点</li><li><code>removeAt</code>：删除某个index处的节点</li></ol></li></ul><h4 id="单向链表的实现："><a href="#单向链表的实现：" class="headerlink" title="单向链表的实现："></a>单向链表的实现：</h4><ul><li><pre><code class="js">// 链表中的节点function Node(value) &#123;  // 节点数值  this.value = value;  // 节点指针  this.next = null;&#125;function linkList() &#123;  // 表长  let length = 0;  // 表头  let head = null;  // 返回链表头部元素  this.head = function () &#123;    return console.log(head);  &#125;  // 返回链表结点个数  this.size = function () &#123;    return length;  &#125;  // 判断链表是否非空  this.isEmpty = function () &#123;    return length === 0;  &#125;  // 向尾部添加一个元素  this.add = function (value) &#123;    let node = new Node(value);    if (head == null) &#123;      head = node;    &#125; else &#123;      let currentNode = head;      while (currentNode.next) &#123;        currentNode = currentNode.next;      &#125;      currentNode.next = node;    &#125;    length++;    return;  &#125;  // 根据value删除结点  this.remove = function (value) &#123;    if (length == 0) &#123;      console.log(&#39;当前链表为空，无节点可删除！&#39;);      return &#39;当前链表为空，无节点可删除！&#39;;    &#125; else &#123;      let currentNode = head;      let record = 0;      let previousNode;      while (currentNode.value != value) &#123;        previousNode = currentNode;        currentNode = currentNode.next;        record += 1;        if (record == length) &#123;          return console.log(&#39;删除无效，链表中不存在值等于&#39; + value + &#39;的节点！&#39;);        &#125;      &#125;      if (length == 1) &#123;        head = null;        currentNode = head;        length--;      &#125; else &#123;        // 如果删除的是首节点        if (record == 0) &#123;          let lalaNode = currentNode;          currentNode.value = lalaNode.next.value;          currentNode.next = lalaNode.next.next;          length--;        &#125; else &#123;          previousNode.next = currentNode.next;          length--;        &#125;      &#125;    &#125;    return console.log(head);  &#125;  // 按照值查找节点的下标  this.indexOf = function (value) &#123;    let index = 0;    let currentNode = head;    while (currentNode.value != value) &#123;      index++;      currentNode = currentNode.next;      if (index == length) &#123;        return console.log(&#39;返回下标失败，链表中不存在值等于&#39; + value + &#39;的节点！&#39;);      &#125;    &#125;    console.log(value + &#39;在链表中的位置是：&#39; + index);    return index;  &#125;  // 按照下标查找节点  this.elementAt = function (index) &#123;    let currentNode = head;    if (index &lt; 0 || index &gt;= length) &#123;      return console.log(&#39;节点不存在，输入的下标过大或过小&#39;);    &#125; else &#123;      for (let i = 1; i &lt;= index; i++) &#123;        currentNode = currentNode.next;      &#125;      return console.log(currentNode);    &#125;  &#125;  // 在某个下标处插入一个节点  this.addAt = function (index, value) &#123;    let node = new Node(value);    let currentNode = head;    if (index &lt; 0 || index &gt;= length) &#123;      return console.log(&#39;插入失败，你输入的下标过大或过小&#39;);    &#125; else &#123;      let previousNode;      for (let i = 1; i &lt;= index; i++) &#123;        previousNode = currentNode;        currentNode = currentNode.next;      &#125;      previousNode.next = node;      node.next = currentNode;      return console.log(node);    &#125;  &#125;  // 删除指定下标的节点  this.removeAt = function (index) &#123;    let currentNode = head;    if (index &lt; 0 || index &gt;= length) &#123;      return console.log(&#39;删除失败，你输入的下标过大或过小&#39;);    &#125; else &#123;      let previousNode;      for (let i = 1; i &lt;= index; i++) &#123;        previousNode = currentNode;        currentNode = currentNode.next;      &#125;      previousNode.next = currentNode.next;      currentNode.next = currentNode.next.next;      return console.log(&#39;删除节点成功！&#39;);    &#125;  &#125;&#125;// 测试function addData() &#123;  let link = new linkList();  let data = [1, 2, 3, 4, 5, 6, 7, 8, 9];  for (let i = 0; i &lt; data.length; i++) &#123;    link.add(data[i]);  &#125;  link.add(3);  link.add(2);  link.add(7);  link.add(5);  link.add(9);  link.head();  link.remove(1);  link.remove(2);  link.remove(3);  link.remove(4);  link.indexOf(4);  link.indexOf(8);  link.elementAt(0);  link.addAt(2, 89);  link.removeAt(1);  link.head();&#125;addData();</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 算法&amp;数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript构建栈</title>
      <link href="/2021/08/19/javascript%E6%9E%84%E5%BB%BA%E6%A0%88/"/>
      <url>/2021/08/19/javascript%E6%9E%84%E5%BB%BA%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="栈是什么？"><a href="#栈是什么？" class="headerlink" title="栈是什么？"></a>栈是什么？</h3><ul><li><p>栈(Stack)是一种数据结构，栈的特点是后进先出（last in first out）。生活中常见的Stack的例子比如一摞书，你最后放上去的那本你之后会最先拿走；又比如浏览器的访问历史，当点击返回按钮，最后访问的网站最先从历史记录中弹出。</p></li><li><p>Stack一般具备以下方法：</p></li><li><p><code>push</code>：将一个元素推入栈顶</p></li><li><p><code>pop</code>：移除栈顶元素，并返回被移除的元素</p></li><li><p><code>peek</code>：返回栈顶元素</p></li><li><p><code>length</code>：返回栈中元素的个数</p></li></ul><h3 id="构建栈："><a href="#构建栈：" class="headerlink" title="构建栈："></a>构建栈：</h3><p>Javascript的Array天生具备了Stack的特性，但我们也可以从头实现一个 Stack类：</p><ul><li><pre><code class="js">function Stack()&#123;  let stackArray=[];  // 进栈操作  this.push=function(num)&#123;    stackArray.push(num);  &#125;  // 出栈操作  this.pop=function()&#123;    return stackArray.pop();  &#125;  // 获取栈顶元素  this.peek=function()&#123;    return stackArray[stackArray.length-1];  &#125;  // 判断栈是否为空  this.isEmpty=function()&#123;    return stackArray.length==0;  &#125;  // 获取栈的长度  this.size=function()&#123;    return stackArray.length;  &#125;  // 清空栈元素  this.clear=function()&#123;    return stackArray=[];  &#125;&#125;//使用栈// let stack = new Stack();// console.log(stack.isEmpty());    //true// stack.push(1);// stack.push(5);// console.log(stack.size());      //2// console.log(stack.peek());      //5// console.log(stack.pop());       //5// stack.clear();// console.log(stack.isEmpty());   //true// 进制转换function change(num)&#123;  let stack = new Stack();  let result = &#39;&#39;;  // 入栈操作  while(num)&#123;    stack.push(num%2);    num = Math.floor(num/2);  &#125;  // 出栈操作  while(!stack.isEmpty())&#123;    result += stack.pop();  &#125;  result = parseInt(result);  return result;&#125;// console.log(change(192));// 判断字符串是否回文function isPalindrome(word)&#123;  let newWord = &#39;&#39;;  let stack = new Stack();  for(let i=0;i&lt;word.length;i++)&#123;    stack.push(word[i]);  &#125;   while(!stack.isEmpty())&#123;     newWord += stack.pop();   &#125;   return word == newWord;&#125;console.log(isPalindrome(&#39;123456789987654321&#39;));// 实现阶乘function factorial(num)&#123;  if(num===0)&#123;    return 1;  &#125;else&#123;    return num*factorial(num-1);  &#125;&#125;console.log(factorial(5));// 使用栈来算阶乘function factorial1(num)&#123;  let stack = new Stack();  let result = 1;  while(num&gt;0)&#123;    stack.push(num--);  &#125;  while(!stack.isEmpty())&#123;    result *= stack.pop();  &#125;  return result;&#125;console.log(factorial1(5));</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 算法&amp;数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax学习总结</title>
      <link href="/2021/08/18/ajax%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/18/ajax%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-什么是ajax："><a href="#1-什么是ajax：" class="headerlink" title="1.什么是ajax："></a>1.什么是ajax：</h3><p> AJAX = (async)异步 JavaScript 和 XML；</p><p>AJAX 是一种用于创建快速动态网页的技术；</p><p>它是浏览器提供的一套方法，可以实现页面无刷新更新数据，提高用户浏览网站应用的体验；</p><h4 id="1-1应用场景："><a href="#1-1应用场景：" class="headerlink" title="1.1应用场景："></a>1.1应用场景：</h4><ol><li>页面上拉加载更多数据</li><li>列表数据无刷新分页</li><li>表单项离开焦点数据验证</li><li>搜索框提示文字下拉列表</li></ol><h4 id="1-2-ajax的运行环境："><a href="#1-2-ajax的运行环境：" class="headerlink" title="1.2 ajax的运行环境："></a>1.2 ajax的运行环境：</h4><p>Ajax 技术需要运行在网站环境中才能生效，一般使用Node创建的服务器作为网站服务器；</p><h3 id="2-Ajax实现步骤："><a href="#2-Ajax实现步骤：" class="headerlink" title="2.Ajax实现步骤："></a>2.Ajax实现步骤：</h3><ol><li><p>创建Ajax对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></li><li><p>告诉Ajax请求地址以及请求方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.告诉Ajax对象要向哪里发送请求，以什么方式发送请求</span></span><br><span class="line"><span class="comment">// 1)请求方式 2)请求地址</span></span><br><span class="line">xhr.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://localhost:3000/first&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>发送请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.发送请求</span></span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></li><li><p>获取服务器端响应到客户端的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：发送请求之后数据不是一下子就能够接收的，</span></span><br><span class="line"><span class="comment">// 需要时间才能够接收完毕，接收完毕后使用xhr.onload进行响应</span></span><br><span class="line"><span class="comment">// 4.获取服务器端响应到客户端的数据</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端完整(test.html)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1.创建ajax对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript"><span class="comment">// 2.告诉Ajax对象要向哪里发送请求，以什么方式发送请求</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1)请求方式 2)请求地址</span></span></span><br><span class="line"><span class="javascript">xhr.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://localhost:3000/first&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 3.发送请求</span></span></span><br><span class="line"><span class="javascript">xhr.send();</span></span><br><span class="line"><span class="javascript"><span class="comment">// 注意：发送请求之后数据不是一下子就能够接收的，</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 需要时间才能够接收完毕，接收完毕后使用xhr.onload进行响应</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 4.获取服务器端响应到客户端的数据</span></span></span><br><span class="line"><span class="javascript">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建服务器(app.js)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 01ajax入门</span></span><br><span class="line">app.get(<span class="string">&quot;/first&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;Hello Ajax!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">// 控制台提示输出</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在浏览器中输入：<a href="http://localhost:3000/first">http://localhost:3000/first</a>  进行ajax请求访问</p></li></ol><h3 id="3-服务器端响应数据的格式"><a href="#3-服务器端响应数据的格式" class="headerlink" title="3.服务器端响应数据的格式"></a>3.服务器端响应数据的格式</h3><ul><li><p>在真实的项目中，服务器端大多数情况下会以 JSON 对象作为响应数据的格式。当客户端拿到响应数据时，要将 JSON 数据和 HTML 字符串进行拼接，然后将拼接的结果展示在页面中；</p></li><li><p>在 http 请求与响应的过程中，无论是请求参数还是响应内容，如果是对象类型，最终都会被转换为对象字符串进行传输；</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse() <span class="comment">// 将 json 字符串转换为json对象</span></span><br></pre></td></tr></table></figure><ul><li><p>服务器端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 02处理服务器端返回的json数据</span></span><br><span class="line">app.get(<span class="string">&quot;/responseData&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(&#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>处理返回的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.获取服务器端响应到客户端的数据</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 将JSON字符串转换成JSON对象</span></span><br><span class="line">  <span class="keyword">let</span> responseText = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">  <span class="built_in">console</span>.log(responseText);</span><br><span class="line">  <span class="comment">// 对服务器返回的数据进行使用</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&lt;h2&gt;&#x27;</span>+responseText.name+<span class="string">&#x27;&lt;/h2&gt;&#x27;</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.innerHTML=str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-1向服务器中传递get请求参数"><a href="#3-1向服务器中传递get请求参数" class="headerlink" title="3.1向服务器中传递get请求参数"></a>3.1向服务器中传递get请求参数</h4><ul><li><p>客户端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">name</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">name</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;age&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 为按钮添加点击事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> nameValue = username.value;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> ageValue = age.value;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 拼接请求参数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> params = <span class="string">&#x27;username=&#x27;</span>+nameValue+<span class="string">&#x27;&amp;age=&#x27;</span>+ageValue;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 配置ajax对象</span></span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://localhost:3000/get?&#x27;</span>+params);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="javascript">      xhr.send();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取服务器端响应的数据</span></span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(xhr.responseText);</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));  </span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>服务器端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应03</span></span><br><span class="line">app.get(<span class="string">&quot;/get&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(req.query);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2向服务器传递post请求参数"><a href="#3-2向服务器传递post请求参数" class="headerlink" title="3.2向服务器传递post请求参数"></a>3.2向服务器传递post请求参数</h4><ul><li><p>客户端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">name</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">name</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;age&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 为按钮添加点击事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> nameValue = username.value;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> ageValue = age.value;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 拼接请求参数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> params = <span class="string">&#x27;username=&#x27;</span>+nameValue+<span class="string">&#x27;&amp;age=&#x27;</span>+ageValue;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 配置ajax对象</span></span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;http://localhost:3000/post&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 设置请求参数格式的类型(post请求必须要设置)(如是拼接字符串的形式则是下面的类型)</span></span></span><br><span class="line"><span class="javascript">      xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="javascript">      xhr.send(params);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取服务器端响应的数据</span></span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(JSON.parse(xhr.responseText));  </span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>服务器端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应04</span></span><br><span class="line">app.post(<span class="string">&quot;/post&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 需要借助第三方模块body-parser才能够成功接受到</span></span><br><span class="line">  res.send(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-4请求报文"><a href="#3-4请求报文" class="headerlink" title="3.4请求报文"></a>3.4请求报文</h4><p>在 HTTP 请求和响应的过程中传递的数据块就叫报文，包括要传送的数据和一些附加信息，这些数据和信息要遵守规定好的格式；</p><h4 id="3-5-请求参数的格式"><a href="#3-5-请求参数的格式" class="headerlink" title="3.5 请求参数的格式"></a>3.5 请求参数的格式</h4><ol><li>```js<br>// application/x-www-form-urlencoded<br>name=zhangsan&amp;age=20&amp;sex=男<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. application/json</span><br><span class="line"></span><br><span class="line">   ```js</span><br><span class="line">    &#123;name: &#x27;zhangsan&#x27;, age: &#x27;20&#x27;, sex: &#x27;男&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>在请求头中指定 Content-Type 属性的值是 application/json，告诉服务器端当前请求参数的格式是 json。</p></li><li><p>```js<br> JSON.stringify() // 将json对象转换为json字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 注意：get 请求是不能提交 json 对象数据格式的，传统网站的表单提交也是不支持 json 对象数据格式的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 3.6向服务器传递json格式参数</span><br><span class="line"></span><br><span class="line">- 客户端</span><br><span class="line"></span><br><span class="line">  ```html</span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // 创建ajax对象</span><br><span class="line">        let xhr = new XMLHttpRequest();</span><br><span class="line">        // 配置ajax对象</span><br><span class="line">        xhr.open(&#x27;post&#x27;,&#x27;http://localhost:3000/json&#x27;);</span><br><span class="line">        // 设置请求参数格式的类型(post请求必须要设置)(如是拼接字符串的形式则是下面的类型)</span><br><span class="line">        xhr.setRequestHeader(&#x27;Content-Type&#x27;,&#x27;application/json&#x27;);</span><br><span class="line">        // JSON.stringify()将JSON对象转换成json字符串</span><br><span class="line">        // 发送请求</span><br><span class="line">        xhr.send(JSON.stringify(&#123;name:&#x27;lisi&#x27;,age:50&#125;));</span><br><span class="line">        // 获取服务器端响应的数据</span><br><span class="line">        xhr.onload = function()&#123;</span><br><span class="line">          console.log(xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>服务器端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析传递过来的请求参数</span></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.post(<span class="string">&quot;/json&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 需要借助第三方模块body-parser才能够成功接受到</span></span><br><span class="line">  res.send(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-7Ajax状态码"><a href="#3-7Ajax状态码" class="headerlink" title="3.7Ajax状态码"></a>3.7Ajax状态码</h4><p>在创建ajax对象，配置ajax对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值，这个数值就是ajax状态码；</p><ul><li><p>0：请求未初始化(还没有调用open())<br>1：请求已经建立，但是还没有发送(还没有调用send())<br>2：请求已经发送<br>3：请求正在处理中，通常响应中已经有部分数据可以用了<br>4：响应已经完成，可以获取并使用服务器的响应了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.readyState <span class="comment">// 获取Ajax状态码</span></span><br></pre></td></tr></table></figure></li><li><p>onreadystatechange 事件,当 Ajax 状态码发生变化时将自动触发该事件</p><p>在事件处理函数中可以获取 Ajax 状态码并对其进行判断，当状态码为 4 时就可以通过 xhr.responseText 获取服务器端的响应数据了;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 0已经创建ajax对象，但是还没有对ajax对象进行配置</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(xhr.readyState);</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://localhost:3000/readystate&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1已经对ajax对象进行配置，但是还没有发送数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(xhr.readyState);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当ajax状态发生改变时触发</span></span></span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2请求已经发送了</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3已经接收到服务器的部分数据了</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 4服务器端的响应数据已经接收完成</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(xhr.readyState);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(xhr.responseText);                                      </span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    xhr.send();</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-Ajax错误处理"><a href="#4-Ajax错误处理" class="headerlink" title="4.Ajax错误处理"></a>4.Ajax错误处理</h3><ol><li><p>网络畅通，服务器端能接收到请求，服务器端返回的结果不是预期结果。<br>可以判断服务器端返回的状态码，分别进行处理。xhr.status 获取http状态码</p></li><li><p>网络畅通，服务器端没有接收到请求，返回404状态码。<br>检查请求地址是否错误。</p></li><li><p>网络畅通，服务器端能接收到请求，服务器端返回500状态码。<br>服务器端错误，找后端程序员进行沟通。</p></li><li><p>网络中断，请求无法发送到服务器端。<br>会触发xhr对象下面的onerror事件，在onerror事件处理函数中对错误进行处理。</p></li></ol><ul><li><p>客户端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;提交ajax数据&lt;/button&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 1.创建ajax对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 2.告诉Ajax对象要向哪里发送请求，以什么方式发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 1)请求方式 2)请求地址</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      xhr.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://localhost:3000/error&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 3.发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      xhr.send();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 4.获取服务器端响应到客户端的数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(xhr.responseText);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 获取http状态码 xhr.status</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(xhr.status);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span>(xhr.status==<span class="number">400</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          alert(<span class="string">&#x27;请求发生错误&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 当网络中断时,不会触发onload事件，会触发onerror事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;网络中断，无法发送ajax请求！&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// Ajax状态码：表示Ajax请求的过程状态 ajax对象返回的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// Http状态码：表示请求的处理结果 是服务器返回</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>服务器端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应07</span></span><br><span class="line">app.get(<span class="string">&quot;/error&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(asdfa);</span></span><br><span class="line">  res.status(<span class="number">400</span>).send(<span class="string">&quot;not ok&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-Ajax函数封装"><a href="#5-Ajax函数封装" class="headerlink" title="5.Ajax函数封装"></a>5.Ajax函数封装</h3><p>发送一次请求代码过多，发送多次请求代码冗余且重复时，将请求代码封装到函数中，发请求时调用函数即可;</p><ul><li><p>客户端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> defaults=&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>:<span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">header</span>:&#123;</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 对象属性覆盖</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">Object</span>.assign(defaults,options);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 拼接请求参数的变量,如果是get请求则需要转换成字符串</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> params = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> attr <span class="keyword">in</span> defaults.data)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(attr);</span></span></span><br><span class="line"><span class="javascript">        params += attr +  <span class="string">&#x27;=&#x27;</span> + defaults.data[attr] +<span class="string">&#x27;&amp;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(params);</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 截取字符串</span></span></span><br><span class="line"><span class="javascript">      params = params.substr(<span class="number">0</span>,params.length-<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 判断请求方式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(defaults.type==<span class="string">&#x27;get&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">        defaults.url += <span class="string">&#x27;?&#x27;</span> + params;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 配置ajax请求</span></span></span><br><span class="line"><span class="javascript">      xhr.open(defaults.type,defaults.url);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果请求方式为post</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(defaults.type == <span class="string">&#x27;post&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> contentType = defaults.header[<span class="string">&#x27;Content-Type&#x27;</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置请求参数格式的类型</span></span></span><br><span class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,contentType);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 判断用户请求参数格式的类型</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果类型为json</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(contentType==<span class="string">&#x27;application/json&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 向服务器端传递json数据格式的参数</span></span></span><br><span class="line"><span class="javascript">          xhr.send(<span class="built_in">JSON</span>.stringify(defaults.data))</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 发送普通请求参数</span></span></span><br><span class="line"><span class="javascript">          xhr.send(params);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="javascript">        xhr.send();</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监听onload事件</span></span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// xhr.getResponseHeader()获取响应头中的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> contentType = xhr.getResponseHeader(<span class="string">&#x27;Content-Type&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 服务器返回的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> responseText = xhr.responseText;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果响应头中包含json</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(contentType.includes(<span class="string">&#x27;application/json&#x27;</span>))&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(&#x27;包含application/json&#x27;);</span></span></span><br><span class="line"><span class="javascript">          responseText= <span class="built_in">JSON</span>.parse(responseText);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取响应头中的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">&#x27;Content-Type&#x27;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 当http状态码为200的时候</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(xhr.status==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 请求成功，返回处理成功的函数</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;返回数据成功！&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          defaults.success(responseText,xhr);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 请求失败，返回处理失败的函数</span></span></span><br><span class="line"><span class="javascript">          defaults.error(responseText,xhr);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    ajax(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/responseData&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;这里是success函数&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-服务器端总代码："><a href="#6-服务器端总代码：" class="headerlink" title="6.服务器端总代码："></a>6.服务器端总代码：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; parse &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; fstat &#125; = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 解析传递过来的请求参数</span></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 01ajax入门</span></span><br><span class="line">app.get(<span class="string">&quot;/first&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;Hello Ajax!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 02处理服务器端返回的json数据</span></span><br><span class="line">app.get(<span class="string">&quot;/responseData&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将JSON字符串转换成JSON对象</span></span><br><span class="line">  res.send(&#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应03</span></span><br><span class="line">app.get(<span class="string">&quot;/get&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(req.query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应04</span></span><br><span class="line">app.post(<span class="string">&quot;/post&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 需要借助第三方模块body-parser才能够成功接受到</span></span><br><span class="line">  res.send(req.body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应05</span></span><br><span class="line">app.post(<span class="string">&quot;/json&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 需要借助第三方模块body-parser才能够成功接受到</span></span><br><span class="line">  res.send(req.body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应06</span></span><br><span class="line">app.get(<span class="string">&quot;/readystate&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 需要借助第三方模块body-parser才能够成功接受到</span></span><br><span class="line">  res.send(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应07</span></span><br><span class="line">app.get(<span class="string">&quot;/error&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(asdfa);</span></span><br><span class="line">  res.status(<span class="number">400</span>).send(<span class="string">&quot;not ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//08 当前的路由意思是，当访问的是cache时，要将读取到的内容返回到浏览器中</span></span><br><span class="line">app.get(<span class="string">&quot;/cache&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">&quot;./test.txt&quot;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">// 控制台提示输出</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架的使用</title>
      <link href="/2021/08/17/Express%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/08/17/Express%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-express框架简介："><a href="#1-express框架简介：" class="headerlink" title="1.express框架简介："></a>1.express框架简介：</h3><ul><li>Express是一个基于Node平台的web应用开发框架，它提供了一系列的强大特性，帮助你创建各种Web应用。我们可以使用 npm install express 命令进行下载；</li></ul><h3 id="2-express框架特性："><a href="#2-express框架特性：" class="headerlink" title="2.express框架特性："></a>2.express框架特性：</h3><ol><li>提供了方便简洁的路由定义方式</li><li>对获取HTTP请求参数进行了简化处理</li><li>对模板引擎支持程度高，方便渲染动态HTML页面</li><li>提供了中间件机制有效控制HTTP请求</li><li>拥有大量第三方中间件对功能进行扩展</li></ol><h3 id="3-express搭建服务器小实例："><a href="#3-express搭建服务器小实例：" class="headerlink" title="3.express搭建服务器小实例："></a>3.express搭建服务器小实例：</h3><ul><li><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"> <span class="comment">// 当客户端以get方式访问/路由时</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 1.send()方法内部会检测相应内容的类型</span></span><br><span class="line">  <span class="comment">// 2.send()方法会自动设置http状态码</span></span><br><span class="line">  <span class="comment">// 3.send()方法会帮助我们自动设置响应的内容类型以及编码</span></span><br><span class="line">  res.send(<span class="string">&#x27;Hello Express!&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功！&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-中间件"><a href="#4-中间件" class="headerlink" title="4.中间件"></a>4.中间件</h3><ul><li><p>中间件主要由两部分构成，中间件方法以及请求处理函数。<br>中间件方法由Express提供，负责拦截请求，请求处理函数由开发人员提供，负责处理请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;请求路径&#x27;</span>, <span class="string">&#x27;处理函数&#x27;</span>)   <span class="comment">// 接收并处理get请求</span></span><br><span class="line">app.post(<span class="string">&#x27;请求路径&#x27;</span>, <span class="string">&#x27;处理函数&#x27;</span>)  <span class="comment">// 接收并处理post请求</span></span><br></pre></td></tr></table></figure></li><li><p>可以针对同一个请求设置多个中间件，对同一个请求进行多次处理。<br>默认情况下，请求从上到下依次匹配中间件，一旦匹配成功，终止匹配。<br>可以调用next方法将请求的控制权交给下一个中间件，直到遇到结束请求的中间件。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    req.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(req.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-1中间件app-use的使用-其参数可以是一个函数"><a href="#4-1中间件app-use的使用-其参数可以是一个函数" class="headerlink" title="4.1中间件app.use的使用,其参数可以是一个函数"></a>4.1中间件app.use的使用,其参数可以是一个函数</h4><ul><li><p>app.use 匹配所有的请求方式，可以直接传入请求处理函数，代表接收所有的请求；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>app.use 第一个参数也可以传入请求地址，代表不论什么请求方式，只要是这个请求地址就接收这个请求;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2中间件的应用"><a href="#4-2中间件的应用" class="headerlink" title="4.2中间件的应用"></a>4.2中间件的应用</h4><ol><li>路由保护，客户端在访问需要登录的页面时，可以先使用中间件判断用户登录状态，用户如果未登录，则拦截请求，直接响应，禁止用户进入需要登录的页面；</li><li>网站维护公告，在所有路由的最上面定义接收所有请求的中间件，直接为客户端做出响应，网站正在维护中；</li><li>自定义404页面；</li></ol><ul><li><p>实例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 网站公告</span></span><br><span class="line"><span class="comment">// app.use((req,res,next)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   res.send(&#x27;当前网站正在维护...&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 用户没有登录</span></span><br><span class="line">  <span class="keyword">let</span> isLogin = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 如果用户登录</span></span><br><span class="line">  <span class="keyword">if</span>(isLogin)&#123;</span><br><span class="line">    <span class="comment">// 让请求继续往下执行</span></span><br><span class="line">    next();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;您还没有登录，不能访问当前页面！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/admin&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;您已经登录，可以访问当前页面&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 为客户端响应404状态码以及提示信息</span></span><br><span class="line">  res.status(<span class="number">404</span>).send(<span class="string">&#x27;当前访问的页面不存在...&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功！&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>错误处理中间件</p><p>实例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 自定义抛出一个错误</span></span><br><span class="line">  <span class="comment">// throw new Error(&#x27;程序发生了未知错误&#x27;);</span></span><br><span class="line">  fs.readFile(<span class="string">&#x27;./app.js&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">error,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error!=<span class="literal">null</span>)&#123;</span><br><span class="line">      next(error);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.send(result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// res.send(&#x27;程序正常执行&#x27;);</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// err.message即是我们上面写的错误信息</span></span><br><span class="line">  res.status(<span class="number">500</span>).send(err.message);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功！&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>try/catch在错误处理中间件中的应用:</p><p>try catch 可以捕获异步函数以及其他同步代码在执行过程中发生的错误，但是不能其他类型的API发生的错误;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).promisify;</span><br><span class="line"><span class="keyword">const</span> readFile = promisify(fs.readFile);</span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>,<span class="keyword">async</span>(req,res,next)=&gt;&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> readFile(<span class="string">&#x27;./adf.js&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">    next(ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 重新设置状态码 err.message即是我们上面写的错误信息 </span></span><br><span class="line">  res.status(<span class="number">500</span>).send(err.message);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功！&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-express框架请求处理"><a href="#5-express框架请求处理" class="headerlink" title="5.express框架请求处理"></a>5.express框架请求处理</h3><h4 id="5-1构建模块化路由"><a href="#5-1构建模块化路由" class="headerlink" title="5.1构建模块化路由"></a>5.1构建模块化路由</h4><ol><li><p>首先创建一个路由文件夹，里面放置二级路由：</p><p>如：文件夹route，它内部有：admin.js和home.js</p><p>admin.js：</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = express.Router();</span><br><span class="line"></span><br><span class="line">admin.get(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;欢迎来到博客管理页面&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = admin;</span><br></pre></td></tr></table></figure><p>​    home.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> home = express.Router();</span><br><span class="line"></span><br><span class="line">home.get(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;欢迎来到博客首页页面&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = home;</span><br></pre></td></tr></table></figure><ol start="2"><li>与二级路由文件夹route同级下创建，一级路由文件</li></ol><p>routeapp.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">//引入二级路由</span></span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&#x27;./route/home&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = <span class="built_in">require</span>(<span class="string">&#x27;./route/admin&#x27;</span>);</span><br><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>,home);</span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>,admin);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><ol><li>根据路由地址访问该页面：<a href="http://localhost:3000/admin/index">http://localhost:3000/admin/index</a></li></ol><h4 id="5-2GET请求参数的获取"><a href="#5-2GET请求参数的获取" class="headerlink" title="5.2GET请求参数的获取"></a>5.2GET请求参数的获取</h4><p>Express框架中使用req.query即可获取GET参数，框架内部会将GET参数转换为对象并返回；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 接收地址栏中问号后面的参数</span></span><br><span class="line"><span class="comment">// 例如: http://localhost:3000/?name=zhangsan&amp;age=30</span></span><br><span class="line">app.use(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.send(req.query);</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器开启成功！&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="5-3POST请求参数的获取"><a href="#5-3POST请求参数的获取" class="headerlink" title="5.3POST请求参数的获取"></a>5.3POST请求参数的获取</h4><p>Express中接收post请求参数需要借助第三方包 body-parser；</p><ul><li><p>安装命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser</span><br></pre></td></tr></table></figure></li><li><p>创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 拦截所有请求</span></span><br><span class="line"><span class="comment">// extended:false 方法内部使用querystring模块处理请求参数的格式</span></span><br><span class="line"><span class="comment">// extended:true 方法内部使用第三方模块qs处理请求参数的格式</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/add&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 接收post请求参数</span></span><br><span class="line">  res.send(req.body);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器开启成功！&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>通过表单的方式访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:3000/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-4-express路由参数"><a href="#5-4-express路由参数" class="headerlink" title="5.4 express路由参数"></a>5.4 express路由参数</h4><p>在访问的时候必须要有参数，不然是不会响应的；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/index/:id/:name/:sex&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 接收post请求参数</span></span><br><span class="line">  res.send(req.params);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>这个例子的访问参数示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:3000/index/12/zhangsan/男</span></span><br></pre></td></tr></table></figure><h4 id="5-5静态资源访问"><a href="#5-5静态资源访问" class="headerlink" title="5.5静态资源访问"></a>5.5静态资源访问</h4><p>通过Express内置的express.static可以方便地托管静态文件，例如img、CSS、JavaScript 文件等；</p><p>//实现静态资源访问<br>app.use(express.static(path.join(__dirname,’public’)))</p><ul><li><p>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">// 创建网站服务器</span><br><span class="line">const app = express();</span><br><span class="line">//实现静态资源访问</span><br><span class="line">app.use(express.static(path.join(__dirname,&#x27;public&#x27;)))</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br><span class="line">console.log(&#x27;服务器启动成功！&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>现在，public 目录下面的文件就可以访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:3000/images/kitten.jpg</span></span><br><span class="line">http:<span class="comment">//localhost:3000/css/style.css</span></span><br><span class="line">http:<span class="comment">//localhost:3000/js/app.js</span></span><br><span class="line">http:<span class="comment">//localhost:3000/images/bg.png</span></span><br><span class="line">http:<span class="comment">//localhost:3000/hello.html </span></span><br></pre></td></tr></table></figure></li><li><p>改变（若添加了/static):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&#x27;/static&#x27;,express.static(path.join(__dirname,&#x27;public&#x27;)))</span><br></pre></td></tr></table></figure></li><li><p>则访问地址也要添加status:</p></li><li><p>```<br><a href="http://localhost:3000/static/images/1.jpg">http://localhost:3000/static/images/1.jpg</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">### 6.模板引擎</span><br><span class="line"></span><br><span class="line">#### 6.1使用如下：</span><br><span class="line"></span><br><span class="line">为了使art-template模板引擎能够更好的和Express框架配合，模板引擎官方在原art-template模板引擎的基础上封装了express-art-template;</span><br><span class="line"></span><br><span class="line">1. 安装：</span><br><span class="line"></span><br><span class="line">   ```js</span><br><span class="line">   npm install art-template</span><br><span class="line">   npm install express-art-template</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>创建views文件夹存放模板引擎文件，该目录下创建文件index.art，list.art</p></li><li><p>创建服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建网站服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 告诉express框架使用什么模板引擎渲染什么后缀的模板文件</span></span><br><span class="line"><span class="comment">// 1.模板后缀 2.使用的模板引擎</span></span><br><span class="line">app.engine(<span class="string">&#x27;art&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br><span class="line"><span class="comment">// 2.告诉express框架存放位置在哪里</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>,path.join(__dirname,<span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"><span class="comment">// 3.告诉express框架模板的more后缀是什么</span></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>,<span class="string">&#x27;art&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 1.拼接模板路径</span></span><br><span class="line">  <span class="comment">// 2.拼接模板后缀</span></span><br><span class="line">  <span class="comment">// 3.哪一个模板和哪一个数据进行拼接</span></span><br><span class="line">  <span class="comment">// 4.将拼接结果响应给了客户端</span></span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;message&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.render(<span class="string">&#x27;list&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;list page&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功！&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>访问即可；</p></li></ol><h4 id="6-2app-locals对象"><a href="#6-2app-locals对象" class="headerlink" title="6.2app.locals对象"></a>6.2app.locals对象</h4><p>将变量设置到app.locals对象下面，这个数据在所有的模板中都可以获取到；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> app.locals.users = [&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line"> &#125;,&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="7-node服务器自动刷新工具"><a href="#7-node服务器自动刷新工具" class="headerlink" title="7. node服务器自动刷新工具"></a>7. node服务器自动刷新工具</h3><ol><li>全局安装nodemon</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g -f</span><br></pre></td></tr></table></figure><ol start="2"><li>在项目中安装nodemon</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -f</span><br></pre></td></tr></table></figure><ol start="3"><li>在<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=express">express</a>项目中 运行nodemon</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon [项目名]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板引擎artTemplate</title>
      <link href="/2021/08/17/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EartTemplate/"/>
      <url>/2021/08/17/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EartTemplate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1.模板引擎"></a>1.模板引擎</h3><p>模板引擎是第三方模块。<br>让开发者以更加友好的方式拼接字符串，使项目代码更加清晰、更加易于维护；</p><h3 id="2-art-template模板引擎"><a href="#2-art-template模板引擎" class="headerlink" title="2.art-template模板引擎"></a>2.art-template模板引擎</h3><h4 id="2-1-安装："><a href="#2-1-安装：" class="headerlink" title="2.1 安装："></a>2.1 安装：</h4><p>使用npm install art-template 命令进行下载</p><ol><li>使用const template = require(‘art-template’)引入模板引擎</li><li>告诉模板引擎要拼接的数据和模板在哪 const html = template(‘模板路径’, 数据);</li><li>使用模板语法告诉模板引擎，模板与数据应该如何进行拼接 </li></ol><h4 id="2-2使用："><a href="#2-2使用：" class="headerlink" title="2.2使用："></a>2.2使用：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模板引擎</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&quot;art-template&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> views = path.join(__dirname, <span class="string">&quot;views&quot;</span>, <span class="string">&quot;standard.art&quot;</span>);</span><br><span class="line"><span class="comment">// template方法是用来拼接字符串的</span></span><br><span class="line"><span class="comment">// 1.模板路径 绝对路径</span></span><br><span class="line"><span class="comment">// 2.要在模板中显示的数据 对象类型</span></span><br><span class="line"><span class="comment">// 返回拼接好的字符串</span></span><br><span class="line"><span class="keyword">const</span> html = template(views, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&quot;&lt;h2&gt;我是标题啊&lt;/h2&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 标准语法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;1+1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;1+1==2?&#x27;相等&#x27;:&#x27;不相等&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果数据中带有html标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;@content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 原始语法 &lt;%=  %&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%= name %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%= 1+1 %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%= 1+1==2?&#x27;相等&#x27;:&#x27;不相等&#x27; %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果数据中带有html标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%- content %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%= content %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用node.js搭建可增删改查的服务器</title>
      <link href="/2021/08/17/%E4%BD%BF%E7%94%A8node-js%E6%90%AD%E5%BB%BA%E5%8F%AF%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/08/17/%E4%BD%BF%E7%94%A8node-js%E6%90%AD%E5%BB%BA%E5%8F%AF%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-搭建服务器"><a href="#1-搭建服务器" class="headerlink" title="1.搭建服务器"></a>1.搭建服务器</h3><h4 id="1-1-详细搭建步骤"><a href="#1-1-详细搭建步骤" class="headerlink" title="1.1 详细搭建步骤"></a>1.1 详细搭建步骤</h4><ol><li><p>步骤：</p><ul><li><p>引入各种模块：如引入http模块实现创建服务器功能，引入url模块实现获取地址，引入数据库模块实现连接数据库，引入对象转换模块实现将数组转换成对象的形式；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 导入url模块</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"><span class="comment">//引入数据库模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="comment">// 引入对象转换模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>进行数据库的连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据库连接 27017是mongodb数据库的默认端口,连接数据库返回promise对象</span></span><br><span class="line"><span class="comment">// 可以使用链式调用then()和catch()实现返回或报错</span></span><br><span class="line">mongoose</span><br><span class="line">  <span class="comment">//其中mongodb://localhost是默认写法</span></span><br><span class="line">  .connect(<span class="string">&quot;mongodb://localhost/playground&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功！&quot;</span>))</span><br><span class="line">  .catch(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接失败！&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>创建用户集合规则，以便于后续进行增删查改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建用户集合规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minlength</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">maxlength</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">min</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="number">60</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">String</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">String</span>,</span><br><span class="line">  <span class="attr">hobbies</span>: [<span class="built_in">String</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建用户集合，实现后续对该集合的数据库操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>, userSchema);</span><br></pre></td></tr></table></figure></li><li><p>为服务器对象添加请求事件，并做出响应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&quot;request&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line"><span class="comment">// 详细的响应操作见总代码</span></span><br><span class="line">res.end(<span class="string">&#x27;ok&#x27;</span>);<span class="comment">//注意响应的内容不能够是整型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启监听端口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="1-2-搭建过程的细节总结："><a href="#1-2-搭建过程的细节总结：" class="headerlink" title="1.2 搭建过程的细节总结："></a>1.2 搭建过程的细节总结：</h4><ol><li><p>注意向服务器请求是异步操作，最好的方式就是在请求函数的前面加上async，并且在要发返回的数据前面添加await;</p></li><li><p>通过req.method的方式获取客户端的请求方式</p></li><li><p>获取用户的请求地址，并对请求地址做响应的处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pathname存储的是地址，query存储的是参数</span></span><br><span class="line"><span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(req.url, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><ul><li> query保存get请求参数(这里保存了页面跳转时传递的信息)，它是字符串类型，要转为对象类型要加第二个参数true</li><li>使用引入的url模块下的url.parse()方法将请求地址转换成’/list’的形式</li></ul></li><li><p>这里使用了模板字符串的形式拼接页面，其特有的插入数据的方式是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// $&#123;&#x27;插入的内容&#x27;&#125;</span><br><span class="line">// 举例如下：</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;item.email&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过res.end(list);//list是整个页面的字符串，可以用于展示页面</p></li><li><p>```<br>let user = querystring.parse(formData);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   其中querystring.parse(formData);将表单的数据转换成对象，以便提交到数据库中；</span><br><span class="line"></span><br><span class="line">7. 路由重定向</span><br><span class="line"></span><br><span class="line">   ```js</span><br><span class="line">   // 301代表重定向</span><br><span class="line">   // location跳转地址</span><br><span class="line">   res.writeHead(301, &#123;</span><br><span class="line">   Location: &quot;/list&quot;,</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li><li><p>插入各种数据库操作：</p><p>注意要在form表单的头部中添加类似于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span> <span class="attr">action</span>=<span class="string">&#x27;/modify?id=$&#123;user._id&#125;&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>的属性，以便于进行post数据库操作；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询单条数据并删除该数据</span></span><br><span class="line"><span class="keyword">await</span> User.findOneAndDelete(&#123; <span class="attr">_id</span>: query.id &#125;);</span><br><span class="line"><span class="comment">// 将用户提交的信息添加到数据库中</span></span><br><span class="line"><span class="keyword">let</span> user = querystring.parse(formData);</span><br><span class="line"><span class="keyword">await</span> User.create(user);</span><br><span class="line"><span class="comment">// 将用户提交的信息添加更新到数据库中</span></span><br><span class="line"><span class="keyword">let</span> user = querystring.parse(formData);</span><br><span class="line"><span class="keyword">await</span> User.updateOne(&#123; <span class="attr">_id</span>: query.id &#125;, user);</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-总代码："><a href="#2-总代码：" class="headerlink" title="2.总代码："></a>2.总代码：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 导入url模块</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"><span class="comment">// 引入数据库模块 注意：如果没有安装mongoose,要在命令行中先安装该模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="comment">// 引入对象转换模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库连接 27017是mongodb数据库的默认端口,连接数据库返回promise对象</span></span><br><span class="line">mongoose</span><br><span class="line">  .connect(<span class="string">&quot;mongodb://localhost/playground&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功！&quot;</span>))</span><br><span class="line">  .catch(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接失败！&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建用户集合规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minlength</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">maxlength</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">min</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="number">60</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">String</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">String</span>,</span><br><span class="line">  <span class="attr">hobbies</span>: [<span class="built_in">String</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>, userSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为服务器对象添加请求事件</span></span><br><span class="line">app.on(<span class="string">&quot;request&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取请求方式</span></span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="comment">// 请求地址 query保存get请求参数(这里保存了id)，它是字符串类型，要转为对象类型要加第二个参数true</span></span><br><span class="line">  <span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//呈现用户列表页面</span></span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">&quot;/list&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">//查询用户信息</span></span><br><span class="line">      <span class="keyword">let</span> users = <span class="keyword">await</span> User.find();</span><br><span class="line">      <span class="built_in">console</span>.log(users);</span><br><span class="line">      <span class="comment">// html字符串</span></span><br><span class="line">      <span class="keyword">let</span> list = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;用户列表&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h6&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;/add&quot; class=&quot;btn btn-primary&quot;&gt;添加用户&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/h6&gt;</span></span><br><span class="line"><span class="string">&lt;table class=&quot;table table-striped table-bordered&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;tr&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;用户名&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;年龄&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;爱好&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;邮箱&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;操作&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">      <span class="comment">// 对数据进行循环操作</span></span><br><span class="line">      users.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        list += <span class="string">`&lt;tr&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;<span class="subst">$&#123;item.name&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;<span class="subst">$&#123;item.age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;`</span>;</span><br><span class="line">        item.hobbies.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          list += <span class="string">`&lt;span&gt;<span class="subst">$&#123;value&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        list += <span class="string">`</span></span><br><span class="line"><span class="string">&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;<span class="subst">$&#123;item.email&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;/remove?id=<span class="subst">$&#123;item._id&#125;</span>&quot; class=&quot;btn btn-danger btn-xs&quot;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;/modify?id=<span class="subst">$&#123;item._id&#125;</span>&quot; class=&quot;btn btn-success btn-xs&quot;&gt;修改&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      list += <span class="string">`&lt;/table&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;`</span>;</span><br><span class="line">      res.end(list);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&quot;/add&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// let user</span></span><br><span class="line">      <span class="keyword">let</span> add = <span class="string">`&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;用户列表&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;添加用户&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form method=&#x27;post&#x27; action=&#x27;/add&#x27;&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;用户名&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;input name=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请填写用户名&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;密码&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;input name=&quot;password&quot; type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;请输入密码&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;年龄&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;input name=&quot;age&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请填写邮箱&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;邮箱&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;input name=&quot;email&quot; type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;请填写邮箱&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;请选择爱好&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input name=&quot;hobbies&quot; type=&quot;checkbox&quot; value=&quot;足球&quot;&gt; 足球</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input name=&quot;hobbies&quot; type=&quot;checkbox&quot; value=&quot;篮球&quot;&gt; 篮球</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input name=&quot;hobbies&quot; type=&quot;checkbox&quot; value=&quot;橄榄球&quot;&gt; 橄榄球</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;checkbox&quot; value=&quot;敲代码&quot;&gt; 敲代码</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input name=&quot;hobbies&quot; type=&quot;checkbox&quot; value=&quot;抽烟&quot;&gt; 抽烟</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input name=&quot;hobbies&quot; type=&quot;checkbox&quot; value=&quot;喝酒&quot;&gt; 喝酒</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input name=&quot;hobbies&quot; type=&quot;checkbox&quot; value=&quot;烫头&quot;&gt; 烫头</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;添加用户&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;`</span>;</span><br><span class="line">      res.end(add);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&quot;/modify&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 呈现修改用户信息界面</span></span><br><span class="line">      <span class="keyword">let</span> user = <span class="keyword">await</span> User.findOne(&#123; <span class="attr">_id</span>: query.id &#125;);</span><br><span class="line">      <span class="keyword">let</span> hobbies = [</span><br><span class="line">        <span class="string">&quot;足球&quot;</span>,</span><br><span class="line">        <span class="string">&quot;篮球&quot;</span>,</span><br><span class="line">        <span class="string">&quot;橄榄球&quot;</span>,</span><br><span class="line">        <span class="string">&quot;敲代码&quot;</span>,</span><br><span class="line">        <span class="string">&quot;抽烟&quot;</span>,</span><br><span class="line">        <span class="string">&quot;喝酒&quot;</span>,</span><br><span class="line">        <span class="string">&quot;烫头&quot;</span>,</span><br><span class="line">        <span class="string">&quot;吃饭&quot;</span>,</span><br><span class="line">        <span class="string">&quot;睡觉&quot;</span>,</span><br><span class="line">        <span class="string">&quot;打豆豆&quot;</span>,</span><br><span class="line">      ];</span><br><span class="line">      <span class="built_in">console</span>.log(user);</span><br><span class="line">      <span class="keyword">let</span> modify = <span class="string">`&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;用户列表&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;修改用户&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form method=&#x27;post&#x27; action=&#x27;/modify?id=<span class="subst">$&#123;user._id&#125;</span>&#x27;&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;用户名&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;input value=&quot;<span class="subst">$&#123;user.name&#125;</span>&quot; name=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请填写用户名&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;密码&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;input value=&quot;<span class="subst">$&#123;user.password&#125;</span>&quot; name=&quot;password&quot; type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;请输入密码&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;年龄&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;input value=&quot;<span class="subst">$&#123;user.age&#125;</span>&quot; name=&quot;age&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请填写邮箱&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;邮箱&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;input value=&quot;<span class="subst">$&#123;user.email&#125;</span>&quot; name=&quot;email&quot; type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;请填写邮箱&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;请选择爱好&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">      hobbies.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断当前循环项在不在用户的爱好数组</span></span><br><span class="line">        <span class="keyword">let</span> isHobby = user.hobbies.includes(item);</span><br><span class="line">        <span class="keyword">if</span> (isHobby) &#123;</span><br><span class="line">          modify += <span class="string">`&lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input name=&quot;hobbies&quot; type=&quot;checkbox&quot; value=&quot;<span class="subst">$&#123;item&#125;</span>&quot; checked&gt; <span class="subst">$&#123;item&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/label&gt;`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          modify += <span class="string">`&lt;label class=&quot;checkbox-inline&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input name=&quot;hobbies&quot; type=&quot;checkbox&quot; value=&quot;<span class="subst">$&#123;item&#125;</span>&quot;&gt; <span class="subst">$&#123;item&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/label&gt;`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      modify += <span class="string">`&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;修改用户信息&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;`</span>;</span><br><span class="line">      res.end(modify);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&quot;/remove&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// res.end(query.id);</span></span><br><span class="line">      <span class="comment">// 查询单条数据并删除该数据</span></span><br><span class="line">      <span class="keyword">await</span> User.findOneAndDelete(&#123; <span class="attr">_id</span>: query.id &#125;);</span><br><span class="line">      res.writeHead(<span class="number">301</span>, &#123;</span><br><span class="line">        <span class="attr">Location</span>: <span class="string">&quot;/list&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 用户添加功能</span></span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">&quot;/add&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 接收用户提交的信息</span></span><br><span class="line">      <span class="keyword">let</span> formData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="comment">// 接收post参数</span></span><br><span class="line">      req.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">param</span>) =&gt;</span> &#123;</span><br><span class="line">        formData += param;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// post</span></span><br><span class="line">      req.on(<span class="string">&quot;end&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> user = querystring.parse(formData);</span><br><span class="line">        <span class="comment">//将用户提交的信息添加到数据库中</span></span><br><span class="line">        <span class="keyword">await</span> User.create(user);</span><br><span class="line">        <span class="comment">// 301代表重定向</span></span><br><span class="line">        <span class="comment">// location跳转地址</span></span><br><span class="line">        res.writeHead(<span class="number">301</span>, &#123;</span><br><span class="line">          <span class="attr">Location</span>: <span class="string">&quot;/list&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        res.end();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&quot;/modify&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 接收用户提交的信息</span></span><br><span class="line">      <span class="keyword">let</span> formData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="comment">// 接收post参数</span></span><br><span class="line">      req.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">param</span>) =&gt;</span> &#123;</span><br><span class="line">        formData += param;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// post</span></span><br><span class="line">      req.on(<span class="string">&quot;end&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> user = querystring.parse(formData);</span><br><span class="line">        <span class="comment">//将用户提交的信息添加到数据库中</span></span><br><span class="line">        <span class="keyword">await</span> User.updateOne(&#123; <span class="attr">_id</span>: query.id &#125;, user);</span><br><span class="line">        <span class="comment">// 301代表重定向</span></span><br><span class="line">        <span class="comment">// location跳转地址</span></span><br><span class="line">        res.writeHead(<span class="number">301</span>, &#123;</span><br><span class="line">          <span class="attr">Location</span>: <span class="string">&quot;/list&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        res.end();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功！&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise和异步函数</title>
      <link href="/2021/08/16/Promise%E5%92%8C%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/"/>
      <url>/2021/08/16/Promise%E5%92%8C%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-Promise"><a href="#1-Promise" class="headerlink" title="1.Promise"></a>1.Promise</h3><h4 id="1-1-Promise是什么？用promise来解决什么问题"><a href="#1-1-Promise是什么？用promise来解决什么问题" class="headerlink" title="1.1 Promise是什么？用promise来解决什么问题?"></a>1.1 Promise是什么？用promise来解决什么问题?</h4><p>Promise 是异步编程的一种解决方案：从语法上讲，promise是一个对象，从它可以获取异步操作的消息；</p><p>从本意上讲，它是承诺，承诺它过一段时间会给你一个结果;</p><p>promise有三种状态： **pending(等待态)，fulfiled(成功态)，rejected(失败态)**；</p><p>状态一旦改变，就不会再变。创造promise实例后，它会立即执行。</p><ul><li><p>回调地狱：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;爱&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;吃&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;海&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;底&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;捞&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ul><p>promise是用来解决两个问题的：</p><ul><li>回调地狱，代码难以维护， 常常第一个的函数的输出是第二个函数的输入这种现象</li><li>promise可以支持多个并发的请求，获取并发请求中的数据</li><li>这个promise可以解决异步的问题，本身不能说promise是异步的    </li></ul><h4 id="1-2-promise的用法："><a href="#1-2-promise的用法：" class="headerlink" title="1.2 promise的用法："></a>1.2 promise的用法：</h4><p>Promise是一个构造函数，它有all、reject、resolve这几个眼熟的方法，原型上有then、catch等方法，本身属于对象；</p><ul><li><p>new 一个promise:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;爱&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Promise的构造函数接收一个参数：函数，并且这个函数需要传入两个参数（这两个参数本身也是函数）：</p><ul><li>resolve ：异步操作执行成功后的回调函数</li><li>reject：异步操作执行失败后的回调函数</li></ul><h5 id="1-2-1-then链式操作的用法："><a href="#1-2-1-then链式操作的用法：" class="headerlink" title="1.2.1 then链式操作的用法："></a>1.2.1 then链式操作的用法：</h5><p>从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">getStr1().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="keyword">return</span> getStr2();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="keyword">return</span> getStr3();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="keyword">return</span> getStr4();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="keyword">return</span> getStr5();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="1-2-2-reject的用法："><a href="#1-2-2-reject的用法：" class="headerlink" title="1.2.2 reject的用法："></a>1.2.2 reject的用法：</h5><p>reject主要接收promise执行失败时返回的数据，把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。</p><ul><li><p>看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 做一些异步操作</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">resolve(<span class="string">&#x27;大于&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject(<span class="string">&#x27;小于&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStr1().then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>then中传了两个参数，then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调;多次运行这段代码,会得到大于和小于两种结果；</p></li></ul><h5 id="1-2-3-catch的用法："><a href="#1-2-3-catch的用法：" class="headerlink" title="1.2.3 catch的用法："></a>1.2.3 catch的用法：</h5><p>catch方法，它是做什么用的呢？其实它和then的第二个参数一样，用来指定reject的回调：</p><ul><li><p>看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getStr1().then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其效果和写在then的第二个参数error里面一样，不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中；</p></li><li><p>看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getStr1().then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(nolala);<span class="comment">//此处的nolala没有被定义</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">reason,data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;catch到rejected失败回调&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;catch失败执行回调抛出失败原因：&#x27;</span>,reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在resolve的回调中，我们console.log(nolala);而nolala这个变量是没有被定义的。如果我们不用Promise，代码运行到这里就直接在控制台报错了，不往下运行了。但是在这里，会得到这样的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\asyncTest.js</span><br><span class="line">大于</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="keyword">catch</span>到rejected失败回调</span><br><span class="line"><span class="keyword">catch</span>失败执行回调抛出失败原因： <span class="built_in">ReferenceError</span>: nolala is not defined</span><br><span class="line">    at C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>\asyncTest.js:<span class="number">22</span>:<span class="number">15</span></span><br></pre></td></tr></table></figure><p>也就是说进到catch方法里面去了，而且把错误原因传到了reason参数中。即便是有错误的代码也不会报错；</p></li></ul><h5 id="1-2-4-all的用法："><a href="#1-2-4-all的用法：" class="headerlink" title="1.2.4 all的用法："></a>1.2.4 all的用法：</h5><p>与then同级的另一个方法，all方法，该方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后并且执行结果都是成功的时候才执行回调，有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据；</p><ul><li><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 做一些异步操作</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">resolve(<span class="string">&#x27;大于&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject(<span class="string">&#x27;小于&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 做一些异步操作</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">resolve(<span class="string">&#x27;大于&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject(<span class="string">&#x27;小于&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 做一些异步操作</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">resolve(<span class="string">&#x27;大于&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject(<span class="string">&#x27;小于&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.all([getStr1, getStr2, getStr3])</span><br><span class="line">p.then(<span class="function"><span class="title">funciton</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 三个都成功则成功  </span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 只要有失败，则失败 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="1-2-5-race的用法："><a href="#1-2-5-race的用法：" class="headerlink" title="1.2.5 race的用法："></a>1.2.5 race的用法：</h5><p>all是等所有的异步操作都执行完了再执行then方法，那么race方法就是相反的，谁先执行完成就先执行回调。先执行完的不管是进行了race的成功回调还是失败回调，其余的将不会再进入race的任何回调，总的来说：<strong>谁跑的快，以谁为准执行回调；</strong></p><ul><li><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 做一些异步操作</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1秒随机生成的值：&#x27;</span>+num);</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">50</span>)&#123;</span><br><span class="line">resolve(<span class="string">&#x27;1秒大于&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject(<span class="string">&#x27;1秒小于&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 做一些异步操作</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;2秒随机生成的值：&#x27;</span>+num);</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">resolve(<span class="string">&#x27;2秒大于&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject(<span class="string">&#x27;2秒小于&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 做一些异步操作</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;3秒随机生成的值：&#x27;</span>+num);</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">resolve(<span class="string">&#x27;3秒大于&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject(<span class="string">&#x27;2秒小于&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([getStr1(), getStr2(), getStr3()]).then(<span class="function">(<span class="params">results</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;成功！&#x27;</span>,results);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;失败！&#x27;</span>,reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>执行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\asyncTest.js</span><br><span class="line"><span class="number">1</span>秒随机生成的值：<span class="number">2</span></span><br><span class="line">失败！ <span class="number">1</span>秒小于</span><br><span class="line"><span class="number">2</span>秒随机生成的值：<span class="number">8</span></span><br><span class="line"><span class="number">3</span>秒随机生成的值：<span class="number">9</span></span><br></pre></td></tr></table></figure></li><li><p>总结：在race中，getStr1()是最先执行的，因为它所需要的时间最短，故执行getStr1()的回调；其余的继续执行，但是将不会再进入race的任何回调;</p></li><li><p>使用实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求某个table数据</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">requestTableList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">//去后台请求数据，这里可以是ajax,可以是axios,可以是fetch </span></span><br><span class="line">               resolve(res);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="comment">//延时函数，用于给请求计时 10s</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                 reject(<span class="string">&#x27;请求超时&#x27;</span>);</span><br><span class="line">             &#125;, <span class="number">10000</span>);</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="keyword">return</span> p;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">Promise</span>.race([requestTableList(), timeout()]).then(<span class="function">(<span class="params">data</span>) =&gt;</span>&#123;</span><br><span class="line">       <span class="comment">//进行成功回调处理</span></span><br><span class="line">       <span class="built_in">console</span>.log(data);</span><br><span class="line">     &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 失败回调处理</span></span><br><span class="line">         <span class="built_in">console</span>.log(err);</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><p>请求一个接口数据，10s内请求完成就展示数据，10s内没有请求完成就提示请求失败</p><p>这里定义了两个promise,一个去请求数据，一个记时10s，把两个promise丢进race里面赛跑去，如果请求数据先跑完就直接进入.then成功回调，将请求回来的数据进行展示；如果计时先跑完，也就是10s了数据请求还没有成功，就先进入race的失败回调，就提示用户数据请求失败进入.catch回调，（ps:或者进入reject的失败回调，当.then里面没有写reject回调的时候失败回调会直接进入.catch</p></li></ul><h3 id="2-异步函数async"><a href="#2-异步函数async" class="headerlink" title="2.异步函数async"></a>2.异步函数async</h3><h4 id="2-1定义和内涵"><a href="#2-1定义和内涵" class="headerlink" title="2.1定义和内涵"></a>2.1定义和内涵</h4><p>它可以让我们将异步代码写成同步的形式，让代码不再有回调函数嵌套，使代码变得清晰明；</p><ul><li><p>async关键字:</p><ol><li><p>普通函数定义前加async关键字 普通函数变成异步函数</p></li><li><p>异步函数默认返回promise对象</p></li><li><p>在异步函数内部使用return关键字进行结果返回 结果会被包裹的promise对象中 return关键字代替了resolve方法</p></li><li><p>在异步函数内部使用throw关键字抛出程序异常</p></li><li><p>调用异步函数再链式调用then方法获取异步函数执行结果</p></li><li><p>调用异步函数再链式调用catch方法获取异步函数执行的错误信息</p></li></ol></li><li><p>await 关键字：</p><ol><li>await关键字只能出现在异步函数中</li><li>await promise await后面只能写promise对象 写其他类型的API是不不可以的</li><li>await关键字可是暂停异步函数向下执行 直到promise返回结果</li></ol></li></ul><h4 id="2-2举例使用"><a href="#2-2举例使用" class="headerlink" title="2.2举例使用"></a>2.2举例使用</h4><p>async的用法，它作为一个关键字放到函数前面，用于表示函数是一个异步函数，因为async就是异步的意思， 异步函数也就意味着该函数的执行不会阻塞后面代码的执行；</p><ul><li><p>写一个异步函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;我是一个异步函数&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">asyncTime().then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我虽然在后面，但是我先执行！&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\asyncTest.js</span><br><span class="line">我虽然在后面，但是我先执行！</span><br><span class="line">我是一个异步函数</span><br></pre></td></tr></table></figure><p>可以看到，async 函数返回的是一个promise 对象，如果要获取到promise 返回值，我们应该用then 方法</p></li><li><p>Promise 有一个resolved，这是async 函数内部的实现原理。如果async 函数中有返回一个值 ,当调用该函数时，内部会调用Promise.solve() 方法把它转化成一个promise 对象作为返回，但如果timeout 函数内部抛出错误呢？ 那么就会调用Promise.reject() 返回一个promise 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;my god, failure&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(timeout(<span class="literal">true</span>))  <span class="comment">// 调用Promise.resolve() 返回promise 对象。</span></span><br><span class="line"><span class="built_in">console</span>.log(timeout(<span class="literal">false</span>)); <span class="comment">// 调用Promise.reject() 返回promise 对象。</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\asyncTest.js</span><br><span class="line"><span class="built_in">Promise</span> &#123; <span class="string">&#x27;hello world&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">Promise</span> &#123; &lt;rejected&gt; <span class="string">&#x27;my god, failure&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><p>如果内部有错,promise 对象有一个catch 方法进行捕获</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timeout(<span class="literal">false</span>).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>await 关键字，await是等待的意思，那么它等待什么呢，它后面跟着什么呢？其实它后面可以放任何表达式，不过我们更多的是放一个返回promise 对象的表达式。注意await 关键字只能放到async 函数里面</p></li><li><p>```js<br>function calculate(num){</p><pre><code>return new Promise((resolve,reject)=&gt;&#123;    setTimeout(()=&gt;&#123;        resolve(num*3);    &#125;,2000);&#125;)</code></pre><p>}<br>async function testCal(){</p><pre><code>let result = await calculate(10);console.log(result);</code></pre><p>}<br>testCal();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 代码的执行过程，调用calculate函数，它里面遇到了await, await 表示等一下，代码就暂停到这里，不再向下执行了，它等什么呢？等后面的promise对象执行完毕，然后拿到promise中 resolve 的值并进行返回，返回值拿到之后，它继续向下执行</span><br><span class="line"></span><br><span class="line">- 具体到代码就是，遇到await 之后，代码就暂停执行了， 等待calculate(10)执行完毕，calculate(10)返回的promise 开始执行，2秒 之后，有了promise resolve就返回了值30，这时await 才拿到返回值60， 然后赋值给result， 暂停结束，代码才开始继续执行，执行 console.log语句；</span><br><span class="line"></span><br><span class="line">- 当需要进行多次计算时，可以提现它是如何避免回调地狱的：</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  async function testCal()&#123;</span><br><span class="line">  let result1 = await calculate(10);</span><br><span class="line">  let result2 = await calculate(20);</span><br><span class="line">  let result3 = await calculate(30);</span><br><span class="line">  console.log(result1+result2+result3);</span><br><span class="line">  &#125;</span><br><span class="line">  testCal();</span><br></pre></td></tr></table></figure><p><strong>async 和 await 基于 promise 的。 使用 async 的函数将会始终返回一个 promise 对象</strong>在使用 await 的时候我们暂停了函数，而非整段代码;async 和 await 是非阻塞的,仍然可以使用 Promise 例如 Promise.all();</p></li></ul><h4 id="2-3异步函数实例"><a href="#2-3异步函数实例" class="headerlink" title="2.3异步函数实例"></a>2.3异步函数实例</h4><ul><li><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 改造现有的异步函数，让其返回promise对象，从而支持异步函数语法</span></span><br><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).promisify;</span><br><span class="line"><span class="comment">// 调用promisify方法改造现有异步API让其返回promise对象</span></span><br><span class="line"><span class="keyword">const</span> readFile = promisify (fs.readFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">await</span> readFile(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">await</span> readFile(<span class="string">&#x27;./2.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> r3 = <span class="keyword">await</span> readFile(<span class="string">&#x27;./3.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r1);</span><br><span class="line"><span class="built_in">console</span>.log(r2);</span><br><span class="line"><span class="built_in">console</span>.log(r3);</span><br><span class="line">&#125;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\asyncFile.js</span><br><span class="line">第一个文件</span><br><span class="line">第二个文件</span><br><span class="line">第三个文件</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>实例二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;爱&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;吃&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;海&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;底&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;捞&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> one1 = <span class="keyword">await</span> getStr1();</span><br><span class="line"><span class="built_in">console</span>.log(getStr1().then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data)));</span><br><span class="line"><span class="built_in">console</span>.log(one1);</span><br><span class="line"><span class="keyword">let</span> one2 = <span class="keyword">await</span> getStr2();</span><br><span class="line"><span class="built_in">console</span>.log(one2);</span><br><span class="line"><span class="keyword">let</span> one3 = <span class="keyword">await</span> getStr3();</span><br><span class="line"><span class="built_in">console</span>.log(one3);</span><br><span class="line"><span class="keyword">let</span> one4 = <span class="keyword">await</span> getStr4();</span><br><span class="line"><span class="built_in">console</span>.log(one4);</span><br><span class="line"><span class="keyword">let</span> one5 = <span class="keyword">await</span> getStr5();</span><br><span class="line"><span class="built_in">console</span>.log(one5);</span><br><span class="line">&#125;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure></li><li><p>执行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\asyncCall.js</span><br><span class="line">爱</span><br><span class="line"><span class="built_in">Promise</span> &#123; &lt;pending&gt; &#125;</span><br><span class="line">爱</span><br><span class="line">吃</span><br><span class="line">海</span><br><span class="line">底</span><br><span class="line">捞</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb数据库的学习总结</title>
      <link href="/2021/08/14/Mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/14/Mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-Mongodb数据库连接"><a href="#1-Mongodb数据库连接" class="headerlink" title="1.Mongodb数据库连接"></a>1.Mongodb数据库连接</h3><h4 id="1-1简单了解数据库"><a href="#1-1简单了解数据库" class="headerlink" title="1.1简单了解数据库"></a>1.1简单了解数据库</h4><ol><li><p>MongoDB可视化操作软件，是使用图形界面操作数据库的一种方式；</p></li><li><p>在一个数据库软件中可以包含多个数据仓库，在每个数据仓库中可以包含多个数据集合，每个数据集合中可以包含多条文档（具体的数据）</p></li><li><table><thead><tr><th><strong>术语</strong></th><th><strong>解释说明</strong></th></tr></thead><tbody><tr><td>database</td><td>数据库，mongoDB数据库软件中可以建立多个数据库</td></tr><tr><td>collection</td><td>集合，一组数据的集合，可以理解为JavaScript中的数组</td></tr><tr><td>document</td><td>文档，一条具体的数据，可以理解为JavaScript中的对象</td></tr><tr><td>field</td><td>字段，文档中的属性名称，可以理解为JavaScript中的对象属性</td></tr></tbody></table></li></ol><h4 id="1-2启动和连接数据库"><a href="#1-2启动和连接数据库" class="headerlink" title="1.2启动和连接数据库"></a>1.2启动和连接数据库</h4><ol><li><p>Mongoose第三方包：l使用Node.js操作MongoDB数据库需要依赖Node.js第三方包mongoose</p></li><li><p>在需要用到的目录或文件夹中：使用<strong>npm install mongoose</strong>命令下载</p></li><li><p>在命令行工具中运行<strong>net start mongoDB</strong>即可启动MongoDB，否则MongoDB将无法连接</p></li><li><p>使用mongoose提供的<strong>connect</strong>方法即可连接数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入第三方模块来操作数据库</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">// 数据库连接</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/playground&#x27;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>  &#125;)</span><br><span class="line">.then(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功！&#x27;</span>);&#125;)</span><br><span class="line">.catch(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接失败！&#x27;</span>);&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在创建数据库，当数据库不存在时，Mongodb会自动创建</p></li></ol><h3 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h3><p>在MongoDB中不需要显式创建数据库，如果正在使用的数据库不存在，MongoDB会自动创建；</p><h4 id="2-1-创建集合"><a href="#2-1-创建集合" class="headerlink" title="2.1 创建集合"></a>2.1 创建集合</h4><p>创建集合分为两步，一是<strong>对集合设定规则</strong>，二是<strong>创建集合</strong></p><p>创建mongoose.Schema构造函数的实例即可创建集合</p><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 设定集合规则</span></span><br><span class="line"><span class="keyword">const</span> courseSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">isPublished</span>: <span class="built_in">Boolean</span></span><br><span class="line">&#125;);</span><br><span class="line"> <span class="comment">// 创建集合并应用规则</span></span><br><span class="line"><span class="keyword">const</span> Course = mongoose.model(<span class="string">&#x27;Course&#x27;</span>, courseSchema); <span class="comment">// courses</span></span><br></pre></td></tr></table></figure><h4 id="2-2-创建文档实际上就是向集合中插入数据"><a href="#2-2-创建文档实际上就是向集合中插入数据" class="headerlink" title="2.2 创建文档实际上就是向集合中插入数据"></a>2.2 创建文档实际上就是<strong>向集合中插入数据</strong></h4><p>分为两步：①创建集合实例;②调用实例对象下的save方法将数据保存到数据库中;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建集合实例</span></span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> Course(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Node.js course&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;backend&#x27;</span>],</span><br><span class="line">    <span class="attr">isPublished</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"> <span class="comment">// 将数据保存到数据库中</span></span><br><span class="line">course.save();</span><br></pre></td></tr></table></figure><h4 id="2-3-创建集合的第二种方式"><a href="#2-3-创建集合的第二种方式" class="headerlink" title="2.3 创建集合的第二种方式"></a>2.3 创建集合的第二种方式</h4><p>使用promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Course.create(&#123;<span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>, <span class="attr">isPublish</span>: <span class="literal">true</span>&#125;, <span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123; </span><br><span class="line">     <span class="comment">//  错误对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">     <span class="comment">//  当前插入的文档</span></span><br><span class="line">    <span class="built_in">console</span>.log(doc)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">数据库连接成功！</span><br><span class="line"><span class="literal">null</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">_id</span>: 611790fea1b6d829f8e57537,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>,</span><br><span class="line">  <span class="attr">__v</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种表现形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建集合实例</span></span><br><span class="line">Course.create(&#123;<span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>, <span class="attr">isPublish</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">doc</span> =&gt;</span> <span class="built_in">console</span>.log(doc))</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><h4 id="2-4-创建集合汇总："><a href="#2-4-创建集合汇总：" class="headerlink" title="2.4 创建集合汇总："></a>2.4 创建集合汇总：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入第三方模块来操作数据库</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">// 数据库连接</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/playground&#x27;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>  &#125;)</span><br><span class="line">.then(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功！&#x27;</span>);&#125;)</span><br><span class="line">.catch(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接失败！&#x27;</span>);&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合规则</span></span><br><span class="line"><span class="keyword">const</span> courseSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="attr">author</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="attr">isPublished</span>:<span class="built_in">Boolean</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用规则创建</span></span><br><span class="line"><span class="keyword">const</span> Course = mongoose.model(<span class="string">&#x27;Course&#x27;</span>,courseSchema) <span class="comment">//course</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建集合实例</span></span><br><span class="line"> <span class="keyword">const</span> course = <span class="keyword">new</span> Course(&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;Node.js course&#x27;</span>,</span><br><span class="line">     <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>,</span><br><span class="line">     <span class="attr">isPublished</span>: <span class="literal">true</span></span><br><span class="line"> &#125;);</span><br><span class="line">  <span class="comment">// 将数据保存到数据库中</span></span><br><span class="line"> course.save();</span><br></pre></td></tr></table></figure><h3 id="3-MongoDB-的增删改查操作"><a href="#3-MongoDB-的增删改查操作" class="headerlink" title="3.MongoDB 的增删改查操作"></a>3.MongoDB 的增删改查操作</h3><h4 id="3-1-查询"><a href="#3-1-查询" class="headerlink" title="3.1 查询"></a>3.1 查询</h4><ul><li><p>查询代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入第三方模块来操作数据库</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">// 数据库连接</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/playground&#x27;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>  &#125;)</span><br><span class="line">.then(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功！&#x27;</span>);&#125;)</span><br><span class="line">.catch(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接失败！&#x27;</span>);&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="built_in">Number</span>,</span><br><span class="line"><span class="attr">email</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="attr">password</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="attr">hobbies</span>:[<span class="built_in">String</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用规则创建集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>,userSchema) <span class="comment">//course</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询用户集合中所有用户文档</span></span><br><span class="line"><span class="comment">// User.find().then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// 通过_id查询文档</span></span><br><span class="line"><span class="comment">// User.find(&#123;_id:&#x27;606973315bf8de56a0b077a2&#x27;&#125;).then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// findOne只返回一条数据 根据条件查询文档</span></span><br><span class="line"><span class="comment">// User.findOne(&#123;name:&#x27;李四&#x27;&#125;).then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// 查询用户字段中年龄大于10小于15的用户</span></span><br><span class="line"><span class="comment">// User.find(&#123;age:&#123;$gt:10,$lt:15&#125;&#125;).then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// $in匹配包含</span></span><br><span class="line"><span class="comment">// User.find(&#123;hobbies:&#123;$in:[&#x27;敲代码&#x27;]&#125;&#125;).then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// 选择要查询的字段 字段前面添加-则表示不要查询该字段</span></span><br><span class="line"><span class="comment">// User.find().select(&#x27;name email -_id&#x27;).then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// 根据年龄字段升序排列</span></span><br><span class="line"><span class="comment">// User.find().sort(&#x27;age&#x27;).then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// 根据年龄字段降序排列</span></span><br><span class="line"><span class="comment">// User.find().sort(&#x27;-age&#x27;).then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// skip跳过多少条数据 limit限制查询数量</span></span><br><span class="line">User.find().skip(<span class="number">2</span>).limit(<span class="number">2</span>).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result));</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-删除"><a href="#3-2-删除" class="headerlink" title="3.2 删除"></a>3.2 删除</h4><ul><li><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到一条文档并删除并且删除</span></span><br><span class="line"><span class="comment">// 返回被删除的文档</span></span><br><span class="line"><span class="comment">// 如果查询到多条文档则删除第一个匹配的文档</span></span><br><span class="line"><span class="comment">//User.findOneAndDelete(&#123;_id:&#x27;5c09f267aeb04b22f8460968&#x27;&#125;).then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// 删除多个</span></span><br><span class="line"> User.deleteMany(&#123;&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-3-更新"><a href="#3-3-更新" class="headerlink" title="3.3 更新"></a>3.3 更新</h4><ul><li><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新单个,如果匹配道多个，则只是更新第一个匹配到的</span></span><br><span class="line">User.updateOne(&#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line"><span class="comment">// 更新多个  将所有文档的age改为56</span></span><br><span class="line">User.updateMany(&#123;&#125;,&#123;<span class="attr">age</span>:<span class="number">56</span>&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-4-mongoose验证规则"><a href="#3-4-mongoose验证规则" class="headerlink" title="3.4 mongoose验证规则"></a>3.4 mongoose验证规则</h4><p>在创建集合规则时，可以设置当前字段的验证规则，验证失败就则输入插入失败；</p><ul><li><p>验证内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">required: <span class="literal">true</span> 必传字段</span><br><span class="line">minlength：<span class="number">3</span> 字符串最小长度</span><br><span class="line"><span class="attr">maxlength</span>: <span class="number">20</span> 字符串最大长度</span><br><span class="line"><span class="attr">min</span>: <span class="number">2</span> 数值最小为<span class="number">2</span></span><br><span class="line"><span class="attr">max</span>: <span class="number">100</span> 数值最大为<span class="number">100</span></span><br><span class="line"><span class="attr">enum</span>: [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>, <span class="string">&#x27;node.js&#x27;</span>]</span><br><span class="line"><span class="attr">trim</span>: <span class="literal">true</span> 去除字符串两边的空格</span><br><span class="line"><span class="attr">validate</span>: 自定义验证器</span><br><span class="line"><span class="attr">default</span>: 默认值</span><br><span class="line">获取错误信息：error.errors[<span class="string">&#x27;字段名称&#x27;</span>].message</span><br></pre></td></tr></table></figure></li><li><p>实例验证：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入第三方模块来操作数据库</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">// 数据库连接</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/playground&#x27;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>  &#125;)</span><br><span class="line">.then(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功！&#x27;</span>);&#125;)</span><br><span class="line">.catch(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接失败！&#x27;</span>);&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合规则</span></span><br><span class="line"><span class="keyword">const</span> newOneSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line"><span class="attr">title</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="comment">//验证规则</span></span><br><span class="line"><span class="attr">required</span>: [<span class="literal">true</span>,<span class="string">&#x27;请传入文章标题&#x27;</span>],</span><br><span class="line"><span class="attr">minlength</span>:[<span class="number">2</span>,<span class="string">&#x27;文章最短长度不能小于2&#x27;</span>],</span><br><span class="line"><span class="attr">maxlength</span>:[<span class="number">5</span>,<span class="string">&#x27;文章最大长度不能大于5&#x27;</span>],</span><br><span class="line"><span class="comment">//除去字符串两边的空格</span></span><br><span class="line"><span class="attr">trim</span>:<span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">age</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">Number</span>,</span><br><span class="line"><span class="attr">required</span>:[<span class="literal">true</span>,<span class="string">&#x27;请输入年龄&#x27;</span>],</span><br><span class="line"><span class="comment">// min和max针对的是数字类型的数据</span></span><br><span class="line"><span class="attr">min</span>:<span class="number">10</span>,</span><br><span class="line"><span class="attr">max</span>:<span class="number">18</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">publishDate</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">Date</span>,</span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="attr">default</span>:<span class="built_in">Date</span>.now</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">category</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="comment">// 枚举：列出当前字段可以拥有的值</span></span><br><span class="line"><span class="attr">enum</span>:&#123;</span><br><span class="line"><span class="attr">values</span>:[<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;javascript&#x27;</span>,<span class="string">&#x27;node.js&#x27;</span>],</span><br><span class="line"><span class="attr">message</span>:<span class="string">&#x27;分类名称要在一定的范围内才可以&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">author</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="attr">validate</span>:&#123;</span><br><span class="line"><span class="attr">validator</span>:<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 返回布尔值</span></span><br><span class="line"><span class="comment">// true 验证成功</span></span><br><span class="line"><span class="comment">// false 验证失败</span></span><br><span class="line"><span class="comment">// v 要验证的值</span></span><br><span class="line"><span class="keyword">return</span> v&amp;&amp;v.length&gt;<span class="number">5</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 自定义错误信息</span></span><br><span class="line"><span class="attr">message</span>:<span class="string">&#x27;传入的值不符合验证规则&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用规则创建</span></span><br><span class="line"><span class="keyword">const</span> newOne = mongoose.model(<span class="string">&#x27;newOne&#x27;</span>,newOneSchema) <span class="comment">//course</span></span><br><span class="line"><span class="comment">// 创建集合实例</span></span><br><span class="line">newOne.create(&#123;<span class="attr">title</span>:<span class="string">&#x27;zen&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">category</span>:<span class="string">&#x27;java&#x27;</span>,<span class="attr">author</span>:<span class="string">&#x27;la&#x27;</span>&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line">.catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// console.log(error);</span></span><br><span class="line"><span class="comment">// 获取自定义错误信息并输出</span></span><br><span class="line"><span class="keyword">const</span> err = error.errors;</span><br><span class="line"><span class="comment">// 将自定义错误信息并输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> attr <span class="keyword">in</span> err)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err[attr][<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);<span class="comment">//获取失败的消息</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5-集合关联"><a href="#3-5-集合关联" class="headerlink" title="3.5 集合关联"></a>3.5 集合关联</h4><p>通常不同集合的数据之间是有关系的，例如文章信息和用户信息存储在不同集合中，但文章是某个用户发表的，要查询文章的所有信息包括发表用户，就需要用到集合关联；</p><ul><li><p>使用id对集合进行关联</p></li><li><p>使用populate方法进行关联集合查询</p></li><li><p>集合关联实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入第三方模块来操作数据库</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">// 数据库连接</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/playground&#x27;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>  &#125;)</span><br><span class="line">.then(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功！&#x27;</span>);&#125;)</span><br><span class="line">.catch(<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接失败！&#x27;</span>);&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户集合规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 文章集合规则</span></span><br><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line"><span class="attr">title</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//进行集合间的关联 使用ID将文章集合和作者集合进行关联</span></span><br><span class="line"><span class="attr">author</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:mongoose.Schema.Types.ObjectId,</span><br><span class="line"><span class="attr">ref</span>:<span class="string">&#x27;User&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 用户集合</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>,userSchema);</span><br><span class="line"><span class="keyword">const</span> Post = mongoose.model(<span class="string">&#x27;Post&#x27;</span>,postSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建用户</span></span><br><span class="line"><span class="comment">// User.create(&#123;name:&#x27;person&#x27;&#125;).then(result=&gt;console.log(result));</span></span><br><span class="line"><span class="comment">// Post.create(&#123;title:&#x27;新文章&#x27;,author:&#x27;611a2c4a6188414e98530abf&#x27;&#125;).then(result=&gt;console.log(result));</span></span><br><span class="line">Post.find(&#123;<span class="attr">title</span>:<span class="string">&#x27;新文章&#x27;</span>&#125;).populate(<span class="string">&#x27;author&#x27;</span>).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs异步编程</title>
      <link href="/2021/08/14/Nodejs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/08/14/Nodejs%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-同步API，异步API"><a href="#1-同步API，异步API" class="headerlink" title="1.同步API，异步API"></a>1.同步API，异步API</h3><h4 id="1-1-同步API：只有当前API执行完成后，才能继续执行下一个API"><a href="#1-1-同步API：只有当前API执行完成后，才能继续执行下一个API" class="headerlink" title="1.1 同步API：只有当前API执行完成后，才能继续执行下一个API"></a>1.1 同步API：只有当前API执行完成后，才能继续执行下一个API</h4><p>代码示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;before&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;after&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="1-2-异步API：当前API执行不会阻塞后续代码的执行"><a href="#1-2-异步API：当前API执行不会阻塞后续代码的执行" class="headerlink" title="1.2 异步API：当前API执行不会阻塞后续代码的执行"></a>1.2 异步API：当前API执行不会阻塞后续代码的执行</h4><p>代码示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;before&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;last&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;after&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before</span><br><span class="line">after</span><br><span class="line">last</span><br></pre></td></tr></table></figure><h3 id="2-同步API和异步API的区别-获取返回值"><a href="#2-同步API和异步API的区别-获取返回值" class="headerlink" title="2.同步API和异步API的区别(获取返回值)"></a>2.同步API和异步API的区别(获取返回值)</h3><p>同步API可以从返回值中拿到API执行的结果，但是异步API是不可以 的</p><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">&#x27;Hello Node.js&#x27;</span> &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> msg = getMsg ();</span><br><span class="line"><span class="built_in">console</span>.log(msg);</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\async&gt; node .\asyncFile.js</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><h3 id="3-回调函数-此时异步API能够获取到返回值"><a href="#3-回调函数-此时异步API能够获取到返回值" class="headerlink" title="3.回调函数(此时异步API能够获取到返回值)"></a>3.回调函数(此时异步API能够获取到返回值)</h3><p>自己定义函数让别人去调用；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getData函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params">callback</span>) </span>&#123;&#125;</span><br><span class="line"> <span class="comment">// getData函数调用了一个匿名函数</span></span><br><span class="line">getData (<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">callback(&#123;</span><br><span class="line"><span class="attr">msg</span>:<span class="string">&#x27;hello node.js&#x27;</span></span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getMsg(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\asyncCall.js</span><br><span class="line">&#123; <span class="attr">msg</span>: <span class="string">&#x27;hello node.js&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-同步API和异步API的区别（代码执行顺序）"><a href="#3-同步API和异步API的区别（代码执行顺序）" class="headerlink" title="3. 同步API和异步API的区别（代码执行顺序）"></a>3. 同步API和异步API的区别（代码执行顺序）</h3><h4 id="3-1-同步API从上到下依次执行，前面代码会阻塞后面代码的执行"><a href="#3-1-同步API从上到下依次执行，前面代码会阻塞后面代码的执行" class="headerlink" title="3.1 同步API从上到下依次执行，前面代码会阻塞后面代码的执行"></a>3.1 同步API从上到下依次执行，前面代码会阻塞后面代码的执行</h4><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;for循环后面的代码&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="3-2-异步API不会等待API执行完成后再向下执行代码"><a href="#3-2-异步API不会等待API执行完成后再向下执行代码" class="headerlink" title="3.2 异步API不会等待API执行完成后再向下执行代码"></a>3.2 异步API不会等待API执行完成后再向下执行代码</h4><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;代码开始执行：&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;两秒后执行的代码！&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;0秒后执行的代码！&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;代码执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\asyncCall.js</span><br><span class="line">代码开始执行：</span><br><span class="line">代码执行结束</span><br><span class="line"><span class="number">0</span>秒后执行的代码！</span><br><span class="line">两秒后执行的代码！</span><br></pre></td></tr></table></figure><h4 id="3-3代码执行顺序分析"><a href="#3-3代码执行顺序分析" class="headerlink" title="3.3代码执行顺序分析"></a>3.3代码执行顺序分析</h4><p>代码执行的时候，会先将代码分分别放入同步代码执行区和异步代码执行区，先执行同步代码执行区，再执行异步代码执行区，因此上面的异步代码是在同步代码之后才执行的；</p><h3 id="4-Promise"><a href="#4-Promise" class="headerlink" title="4. Promise"></a>4. Promise</h3><p>Promise出现的目的是解决Node.js异步编程中回调地狱的问题</p><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">resolve(&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(<span class="string">&#x27;失败了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result); <span class="comment">// &#123;name: &#x27;张三&#x27;&#125;)</span></span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error); <span class="comment">// 失败了)</span></span><br></pre></td></tr></table></figure><h4 id="4-1解决回调地狱"><a href="#4-1解决回调地狱" class="headerlink" title="4.1解决回调地狱"></a>4.1解决回调地狱</h4><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//以下代码存在回调地狱的问题</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./1.txt&#x27;.&#x27;utf-8&#x27;,(err,result1)=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.log(result1);</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./2.txt&#x27;,&#x27;utg-8&#x27;,(err,result2)=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.log(result2);</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./3.txt&#x27;,&#x27;utg-8&#x27;,(err,result3)=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.log(result3);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Promise来解决回调地狱的问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">P1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">fs.readFile(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">resolve(result);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">P2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">fs.readFile(<span class="string">&#x27;./2.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">resolve(result);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">P3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">fs.readFile(<span class="string">&#x27;./3.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">resolve(result);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P1().then(<span class="function">(<span class="params">data1</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data1);</span><br><span class="line"><span class="keyword">return</span> P2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">data2</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data2);</span><br><span class="line"><span class="keyword">return</span> P3();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">data3</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data3);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\<span class="built_in">Promise</span>.js</span><br><span class="line">第一个文件</span><br><span class="line">第二个文件</span><br><span class="line">第三个文件</span><br></pre></td></tr></table></figure><h3 id="5-异步函数"><a href="#5-异步函数" class="headerlink" title="5.异步函数"></a>5.异步函数</h3><h4 id="5-1-异步函数是异步编程语法的终极解决方案，"><a href="#5-1-异步函数是异步编程语法的终极解决方案，" class="headerlink" title="5.1 异步函数是异步编程语法的终极解决方案，"></a>5.1 异步函数是异步编程语法的终极解决方案，</h4><p>它可以让我们将异步代码写成同步的形式，让代码不再有回调函数嵌套，使代码变得清晰明；</p><ul><li><p>async关键字:</p><ol><li><p>普通函数定义前加async关键字 普通函数变成异步函数</p></li><li><p>异步函数默认返回promise对象</p></li><li><p>在异步函数内部使用return关键字进行结果返回 结果会被包裹的promise对象中 return关键字代替了resolve方法</p></li><li><p>在异步函数内部使用throw关键字抛出程序异常</p></li><li><p>调用异步函数再链式调用then方法获取异步函数执行结果</p></li><li><p>调用异步函数再链式调用catch方法获取异步函数执行的错误信息</p></li></ol></li><li><p>await 关键字：</p><ol><li><p>await关键字只能出现在异步函数中</p></li><li><p>await promise await后面只能写promise对象 写其他类型的API是不不可以的</p></li><li><p>await关键字可是暂停异步函数向下执行 直到promise返回结果</p></li></ol></li></ul><h4 id="5-2异步函数实例"><a href="#5-2异步函数实例" class="headerlink" title="5.2异步函数实例"></a>5.2异步函数实例</h4><ul><li><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 改造现有的异步函数，让其返回promise对象，从而支持异步函数语法</span></span><br><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).promisify;</span><br><span class="line"><span class="comment">// 调用promisify方法改造现有异步API让其返回promise对象</span></span><br><span class="line"><span class="keyword">const</span> readFile = promisify (fs.readFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">await</span> readFile(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">await</span> readFile(<span class="string">&#x27;./2.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> r3 = <span class="keyword">await</span> readFile(<span class="string">&#x27;./3.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r1);</span><br><span class="line"><span class="built_in">console</span>.log(r2);</span><br><span class="line"><span class="built_in">console</span>.log(r3);</span><br><span class="line">&#125;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn\<span class="keyword">async</span>&gt; node .\asyncFile.js</span><br><span class="line">第一个文件</span><br><span class="line">第二个文件</span><br><span class="line">第三个文件</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>实例二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;爱&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;吃&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;海&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;底&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;捞&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> one1 = <span class="keyword">await</span> getStr1();</span><br><span class="line"><span class="built_in">console</span>.log(getStr1().then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data)));</span><br><span class="line"><span class="built_in">console</span>.log(one1);</span><br><span class="line"><span class="keyword">let</span> one2 = <span class="keyword">await</span> getStr2();</span><br><span class="line"><span class="built_in">console</span>.log(one2);</span><br><span class="line"><span class="keyword">let</span> one3 = <span class="keyword">await</span> getStr3();</span><br><span class="line"><span class="built_in">console</span>.log(one3);</span><br><span class="line"><span class="keyword">let</span> one4 = <span class="keyword">await</span> getStr4();</span><br><span class="line"><span class="built_in">console</span>.log(one4);</span><br><span class="line"><span class="keyword">let</span> one5 = <span class="keyword">await</span> getStr5();</span><br><span class="line"><span class="built_in">console</span>.log(one5);</span><br><span class="line">&#125;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs学习总结</title>
      <link href="/2021/08/12/Nodejs%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/12/Nodejs%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="Node-js模块化开发"><a href="#Node-js模块化开发" class="headerlink" title="Node.js模块化开发"></a>Node.js模块化开发</h3><p>一个功能就是一个模块，多个模块可以组成完整应用，抽离一个模块不会影响其他功能的运行; Node.js规定一个<strong>JavaScript</strong>文件<strong>就是一个模块，模块</strong>内部定义的变量和函数<strong>默认情况下在</strong>外部无法得到；</p><ol><li><p>模块内部可以使用<strong>exports</strong>对象进行成员导出，使用<strong>require</strong>方法导入其他模块；</p></li><li><p>例如文件Aexport.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="function">(<span class="params">n1 , n2</span>) =&gt;</span>n1+n2;</span><br><span class="line"><span class="keyword">let</span> sayName = <span class="function"><span class="keyword">function</span>(<span class="params">youname</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> youname+<span class="string">&#x27;早上好呀！&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第一个result 指的是export中定义的属性</span></span><br><span class="line"><span class="comment">// 第二个result指的是我们上面定义的函数</span></span><br><span class="line"><span class="built_in">exports</span>.result = result;</span><br><span class="line"><span class="built_in">exports</span>.sayName = sayName;</span><br></pre></td></tr></table></figure><p>文件：Brequire.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> accept = <span class="built_in">require</span>(<span class="string">&#x27;./Aexport.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(accept.result(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line"><span class="built_in">console</span>.log(accept.sayName(<span class="string">&#x27;aichihaidilao&#x27;</span>));</span><br></pre></td></tr></table></figure><p>使用：PowerShell中node .\Brequire.js实现，B文件导入使用A文件中的函数；</p></li><li><p>模块成员导出的另一种方式：使用module.exports进行导出；</p><p><strong>exports</strong>是<strong>module.exports</strong>的别名**(地址引用关系)<strong>，</strong>导出对象最终以module.exports为准**</p><p>文件Amodule.export.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">23</span>,</span><br><span class="line"><span class="attr">height</span>:<span class="number">176</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向模块外部导出数据</span></span><br><span class="line"><span class="built_in">exports</span>.Person = Person;</span><br><span class="line"><span class="built_in">module</span>.exports.Person = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件Brequire.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入外部数据</span></span><br><span class="line"><span class="keyword">const</span> accept = <span class="built_in">require</span>(<span class="string">&#x27;./Amodule.export.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(accept);</span><br></pre></td></tr></table></figure><ul><li><p>执行的文件Brequire.js结果：</p></li><li><p>```js<br>PS C:\Users\Victory\Desktop\Node\NodeLearn&gt; node .\Brequire.js<br>{ Person: { name: ‘李四’, age: 100 } }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当文件Amodule.export.js少了module.exports.Person时</span><br><span class="line"></span><br><span class="line">执行文件Brequire.js结果：</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn&gt; node .\Brequire.js</span><br><span class="line">&#123; Person: &#123; name: &#x27;张三&#x27;, age: 23, height: 176 &#125; &#125;</span><br></pre></td></tr></table></figure><h4 id="总结：可以看到，以module-exports的结果为准；"><a href="#总结：可以看到，以module-exports的结果为准；" class="headerlink" title="总结：可以看到，以module.exports的结果为准；"></a>总结：可以看到，以module.exports的结果为准；</h4></li></ul></li></ol><h3 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h3><p>Node运行环境提供的API. 因为这些API都是以模块化的方式进行开发的, 所以我们又称Node运行环境提供的API为系统模块；</p><h4 id="系统模块fs操作"><a href="#系统模块fs操作" class="headerlink" title="系统模块fs操作"></a>系统模块fs操作</h4><p>f：file 文件 ，s：system 系统，文件操作系统</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li><p>读取文件内容：fs**.<strong>reaFile</strong>(<strong>‘文件路径/文件名称’</strong>,[<strong>‘文件编码’</strong>],** callback**);**</p><ul><li>文件 readFile.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过模块的名字fs对模块进行引用</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.通过模块内部的readFile读取文件内容</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./Aexort.js&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,doc</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 如果文件读取失败，err是一个对象，包含错误信息</span></span><br><span class="line"><span class="comment">// 如果文件读取成功，err是Null</span></span><br><span class="line"><span class="comment">// doc是文件读取的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line"><span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>成功的情况：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn&gt; node .\readFile.js</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="function">(<span class="params">n1 , n2</span>) =&gt;</span>n1+n2;</span><br><span class="line"><span class="keyword">let</span> sayName = <span class="function"><span class="keyword">function</span>(<span class="params">youname</span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第一个result 指的是export中定义的属性</span></span><br><span class="line"><span class="comment">// 第二个result指的是我们上面定义的函数</span></span><br><span class="line"><span class="comment">// 向模块外部导出数据</span></span><br><span class="line"><span class="built_in">exports</span>.result = result;</span><br><span class="line"><span class="built_in">exports</span>.sayName = sayName;</span><br></pre></td></tr></table></figure><ul><li>失败的情况：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn&gt; node .\readFile.js</span><br><span class="line">[<span class="built_in">Error</span>: ENOENT: no such file or directory, open <span class="string">&#x27;C:\Users\Victory\Desktop\Node\NodeLearn\Aexort.js&#x27;</span>] &#123;</span><br><span class="line">  <span class="attr">errno</span>: -<span class="number">4058</span>,</span><br><span class="line">  <span class="attr">code</span>: <span class="string">&#x27;ENOENT&#x27;</span>,</span><br><span class="line">  <span class="attr">syscall</span>: <span class="string">&#x27;open&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;C:\\Users\\Victory\\Desktop\\Node\\NodeLearn\\Aexort.js&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure></li><li><p>向文件中写入内容：fs**.<strong>writeFile</strong>(<strong>‘文件路径/文件名称’</strong>,** ‘数据’<strong>,</strong> callback);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">&#x27;./demo.txt&#x27;</span>,<span class="string">&#x27;用nodejs写入的内容&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;写入内容成功！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果要写入的文件夹不存在时，会自动生成该文件夹；</p></li><li><p>系统模块Path路径操作</p><ul><li><p>路径拼接语法：path**.<strong>join</strong>(<strong>‘路径’</strong>,** ‘路径’<strong>,</strong> ..)</p></li><li><p>使用：path.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// customer/src/pages/index</span></span><br><span class="line"><span class="keyword">const</span> finalPath = path.join(<span class="string">&#x27;customer&#x27;</span>,<span class="string">&#x27;src&#x27;</span>,<span class="string">&#x27;pages&#x27;</span>,<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(finalPath);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Victory\Desktop\Node\NodeLearn&gt; node .\path.js</span><br><span class="line">customer\src\pages\index</span><br></pre></td></tr></table></figure></li></ul></li><li><p>相对路径VS绝对路径 </p><p>大多数情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前工作目录,在读取文件或者设置文件路径时都会选择绝对路径,使用__dirname获取当前文件所在的绝对路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//__dirname 获取当前目录的绝对路径</span></span><br><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br><span class="line"><span class="built_in">console</span>.log(path.join(__dirname,<span class="string">&#x27;Aexport.js&#x27;</span>));</span><br><span class="line">fs.readFile(path.join(__dirname,<span class="string">&#x27;Aexport.js&#x27;</span>),<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,doc</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line"><span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h4><h3 id="服务器端概念"><a href="#服务器端概念" class="headerlink" title="服务器端概念"></a>服务器端概念</h3><h4 id="URL统一资源定位符（uniform-resource-locator）-是专门为标识Internet网上资源位置二设的一种编址方式，通常所说的网页地址即是URL"><a href="#URL统一资源定位符（uniform-resource-locator）-是专门为标识Internet网上资源位置二设的一种编址方式，通常所说的网页地址即是URL" class="headerlink" title="URL统一资源定位符（uniform resource locator）,是专门为标识Internet网上资源位置二设的一种编址方式，通常所说的网页地址即是URL"></a>URL统一资源定位符（uniform resource locator）,是专门为标识Internet网上资源位置二设的一种编址方式，通常所说的网页地址即是URL</h4><ol><li><p>URL的组成：</p><p>传输协议://服务器IP或域名:端口/资源所在位置标识</p><p><a href="http://www.itcast.cn/news">http://www.itcast.cn/news</a></p><p>http:超文本传输协议，提供一种接收和接收HTML页面的方法；</p></li><li><p>http请求方式：</p><p>get请求数据</p><p>post发送数据，相对来说较为安全</p></li><li><p>响应报文：HTTP状态码，200：请求成功，404请求的资源没有被找到，500服务器端错误，400客户端请求语法有错误</p></li></ol><h3 id="nodejs-创建Web服务器"><a href="#nodejs-创建Web服务器" class="headerlink" title="nodejs 创建Web服务器"></a>nodejs 创建Web服务器</h3><ol><li><p>首先要引入http模块，用于创建网站服务器</p></li><li><p>创建对象，当客户端有请求来的时候进行响应</p></li><li><p>监听端口，为外界提供服务</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于创建网站服务器端模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// app对象就是网站服务器对象</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"><span class="comment">// 当客户端有请求来的时候</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.end(<span class="string">&#x27;&lt;h2&gt;hello user&lt;/h2&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 向外界提供服务，必修先有端口</span></span><br><span class="line">app.listen(<span class="number">4000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功！&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>node app.js打开服务器，在浏览器中输入 localhost:4000访问该网站服务器</p></li></ol><h4 id="能够对请求进行判断的web服务器"><a href="#能够对请求进行判断的web服务器" class="headerlink" title="能够对请求进行判断的web服务器"></a>能够对请求进行判断的web服务器</h4><ol><li><p>服务器部分：app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于创建网站服务器端模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// 用于处理url地址</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="comment">// app对象就是网站服务器对象</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"><span class="comment">// 当客户端有请求来的时候</span></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 获取请求的是什么方式 req.method</span></span><br><span class="line"><span class="comment">// console.log(req.method);</span></span><br><span class="line">res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line"><span class="comment">//告诉浏览器要返回的文本类型 以及编码问题（中文）</span></span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;post&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取当前请求的地址req.url</span></span><br><span class="line"><span class="built_in">console</span>.log(req.url);</span><br><span class="line"><span class="comment">// 1.要解析的url地址</span></span><br><span class="line"><span class="comment">// 2.将要查询参数解析成对象形式</span></span><br><span class="line"><span class="comment">// url.parse(req.url,true)</span></span><br><span class="line"><span class="comment">// console.log(url.parse(req.url,true).query);</span></span><br><span class="line"><span class="comment">// 对象解构参数</span></span><br><span class="line"><span class="keyword">let</span>  &#123; query, pathname &#125; = url.parse(req.url,<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(query.name);<span class="comment">//获取到参数</span></span><br><span class="line"><span class="built_in">console</span>.log(query.age);</span><br><span class="line"><span class="built_in">console</span>.log(pathname);</span><br><span class="line"><span class="keyword">if</span> (pathname == <span class="string">&#x27;/index&#x27;</span> || pathname == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">res.end(<span class="string">&#x27;&lt;h2&gt;Welcome to homepage!哈哈啊&lt;/h2&gt;&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">res.end(<span class="string">&#x27;&lt;h2&gt;Welcome to listpage!&lt;/h2&gt;&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.end(<span class="string">&#x27;&lt;h2&gt;no found this page!&lt;/h2&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前请求报文信息</span></span><br><span class="line">req.headers</span><br><span class="line"><span class="built_in">console</span>.log(req.headers);</span><br><span class="line"><span class="built_in">console</span>.log(req.headers[<span class="string">&#x27;accept&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// res.end(&#x27;&lt;h2&gt;hello user&lt;/h2&gt;&#x27;);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 向外界提供服务，必修先有端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;网站服务器启动成功！&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>客户端部分：test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>web服务器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:4000&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Get请求参数"><a href="#Get请求参数" class="headerlink" title="Get请求参数"></a>Get请求参数</h4><h4 id="Post-请求参数"><a href="#Post-请求参数" class="headerlink" title="Post 请求参数"></a>Post 请求参数</h4><ul><li>参数被放置在请求体中进行传输</li><li>获取Post参数需要使用data事件和end事件</li><li>使用querystring系统模块将参数转换为对象格式</li></ul><h5 id="服务器部分：post-js"><a href="#服务器部分：post-js" class="headerlink" title="服务器部分：post.js"></a>服务器部分：post.js</h5><ol><li>```js<br>//用于创建网站服务器端模块<br>const http = require(‘http’);<br>// app对象就是网站服务器对象<br>const app = http.createServer();<br>// 处理请求参数模块<br>const querystring = require(‘querystring’);<br>// 当客户端有请求来的时候<br>app.on(‘request’, (req, res) =&gt; {<pre><code>// Post参数是通过事件的方式进行接收的// data 当请求参数传递的时候发出data事件// End 参数传递完成之后触发end事件let postParams = &#39;&#39;;req.on(&#39;data&#39;,params=&gt;&#123;    postParams +=params;&#125;)req.on(&#39;end&#39;,()=&gt;&#123;    let data1 = querystring.parse(postParams)    console.log(data1);    console.log(data1.username);    console.log(data1.password);&#125;)res.end(&#39;ok&#39;);</code></pre>});<br>// 向外界提供服务，必修先有端口<br>app.listen(3000);<br>console.log(‘网站服务器启动成功！’);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 客户端部分：</span><br><span class="line"></span><br><span class="line">1. ```html</span><br><span class="line">   &lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">   &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">   &lt;title&gt;&lt;/title&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">   &lt;form action=&quot;http://localhost:3000&quot; method=&quot;post&quot;&gt;</span><br><span class="line">   &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;&quot; value=&quot;&quot; /&gt;</span><br><span class="line">   &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;&quot; value=&quot;&quot; /&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul><li><p>路由是指指客户端请求地址与服务器端程序代码的对应关系。简单的说，就是请求什么响应什么，路由充当的是中间分配路径的角色；</p></li><li><p>路由实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入http模块</span></span><br><span class="line"><span class="comment">// 2.创建网站服务器</span></span><br><span class="line"><span class="comment">// 3.实现路由</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line"><span class="comment">//告诉浏览器要返回的文本类型 以及编码问题（中文）</span></span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//获取请求方式</span></span><br><span class="line"><span class="keyword">const</span> method = req.method.toLowerCase();</span><br><span class="line"><span class="comment">//获取请求地址</span></span><br><span class="line"><span class="keyword">const</span> pathname = url.parse(req.url).pathname;</span><br><span class="line"><span class="keyword">if</span>(method==<span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(pathname==<span class="string">&#x27;/&#x27;</span>||pathname==<span class="string">&#x27;/index&#x27;</span>)&#123;</span><br><span class="line">res.end(<span class="string">&#x27;欢迎来到首页！&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pathname==<span class="string">&#x27;/list&#x27;</span>)&#123;</span><br><span class="line">res.end(<span class="string">&#x27;欢迎来到列表页！&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">res.end(<span class="string">&#x27;您所访问的页面不存在！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(meothod==<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">res.end(<span class="string">&#x27;hunying&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功！&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>开启服务器后，客户端请求访问以下地址</p><p><a href="http://localhost:3000/index">http://localhost:3000/index</a></p><p><a href="http://localhost:3000/login">http://localhost:3000/login</a></p><p>服务器会依照地址来做出响应，欢迎来到首页！/欢迎来到列表页！</p></li></ol><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><ul><li><p>服务器端不需要处理，可以直接响应给客户端的资源就是静态资源，例如CSS、JavaScript、image文件。</p></li><li><p>实例如下：</p><p>首先本地有静态资源供客户端访问，本地status/public文件夹中有一些静态资源</p></li><li><p>实例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path= <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 先npm install mime安装mime模块，再导入,起作用是根据请求内容，响应相应的格式的请求内容</span></span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = http.createServer();</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 获取用户的真实路径</span></span><br><span class="line"><span class="keyword">let</span> pathname = url.parse(req.url).pathname;</span><br><span class="line"><span class="comment">//将用户的请求路径转换为硬盘的实际路径</span></span><br><span class="line"><span class="keyword">let</span> realPath=path.join(__dirname,<span class="string">&#x27;public&#x27;</span>+pathname);</span><br><span class="line"><span class="comment">//获取请求资源的类型</span></span><br><span class="line"><span class="keyword">let</span> type = mime.getType(realPath)</span><br><span class="line">fs.readFile(realPath,<span class="function">(<span class="params">error,result</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(error!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//指定返回资源的类型</span></span><br><span class="line">res.writeHead(<span class="number">404</span>,&#123;</span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf8&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">res.end(<span class="string">&#x27;请求发生错误！&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//指定返回资源的类型，否则在一些旧版本的浏览器中可能会报错</span></span><br><span class="line">res.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>:type</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将客户端响应的内容返回给客户端</span></span><br><span class="line">res.end(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功！&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><ul><li><p>相同的请求地址不同的响应资源，这种资源就是动态资源</p><p><a href="https://itfrontcode.top/article?id=1">https://itfrontcode.top/article?id=1</a></p><p><a href="https://itfrontcode.top/article?id=2">https://itfrontcode.top/article?id=2</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-异步I/O及异步编程</title>
      <link href="/2021/08/12/JS-%E5%BC%82%E6%AD%A5I-O%E5%8F%8A%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/08/12/JS-%E5%BC%82%E6%AD%A5I-O%E5%8F%8A%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="nodejs中的异步、非阻塞I-O是如何实现的？"><a href="#nodejs中的异步、非阻塞I-O是如何实现的？" class="headerlink" title="nodejs中的异步、非阻塞I/O是如何实现的？"></a>nodejs中的异步、非阻塞I/O是如何实现的？</h3><ol><li><p>I/O即是Input/Output，输入和输出的意思。在浏览器端，只有一种I/O.那就是利用ajax发送网络请求，然后读取返回的内容，这属于<em>网络I/O</em>,在Nodejs中，I/O的场景就更加广泛了，主要分为两种：</p><ol><li>文件I/O，比如用 fs 模块对文件进行读写操作</li><li>网络 I/O。比如 http 模块发起网络请求</li></ol></li><li><p>阻塞和非阻塞I/O</p><ol><li><p><code>阻塞</code>和<code>非阻塞</code> I/O 其实是针对操作系统内核而言的，而不是 nodejs 本身。阻塞 I/O 的特点就是一定要<strong>等到操作系统完成所有操作后才表示调用结束</strong>，而非阻塞 I/O 是调用后立马返回，不用等操作系统内核完成操作。</p></li><li><p>对前者而言，在操作系统进行 I/O 的操作的过程中，我们的应用程序其实是一直处于等待状态的，什么都做不了。那如果换成<code>非阻塞I/O</code>，调用返回后我们的 nodejs 应用程序可以完成其他的事情，而操作系统同时也在进行 I/O。这样就把等待的时间充分利用了起来，提高了执行效率，但是同时又会产生一个问题，nodejs 应用程序怎么知道操作系统已经完成了 I/O 操作呢？</p><p>为了让 nodejs 知道操作系统已经做完 I/O 操作，需要重复地去操作系统那里判断一下是否完成，这种重复判断的方式就是<code>轮询</code>。对于轮询而言，有以下这么几种方案:</p><ol><li>一直轮询检查I/O状态，直到 I/O 完成。这是最原始的方式，也是性能最低的，会让 CPU 一直耗用在等待上面。其实跟阻塞 I/O 的效果是一样的。</li><li>遍历文件描述符(即 文件I/O 时操作系统和 nodejs 之间的文件凭证)的方式来确定 I/O 是否完成，I/O完成则文件描述符的状态改变。但 CPU 轮询消耗还是很大。</li><li>epoll模式。即在进入轮询的时候如果I/O未完成CPU就休眠，完成之后唤醒CPU</li></ol></li></ol></li><li><p>CPU要么重复检查I/O，要么重复检查文件描述符，要么休眠，都得不到很好的利用，我们希望的是:</p><p>nodejs 应用程序发起 I/O 调用后可以直接去执行别的逻辑，操作系统默默地做完 I/O 之后给 nodejs 发一个完成信号，nodejs 执行回调操作。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 面试准备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp重构repairappckj总结</title>
      <link href="/2021/08/11/uniapp%E9%87%8D%E6%9E%84repairappckj%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/11/uniapp%E9%87%8D%E6%9E%84repairappckj%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="uniapp-中的自定义底部tabbar栏设置"><a href="#uniapp-中的自定义底部tabbar栏设置" class="headerlink" title="uniapp 中的自定义底部tabbar栏设置"></a>uniapp 中的自定义底部tabbar栏设置</h3><ol><li><p>先创建页面repair,my等（当路径使用，最多五个tabbar）</p></li><li><p>找到路径../src/pages.json</p></li><li><p>在路径所在文件 pages.json 添加如下内容（注意是与pages同级）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;list&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/repair/repair&quot;</span>,</span><br><span class="line"><span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;static/repair.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;static/repair-o.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;text&quot;</span>: <span class="string">&quot;报修&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/my/my&quot;</span>,</span><br><span class="line"><span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;static/my.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;static/my-o.png&quot;</span>,</span><br><span class="line"><span class="attr">&quot;text&quot;</span>: <span class="string">&quot;我的&quot;</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="引入和使用自定义图标或文字图标"><a href="#引入和使用自定义图标或文字图标" class="headerlink" title="引入和使用自定义图标或文字图标"></a>引入和使用自定义图标或文字图标</h3><ol><li><p>在阿里图标库<a href="https://www.iconfont.cn/manage/index%E4%B8%AD%E9%80%89%E6%8B%A9%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%9B%BE%E6%A0%87">https://www.iconfont.cn/manage/index中选择所需要的图标</a></p></li><li><p>将选择好的图标添加到项目，然后生成在线链接</p></li><li><p>将生成的在线链接的代码复制到项目的../src/App.vue 的css样式文件中，在首行引入</p></li><li><p>引入完成后，在所需要的使用图标的标签中定义类，并为该类添加类名”iconfont”和“该图标的类名”如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-quanbu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li></ol><h3 id="添加、预览、删除和上传图片到页面"><a href="#添加、预览、删除和上传图片到页面" class="headerlink" title="添加、预览、删除和上传图片到页面"></a>添加、预览、删除和上传图片到页面</h3><h4 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h4><ol><li><p>在定义一个图片的数组来存储图片：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">  <span class="attr">imgItem</span>:[]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在本地选择图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">chooseImg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">//uniapp指定选择图片方法uni.chooseImage</span></span><br><span class="line">uni.chooseImage(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">5</span>, <span class="comment">//默认9</span></span><br><span class="line">  <span class="attr">sizeType</span>: [<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;compressed&#x27;</span>], <span class="comment">//可以指定是原图还是压缩图，默认二者都有</span></span><br><span class="line">  <span class="attr">sourceType</span>: [<span class="string">&#x27;album&#x27;</span>,<span class="string">&#x27;camera&#x27;</span>], <span class="comment">//从相册选择、相机拍摄</span></span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">that.imgItem = res.tempFilePaths;</span><br><span class="line"><span class="built_in">console</span>.log(that.imgItem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="预览图片"><a href="#预览图片" class="headerlink" title="预览图片"></a>预览图片</h4><ol><li><p>给预览方法传递当前点击图片的id，和图片数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预览图片</span></span><br><span class="line"><span class="function"><span class="title">imgPreview</span>(<span class="params">index, imgItem</span>)</span> &#123;</span><br><span class="line">  uni.previewImage(&#123;</span><br><span class="line">    <span class="attr">current</span>: index, <span class="comment">//当前预览图片的id</span></span><br><span class="line">    <span class="attr">urls</span>: imgItem <span class="comment">//图片数组</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="删除图片"><a href="#删除图片" class="headerlink" title="删除图片"></a>删除图片</h4><ol><li><p>将要删除的图片的id传递，删除图片的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deletePic</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> pic_index = index;<span class="comment">//要删除的图片id</span></span><br><span class="line">  <span class="keyword">let</span> upload_pic = [];</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;删除&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.imgItem) &#123; <span class="comment">//遍历图片数组，找出要删除的图片</span></span><br><span class="line">    <span class="comment">// 将没有被删除的图片放入新数组</span></span><br><span class="line">    <span class="keyword">if</span> (i != pic_index) &#123;</span><br><span class="line">upload_pic.push(<span class="built_in">this</span>.imgItem[i]);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.imgItem = upload_pic;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.imgItem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="上传图片到后台"><a href="#上传图片到后台" class="headerlink" title="上传图片到后台"></a>上传图片到后台</h4><ol><li><p>由于不能整个图片数组一次上传，只能一张一张地上传图片，要对图片数组进行遍历上传每一张图片</p></li><li><p>上传图片代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">upImage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  that.imgItem.forEach(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> uni.uploadFile(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://zioncloud.top/repair/order/fileUpload&#x27;</span>,</span><br><span class="line">      <span class="attr">filePath</span>: value,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;img&#x27;</span>,</span><br><span class="line">      <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//formData 指上传到后台需要的字段数据，根据后台设置的验证请求字段而写</span></span><br><span class="line">      <span class="attr">formData</span>: &#123;</span><br><span class="line">        <span class="attr">orderId</span>: that.orderId,</span><br><span class="line">        <span class="attr">openId</span>: that.openId,</span><br><span class="line">        <span class="attr">path</span>: value <span class="comment">//图片路径</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        num = num + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//判断所有图片是否上传成功，成功则提示</span></span><br><span class="line">        <span class="keyword">if</span> (num == that.imgItem.length) &#123;</span><br><span class="line">          uni.showToast(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;成功提交！&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">1000</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="微信小程序订阅消息"><a href="#微信小程序订阅消息" class="headerlink" title="微信小程序订阅消息"></a>微信小程序订阅消息</h3><ol><li><p>先在微信小程序后台的订阅消息中设置，选择订阅消息的模板，复制订阅消息模板的Id</p></li><li><p>在需要订阅消息的部分加入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uni.requestSubscribeMessage(&#123;</span><br><span class="line">  <span class="attr">tmplIds</span>: [<span class="string">&quot;-95_v13pbu4T-i0yR9IuUVygv3tKMgyTbeb1gxItZrI&quot;</span>],</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//res.XII_0By8D9WabnUjVPB_8S1itsm2d4_xxxxx === &#x27;accept&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (res[<span class="string">&#x27;-95_v13pbu4T-i0yR9IuUVygv3tKMgyTbeb1gxItZrI&#x27;</span>] === <span class="string">&#x27;accept&#x27;</span>) &#123;</span><br><span class="line">      that.processNotice = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;订单接收提醒&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="uniapp缓存信息的使用"><a href="#uniapp缓存信息的使用" class="headerlink" title="uniapp缓存信息的使用"></a>uniapp缓存信息的使用</h3><ol><li><p>uni.setStorage 与uni.setStorageSync的区别：setStorage 是异步的，而setStorageSync是同步的;</p><ul><li><p>当后面的操作必须依赖于修改storage后的数据，也就是说你后面的操作是基于修改storage成功后的，就需要使用同步，也就是setStorageSync，不然后面操作执行时，使用的还是没有更新的数据;</p></li><li><p>当后面的操作并不需要用到修改的storage数据，那就不需要立即同步，这时就可以选择使用异步，也就是setStorage ，因为操作内存是需要时间的，往往没有代码走的快;</p></li></ul></li><li><p>uni.setStorageSync（）将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口；</p><p>使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uni.setStorageSync(<span class="string">&#x27;storage_key&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">key</td><td align="left">String</td><td align="left">是</td><td align="left">本地缓存中的指定的 key</td></tr><tr><td align="left">data</td><td align="left">Any</td><td align="left">是</td><td align="left">需要存储的内容，只支持原生类型、及能够通过 JSON.stringify 序列化的对象</td></tr></tbody></table></li><li><p>uni.getStorageSync（）从本地缓存中同步获取指定 key 对应的内容；使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = uni.getStorageSync(<span class="string">&#x27;storage_key&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h5 id="总结：使用uni-setStorageSync-和uni-getStorageSync-可以进行用户信息的判断，检验操作等，对同一个key多次进行uni-setStorageSync-，会实现覆盖，更新判断；"><a href="#总结：使用uni-setStorageSync-和uni-getStorageSync-可以进行用户信息的判断，检验操作等，对同一个key多次进行uni-setStorageSync-，会实现覆盖，更新判断；" class="headerlink" title="总结：使用uni.setStorageSync()和uni.getStorageSync()可以进行用户信息的判断，检验操作等，对同一个key多次进行uni.setStorageSync()，会实现覆盖，更新判断；"></a>总结：使用uni.setStorageSync()和uni.getStorageSync()可以进行用户信息的判断，检验操作等，对同一个key多次进行uni.setStorageSync()，会实现覆盖，更新判断；</h5><h3 id="uniapp提示消息框的使用"><a href="#uniapp提示消息框的使用" class="headerlink" title="uniapp提示消息框的使用"></a>uniapp提示消息框的使用</h3><ol><li><p>uni.showModal</p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">confirm</td><td align="left">Boolean</td><td align="left">为 true 时，表示用户点击了确定按钮</td></tr><tr><td align="left">cancel</td><td align="left">Boolean</td><td align="left">为 true 时，表示用户点击了取消（用于 Android 系统区分点击蒙层关闭还是点击取消按钮关闭）</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">uni.showModal(&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line"><span class="attr">content</span>: <span class="string">&#x27;这是一个模态弹窗&#x27;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;用户点击确定&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;用户点击取消&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>uni.showToast 显示消息提示框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uni.showToast(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span> <span class="comment">//取消图标 success成功 error取消</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="uniapp获取详细地址信息getLocation"><a href="#uniapp获取详细地址信息getLocation" class="headerlink" title="uniapp获取详细地址信息getLocation()"></a>uniapp获取详细地址信息getLocation()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/获取地址</span><br><span class="line"><span class="function"><span class="title">getLocation</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">uni.chooseLocation(&#123;</span><br><span class="line"><span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;位置名称：&#x27;</span> + res.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;详细地址：&#x27;</span> + res.address);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;纬度：&#x27;</span> + res.latitude);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;经度：&#x27;</span> + res.longitude);</span><br><span class="line">that.form.address=res.address;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="uniapp页面跳转传递参数："><a href="#uniapp页面跳转传递参数：" class="headerlink" title="uniapp页面跳转传递参数："></a>uniapp页面跳转传递参数：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uni.navigateTo(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;../setInfo/setInfo?modifyId=&#x27;</span> + modifyInfo.contactId + <span class="string">&#x27;&amp;showId=&#x27;</span> + showId</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="可滑动的Tab栏"><a href="#可滑动的Tab栏" class="headerlink" title="可滑动的Tab栏"></a>可滑动的Tab栏</h3><h4 id="html部分："><a href="#html部分：" class="headerlink" title="html部分："></a>html部分：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[currentTab==0?&#x27;tab-menu-select&#x27;:&#x27;default&#x27;]&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;switchNav&quot;</span>&gt;</span></span><br><span class="line">全部</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[currentTab==1?&#x27;tab-menu-select&#x27;:&#x27;default&#x27;]&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;switchNav&quot;</span>&gt;</span></span><br><span class="line">提交</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[currentTab==2?&#x27;tab-menu-select&#x27;:&#x27;default&#x27;]&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;switchNav&quot;</span>&gt;</span></span><br><span class="line">接收</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[currentTab==3?&#x27;tab-menu-select&#x27;:&#x27;default&#x27;]&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;3&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;switchNav&quot;</span>&gt;</span></span><br><span class="line">进行</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[currentTab==4?&#x27;tab-menu-select&#x27;:&#x27;default&#x27;]&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;4&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;switchNav&quot;</span>&gt;</span></span><br><span class="line">完成</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[currentTab==5?&#x27;tab-menu-select&#x27;:&#x27;default&#x27;]&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;5&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;switchNav&quot;</span>&gt;</span></span><br><span class="line">评价</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[currentTab==6?&#x27;tab-menu-select&#x27;:&#x27;default&#x27;]&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;6&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;switchNav&quot;</span>&gt;</span></span><br><span class="line">撤销</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">&#x27;tab-swiper&#x27;</span> <span class="attr">:current</span>=<span class="string">&#x27;currentTab&#x27;</span> @<span class="attr">change</span>=<span class="string">&quot;tabChange&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="js部分："><a href="#js部分：" class="headerlink" title="js部分："></a>js部分：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">currentTab</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">index</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">openId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">flagid</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//tab切换函数，让swiper当前滑块的current的index与tab头部index一一对应</span></span><br><span class="line"><span class="attr">switchNav</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.currentTab = e.currentTarget.dataset.current;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;点击&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.currentTab);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//滑动swiper切换，让swiper当前滑块的current的index与tab头部index一一对应</span></span><br><span class="line"><span class="function"><span class="title">tabChange</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;滑动&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.flagid == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.flagid = <span class="built_in">this</span>.flagid + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">this</span>.currentTab = e;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.currentTab = e.detail.current;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="css部分："><a href="#css部分：" class="headerlink" title="css部分："></a>css部分：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-swiper</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="comment">/* padding: 170rpx 0rpx 0rpx 0rpx; */</span></span><br><span class="line"><span class="attribute">padding</span>: <span class="number">92</span>rpx <span class="number">0</span>rpx <span class="number">0</span>rpx <span class="number">0</span>rpx;</span><br><span class="line"><span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-swiper</span> swiper-item &#123;</span><br><span class="line"><span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-content</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-menu</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f2f2f2</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-menu</span> view &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>rpx auto;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">88</span>rpx;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">88</span>rpx;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#434343</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-menu</span> <span class="selector-class">.tab-menu-select</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-menu</span> <span class="selector-class">.tab-menu-select</span>:after &#123;</span><br><span class="line">position: absolute;</span><br><span class="line"><span class="attribute">left</span>: -<span class="number">7</span>rpx;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>rpx;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">70</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">8</span>rpx;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">235</span>, <span class="number">21</span>, <span class="number">60</span>);</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚手架创建uni-app项目总结</title>
      <link href="/2021/08/11/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BAuni-app%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/11/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BAuni-app%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ol><li><p><code>vue create -p dcloudio/uni-preset-vue</code> <code>项目名称</code>；</p></li><li><p>记得选择默认模板</p></li><li><p>例子：如创建项目repaireappckj </p><ul><li>```js<br>vue create -p dcloudio/uni-preset-vue repaireappckj <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - cd  repaireappckj 进入创建目录的文件夹</span><br><span class="line">   - 命令：npm run dev:mp-weixin 在微信小程序中打开</span><br><span class="line">   - 运行成功之后会多一个dist文件夹</span><br><span class="line"></span><br><span class="line">###  将uview 配置到uniapp</span><br><span class="line"></span><br><span class="line">#### 进行安装</span><br><span class="line"></span><br><span class="line">1. 当我们的项目是由vue-cli创建的，请通过以下命令安装对sass(scss)的支持</span><br><span class="line"></span><br><span class="line">   ```js</span><br><span class="line">   // 安装node-sass</span><br><span class="line">   npm i node-sass -D</span><br><span class="line">   </span><br><span class="line">   // 安装sass-loader</span><br><span class="line">   npm i sass-loader -D</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用vue-cli安装uview</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果您的项目是HX创建的，根目录又没有package.json文件的话，请先执行如下命令：</span></span><br><span class="line"><span class="comment">// npm init -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install uview-ui</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">npm update uview-ui</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置uview"><a href="#配置uview" class="headerlink" title="配置uview"></a>配置uview</h4><ol><li><p>引入uView主JS库</p><p>在项目根目录中的<code>main.js</code>中，引入并使用uView的JS库，注意这两行要放在<code>import Vue</code>之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> uView <span class="keyword">from</span> <span class="string">&quot;uview-ui&quot;</span>;</span><br><span class="line">Vue.use(uView);</span><br></pre></td></tr></table></figure></li><li><p>在引入uView的全局SCSS主题文件</p><p>在项目根目录./src/uni.scss中引入此文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* uni.scss */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;uview-ui/theme.scss&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>引入uView基础样式</p><p>注意！</p><p>在<code>App.vue</code>中<strong>首行</strong>的位置引入，注意给style标签加入lang=”scss”属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">/* 注意要写在第一行，同时给style标签加入lang=&quot;scss&quot;属性 */</span><br><span class="line">@import &quot;uview-ui/index.scss&quot;;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置easycom组件模式</p><p>此配置需要在项目根目录的<code>pages.json</code>中进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// pages.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;easycom&quot;: &#123;</span><br><span class="line">&quot;^u-(.*)&quot;: &quot;uview-ui/components/u-$1/u-$1.vue&quot;</span><br><span class="line">&#125;,</span><br><span class="line">// 此为本身已有的内容</span><br><span class="line">&quot;pages&quot;: [</span><br><span class="line">// ......</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>温馨提示</p><ol><li>uni-app为了调试性能的原因，修改<code>easycom</code>规则不会实时生效，配置完后，您需要重启HX或者重新编译项目才能正常使用uView的功能。</li><li>请确保您的<code>pages.json</code>中只有一个<code>easycom</code>字段，否则请自行合并多个引入规则。</li></ol></li></ol><h3 id="将ThorUI配置到uniapp中"><a href="#将ThorUI配置到uniapp中" class="headerlink" title="将ThorUI配置到uniapp中"></a>将ThorUI配置到uniapp中</h3><ol><li><p>通过npm进行安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install thorui-uni</span><br></pre></td></tr></table></figure></li><li><p>引入组件：开启easycom组件模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    开启easycom组件模式，不需要再执行第一种引入操作即可使用</span></span><br><span class="line"><span class="comment">注意组件的位置是否和示例中一致，如果不一致需要自行调整下方地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// 使用npm安装时，使用以下配置（配置完成后重新编译运行）</span></span><br><span class="line"><span class="string">&quot;easycom&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;autoscan&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;custom&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;tui-(.*)&quot;</span>: <span class="string">&quot;thorui-uni/lib/thorui/tui-$1/tui-$1.vue&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="微信小程序引入（可以在app-json中全局引入）"><a href="#微信小程序引入（可以在app-json中全局引入）" class="headerlink" title="微信小程序引入（可以在app.json中全局引入）"></a>微信小程序引入（可以在app.json中全局引入）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//json文件中手动引入</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;tui-button&quot;</span>: <span class="string">&quot;/components/thorui/tui-button/tui-button&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的基本操作和命令</title>
      <link href="/2021/08/05/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/08/05/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="Git-的基本操作"><a href="#Git-的基本操作" class="headerlink" title="Git 的基本操作"></a>Git 的基本操作</h3><h4 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h4><ol><li><p>打开git官网下载安装程序，安装完成后打开 git bash软件,证明安装成功</p></li><li><p>安装完成后需要进行设置，在命令行输入以下命令来设置你的名字和Email地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>查看一下用户名和密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure></li></ol><h4 id="git的工作图："><a href="#git的工作图：" class="headerlink" title="git的工作图："></a>git的工作图：</h4><p><img src="https://img-blog.csdnimg.cn/20191018101017227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk1MDk4Nw==,size_16,color_FFFFFF,t_70"></p><h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><p>版本库（repository)也叫仓库,可以看做一个目录,这个目录里面的每个文件都由git 进行管理,每个文件的修改、删除git 都能够跟踪；</p><ol><li><p>选择电脑适合的目录或文件，创建一个空目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learnGit           //创建一个名叫learnGit的空目录</span><br><span class="line">$ cd learnGit              //把learngit设置为当前目录</span><br><span class="line">$ pwd                      //查看当前目录</span><br><span class="line">/c/Users/Administrator/learnGit  </span><br></pre></td></tr></table></figure><p>注意：使用window系统，要先确定当前的路径不包含中文；</p></li><li><p>将上面创建的目录变成git可以管理的仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/Administrator/learnGit/.git/</span><br></pre></td></tr></table></figure><p>Git就把仓库建好啦，我们可以看到在当前目录下多了一个 .git 的目录，这个目录是Git来跟踪管理版本库的</p></li><li><p>将文件添加到版本库</p><p>在 learngit 目录下编写一个 readme.txt 文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>(1). 用git add name 命令将文件添加到仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>(2). 用 git commit 命令，把文件提交到仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot; //-m后面输入的是本次提交的说明，可以输入任意内容。</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+) //1 file changed：1个文件被改动（新添加的readme.txt文件）；2 insertions：插入了两行内容（readme.txt内有两行内容）</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure></li><li><p>修改文件</p><p>我们已经成功添加并提交了一个 readme.txt 文件，继续修改 readme.txt 文件，改成如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>运行 git status 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status //查看仓库当前的状态</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit: //没有文件将要被提交</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"> </span><br><span class="line">    modified:   readme.txt</span><br><span class="line"> </span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>上面的命令告诉我们，readme.txt 文件被修改过了，但还没有准备提交的修改。</p><p>如果我们想知道上次是怎么修改readme.txt 文件的，需要用 git diff 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 46d49bf..9247db6 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system. //这一句是被删掉的</span><br><span class="line">+Git is a distributed version control system. //这一句是新添加的</span><br><span class="line"> Git is free software.</span><br></pre></td></tr></table></figure></li></ol><h4 id="理解git的工作区和暂存区"><a href="#理解git的工作区和暂存区" class="headerlink" title="理解git的工作区和暂存区"></a>理解git的工作区和暂存区</h4><p><code>工作区</code>：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。工作区（Working Directory）learnGit 文件夹就是一个工作区。</p><p>版本库（Repository）工作区有个隐藏目录 .git ，这个不算工作区，而是 Git 的版本库。版本库里面的 index(stage) 文件叫暂存区，还有Git为我们自动创建的第一个分支 master ，以及指向 master 的一个指针叫做 HEAD；</p><p><img src="https://img-blog.csdnimg.cn/20191018142824924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk1MDk4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdn.net/20180603202659766" alt="img"></p><p>前面我们提到过，如果我们想把文件添加到Git里面时，需要分两步：</p><p>第一步: 用 git add 把文件添加进去，实际上就是把文件修改添加到暂存区。</p><p>第二步: 用 git commit 提交更改，实际上就是把暂存区的所有内容提交到当前分支。（我们现在只有唯一一个分支 master，所以现在就是往 master 分支上提交更改）</p><ol><li><p>在 readme.txt 文件中加上一行内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br></pre></td></tr></table></figure></li><li><p>然后在工作区新建一个 LICENSE 文本文档（任意内容）</p><p>使用两次 git add 命令分别把 readme.txt 和 LICENSE 都添加后，可以用 git status 命令查看一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"> </span><br><span class="line">    new file:   LICENSE</span><br><span class="line">    modified:   readme.txt</span><br></pre></td></tr></table></figure><p>暂存区的状态就变成这样了：</p></li></ol><p><img src="https://img-blog.csdn.net/20180603204003143" alt="img"></p><ol start="3"><li><p>再使用 git commit 命令把暂存区的所有修改提交到分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;understand how stage works&quot;</span><br><span class="line">[master e43a48b] understand how stage works</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure><p>这时候的工作区就是干净的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></li><li><p>最后版本库就变成了这样：</p><p><img src="https://img-blog.csdn.net/20180603204522746" alt="img"></p></li></ol><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>同步到远程仓库可以使用git bash</p><p>如果在GitHub上的仓库是空的，我们可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><h5 id="先有本地仓库然后同步到远程"><a href="#先有本地仓库然后同步到远程" class="headerlink" title="先有本地仓库然后同步到远程"></a>先有本地仓库然后同步到远程</h5><ol><li><p>如果本地项目有一定的文件，但是git没有初始化，需要先执行如下操作生成一个本地仓库：</p><ul><li>git init //初始化出一个新git本地仓库</li><li>git add . //添加所有本地文件</li><li>git commit -m “add file”   //提交说明，将暂存区的内容修改添加到分支</li></ul></li><li><p>本地与远程进行连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 远程仓库地址  //本地与远程进行连接</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库的内容推送到远程仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master </span><br></pre></td></tr></table></figure><p>注意：若本地仓库和远程仓库的内容不一致时要先git pull再重新执行上面操作</p></li></ol><p>远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了</p><p>从现在起，只要本地作了提交，就可以通过如下命令：<code>git push origin master</code></p><h5 id="远程库有内容，克隆到本地"><a href="#远程库有内容，克隆到本地" class="headerlink" title="远程库有内容，克隆到本地"></a>远程库有内容，克隆到本地</h5><ol><li><p>克隆到本地即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 当前克隆仓库的地址</span><br></pre></td></tr></table></figure></li></ol><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><ol><li><p>首先，我们来创建dev分支，然后切换到dev分支上。如下操作：</p><p><img src="https://img-blog.csdnimg.cn/20191019002646224.png" alt="在这里插入图片描述"></p><p>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令：git branch dev和git checkout dev</p><p>git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777</p></li><li><p>查看下readme.txt内容，接着添加内容77777777，如下：</p><p><img src="https://img-blog.csdnimg.cn/20191019003135234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk1MDk4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：</p><p><img src="https://img-blog.csdnimg.cn/20191019003705479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk1MDk4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 <code>git merge dev</code> 如下所示：</p><p><img src="https://img-blog.csdnimg.cn/20191019005938600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk1MDk4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。</p><p>注意: 上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p></li><li><p>合并完成后，我们可以接着删除dev分支了，操作如下：</p><p><img src="https://img-blog.csdnimg.cn/20191019010152269.png" alt="在这里插入图片描述"></p></li><li><p>总结创建与合并分支命令如下：</p><p>查看分支：git branch</p><p>创建分支：git branch name</p><p>切换分支：git checkout name</p><p>创建+切换分支：git checkout –b name</p><p>合并某分支到当前分支：git merge name</p><p>删除分支：git branch –d name</p></li></ol><h4 id="多人协作工作模式"><a href="#多人协作工作模式" class="headerlink" title="多人协作工作模式"></a>多人协作工作模式</h4><ul><li>首先，可以试图用<code>git push origin branch-name</code>推送自己的修改.</li><li>如果推送失败，则因为远程分支比你的本地更新早，需要先用<code>git pull</code>试图合并。</li><li>如果合并有冲突，则需要解决冲突，并在本地提交。再用<code>git push origin branch-name</code>推送。</li></ul><h3 id="Git基本常用命令如下："><a href="#Git基本常用命令如下：" class="headerlink" title="Git基本常用命令如下："></a>Git基本常用命令如下：</h3><p>mkdir XX (创建一个空目录 XX指目录名)<br>pwd 显示当前目录的路径。<br>git init 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。<br>git add XX 把xx文件添加到暂存区去。<br>git commit –m “XX” 提交文件 –m 后面的是注释。<br>git status 查看仓库状态<br>git diff XX 查看XX文件修改了那些内容<br>git log 查看历史记录<br>git reset –hard HEAD^ 或者 git reset –hard HEAD~ 回退到上一个版本<br>(如果想回退到100个版本，使用git reset –hard HEAD~100 )<br>cat XX 查看XX文件内容<br>git reflog 查看历史记录的版本号id<br>git checkout – XX 把XX文件在工作区的修改全部撤销。<br>git rm XX 删除XX文件<br>git remote add origin <a href="https://github.com/18515592159zhu/testgit.git">https://github.com/18515592159zhu/testgit.git</a> 关联一个远程库<br>git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库<br>git clone <a href="https://github.com/18515592159zhu/testgit.git">https://github.com/18515592159zhu/testgit.git</a> 从远程库中克隆<br>git checkout –b dev 创建dev分支 并切换到dev分支上<br>git branch 查看当前所有的分支<br>git checkout master 切换回master分支<br>git merge dev 在当前的分支上合并dev分支<br>git branch –d dev 删除dev分支<br>git branch name 创建分支<br>git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作<br>git stash list 查看所有被隐藏的文件列表<br>git stash apply 恢复被隐藏的文件，但是内容不删除<br>git stash drop 删除文件<br>git stash pop 恢复文件的同时 也删除文件<br>git remote 查看远程库的信息<br>git remote –v 查看远程库的详细信息<br>git push origin master Git会把master分支推送到远程库对应的远程分支上</p>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app中父组件和子组件方法的调用</title>
      <link href="/2021/08/04/uni-app%E4%B8%AD%E7%88%B6%E7%BB%84%E4%BB%B6%E5%92%8C%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/"/>
      <url>/2021/08/04/uni-app%E4%B8%AD%E7%88%B6%E7%BB%84%E4%BB%B6%E5%92%8C%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="uniapp组件之间的通信"><a href="#uniapp组件之间的通信" class="headerlink" title="uniapp组件之间的通信"></a>uniapp组件之间的通信</h3><h4 id="父组件引用子组件-调用子组件的方法-子组件调用父组件的方法"><a href="#父组件引用子组件-调用子组件的方法-子组件调用父组件的方法" class="headerlink" title="父组件引用子组件,调用子组件的方法,子组件调用父组件的方法"></a>父组件引用子组件,调用子组件的方法,子组件调用父组件的方法</h4><ol><li><p>先创建子组件subComponents,在子组件中有childMethod()方法；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                </span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">             <span class="comment">// 定义子组件中的方法</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">childMethod</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;欢迎使用子组件中的方法！&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 调用父组件中的方法fatherMethod(),在此getValue就是父组件中通过@getValue=&quot;fatherMethod&quot;传递过来的方法</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">getFatherMethod</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$emit(<span class="string">&quot;getValue&quot;</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建父组件,父组件中有fatherMethod()方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;text&gt;父组件&lt;/text&gt;</span><br><span class="line">        &lt;sub-components  @getValue=&quot;fatherMethod&quot; ref=&quot;subComponents&quot;&gt;&lt;/sub-components&gt;</span><br><span class="line">        &lt;view @tap=&quot;dataAction&quot;&gt;button&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import subComponents from &#x27;@/pages/main/index/index.vue&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            subComponents</span><br><span class="line">        &#125;,</span><br><span class="line">        onLoad(e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            //父组件调用子组件中的childMethod()方法</span><br><span class="line">            getChildMethod()&#123;</span><br><span class="line">                this.$refs.subComponents.childMethod();</span><br><span class="line">            &#125;</span><br><span class="line">            // 定义父组件中的方法</span><br><span class="line">fatherMethod()&#123;</span><br><span class="line">console.log(&quot;欢迎使用父组件中的方法！&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>父组件调用子组件：在父组件中引入子组件文件，然后用ref给子组件一个id标识，即如上面的：ref=”subComponents”,最后通过this.$refs.subComponents.childMethod();来调用子组件中的方法；</p></li><li><p>子组件调用父组件：子组件调用父组件中的方法，用$emit方法，即如上的this.$emit(“getValue”);注意的是，左边的@getValue是子组件的将可以调用的方法，右边的fatherMethod是父组件将要传递的方法，两个可以同名；</p></li></ol><h4 id="父子组件之间值传递"><a href="#父子组件之间值传递" class="headerlink" title="父子组件之间值传递"></a>父子组件之间值传递</h4><h5 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h5><ol><li><p>父组件通过v-bind绑定数据传递给子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;son :msg=&quot;msg&quot;&gt;&lt;/son&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import son from &quot;@/components/son/son.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#x27;hello,i am your father!&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;son&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>子组件通过props来接受外界传递到组件内部的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props: [&#x27;msg&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h5 id="子组件给父组件传值"><a href="#子组件给父组件传值" class="headerlink" title="子组件给父组件传值"></a>子组件给父组件传值</h5><ol><li><p>通过点击事件触发 sendMsg 方法，在方法中利用 $emit 触发 myEvent 将 this.status 传递给父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; @click=&quot;sendMsg&quot;&gt;给父组件传值&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">status: &#x27;想要传递给父组件的数据&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">sendMsg () &#123;</span><br><span class="line">this.$emit(&#x27;myEvent&#x27;,this.status)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>父组件定义自定义事件( myEvent )并接收参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;son @myEvent=&quot;getMsg&quot;&gt;&lt;/son&gt;</span><br><span class="line">子组件传递的值： &#123;&#123;res&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import son from &quot;@/components/son/son.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">res: &#x27;&#x27; </span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">getMsg (res) &#123;</span><br><span class="line">this.res = res</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;son&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="兄弟组件间传值"><a href="#兄弟组件间传值" class="headerlink" title="兄弟组件间传值"></a>兄弟组件间传值</h5><ol><li><p>兄弟A组件：通过点击事件触发 addNum 方法，触发uni.$emit 定义的 updateNum 全局事件，将数据传递出去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是a组件：&lt;button @click=&quot;addNum&quot;&gt;修改b组件的数据&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">addNum () &#123;</span><br><span class="line">uni.$emit(&#x27;updateNum&#x27;,10)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>兄弟B组件：在组件生命周期函数 created() ，用 uni.$on 注册一个全局事件 updateNum 触发回调函数，将A组件传递的值渲染在页面上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是b组件的数据:&#123;&#123;num&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">num: 0</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">uni.$on(&#x27;updateNum&#x27;,num=&gt;&#123;</span><br><span class="line">this.num=num</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import testA from &#x27;../../components/a.vue&#x27;</span><br><span class="line">import testB from &#x27;../../components/b.vue&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>以上就是组件之间通信的内容了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在hexo上创建一篇文章</title>
      <link href="/2021/08/03/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2021/08/03/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="如何在Hexo上创建一篇文章"><a href="#如何在Hexo上创建一篇文章" class="headerlink" title="如何在Hexo上创建一篇文章"></a>如何在Hexo上创建一篇文章</h3><h4 id="使用命令来创建文章"><a href="#使用命令来创建文章" class="headerlink" title="使用命令来创建文章"></a>使用命令来创建文章</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><ol><li>layout 是文章的布局,一般可以不写</li><li>title是文章的标题,也就是文件的名字,存储在source/posts下</li></ol><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog]# hexo new &quot;如何在hexo上创建一篇文章&quot;</span><br><span class="line">...</span><br><span class="line">INFO  Created: /blog/source/_posts/如何在hexo上创建一篇文章.md</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就成功创建了一篇名为”如何在hexo上创建一篇文章”</p><p>之后就可以在markdown上编辑了</p><h4 id="Front-matter设置"><a href="#Front-matter设置" class="headerlink" title="Front-matter设置"></a>Front-matter设置</h4><p>Front-matter 是文章最上方以—分隔的区域，用于指定文章的变量设置，举例来说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 如何在hexo上创建一篇文章</span><br><span class="line">date: 2020-09-16 19:33:46</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置自己需要的变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">    - 博客</span><br><span class="line">tags:</span><br><span class="line">    - 创建文章</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Front-matter参数-描述-默认值"><a href="#Front-matter参数-描述-默认值" class="headerlink" title="Front-matter参数    描述    默认值"></a>Front-matter参数    描述    默认值</h4><p>layout    布局<br>title    标题    文章的文件名<br>date    建立日期    文件建立日期<br>updated    更新日期    文件更新日期<br>description    描述<br>comments    开启文章的评论功能<br>tags    标签（不适用于分页）<br>categories    分类（不适用于分页）<br>permalink    覆盖文章网址<br>keywords    仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）    </p><h4 id="Front-matter-布局"><a href="#Front-matter-布局" class="headerlink" title="Front-matter 布局"></a>Front-matter 布局</h4><p>布局<br>Hexo 有三种默认布局：post、page 和 draft在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p><p>布局    路径<br>post    source/_posts<br>page    source<br>draft    source/_drafts</p><p>设置好开头后，就可以编写文章内容了<br>写完后就可以发布</p><h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>先:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>最后:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样一篇hexo文章就编写完成啦!</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 创建文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue创建项目的注意事项</title>
      <link href="/2021/07/01/Vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2021/07/01/Vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="1-先创建一个脚手架Vue项目"><a href="#1-先创建一个脚手架Vue项目" class="headerlink" title="1.先创建一个脚手架Vue项目"></a>1.先创建一个脚手架Vue项目</h3><ul><li><p>命令如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project </span><br></pre></td></tr></table></figure></li></ul><h3 id="2-创建单文件组件"><a href="#2-创建单文件组件" class="headerlink" title="2.创建单文件组件"></a>2.创建单文件组件</h3><ul><li><p>在项目文件夹中找到views文件夹，在上面创建单文件组件：</p></li><li><p>单文件组件如：first.vue:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;article&quot;&gt;</span><br><span class="line">    &lt;p&gt;[重磅] 今天油价喜降5毛钱，各地加油站排成长龙&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;[重磅] 今天油价喜降5毛钱，各地加油站排成长龙&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;[重磅] 今天油价喜降5毛钱，各地加油站排成长龙&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;[重磅] 今天油价喜降5毛钱，各地加油站排成长龙&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;[重磅] 今天油价喜降5毛钱，各地加油站排成长龙&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;[重磅] 今天油价喜降5毛钱，各地加油站排成长龙&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.article &#123;</span><br><span class="line">  margin: 40px 0;</span><br><span class="line">&#125;</span><br><span class="line">.article p &#123;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul><p>3.在Router 文件夹中添加并引入first.vue路由：</p><ul><li><p>添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;./views/About.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/first&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;./views/first.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-打开App-vue，添加路由链接"><a href="#3-打开App-vue，添加路由链接" class="headerlink" title="3.打开App.vue，添加路由链接"></a>3.打开App.vue，添加路由链接</h3><ul><li><p>添加如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; |</span><br><span class="line">      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt; | </span><br><span class="line">      &lt;router-link to=&quot;/first&quot;&gt;news&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-安装和使用element-ui"><a href="#4-安装和使用element-ui" class="headerlink" title="4.安装和使用element-ui"></a>4.安装和使用element-ui</h3><ul><li><p>需要在项目的根目录进行安装，安装命令如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure></li><li><p>引入：将创建的单文件组件和element-ui组件放到vue项目中展示</p><p>打开main.js,添加引入element-ui组件的代码，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用：打开App.vue，添加element-ui组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; |</span><br><span class="line">      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt; | </span><br><span class="line">      &lt;router-link to=&quot;/first&quot;&gt;news&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">    &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">      &lt;el-pagination</span><br><span class="line">        layout=&quot;prev, pager, next&quot;</span><br><span class="line">        :total=&quot;50&quot;&gt;</span><br><span class="line">      &lt;/el-pagination&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-搭建步骤明细"><a href="#5-搭建步骤明细" class="headerlink" title="5.搭建步骤明细"></a>5.搭建步骤明细</h3><p>vue的3.0版本的初始化<br>1、新建一个文件夹,然后右键选择打开命令行窗口<br>2、在命令窗口输入指令<br>vue create 项目名称<br>3、选择初始化项目的配置<br>第一步：Default是自动安装，在这里我选择最后一个手动安装，按下回车键进行选择</p><p>第二步：Vue-cli3.x 将提供以下特性供选择，可以根据项目需要进行选择添加的配置项，使用空格键来选中，熟练使用TS的可以选择TypeScript</p><p>*Babel：使用babel，便于将我们源代码进行转码（把es6=&gt;es5）<br>*TypeScript：使用TypeScript进行源码编写，使用ts可以编写强类型js，对我们的开发有很大的好处<br>*Progressive Web App(PWA)：使用渐进式网页应用（PWA）<br>*Router：使用vue-router<br>*Vuex：使用vuex状态管理器<br>*CSS Pre-processors：使用CSS预处理器，比如：less，sass等<br>*Linter/Formatter：使用代码风格检查和格式化<br>*Unit Testing：使用单元测试<br>*E2E Testing：使用E2E测试, end to end（端到端）是黑盒测试的一种</p><p>第三步：选择版本，我这里选择3.x</p><p>第四步：Use history mode for router?<br>路由模式, 是否选择history模式，启用history模式，项目build之后，可能会出现打开页面空白的情况哦。我这里选择n</p><p>第五步：Pick a CSS pre-processor?<br>选择一种css 预处理器，我这里选择第二个</p><p>第六步：Pick a linter / formatter config?<br>选择一种代码格式化检测工具，这里我选择第一个<br>*TSLint: ts格式检验工具<br>*ESLint with error prevention only: ESLint 只会进行错误提醒<br>*ESLint + Airbnb config: ESLint Airbnb标准<br>*ESLint + Standard config: ESLint Standard 标准<br>*ESLint + Prettier: ESLint（代码质量检测）+ Prettier（代码格式化工具）</p><p>第七步Pick additional lint features?<br>代码检查方式: 保存时检查 or 提交时检查; 我选择, 保存时检查，我选择第一个</p><p>第八步：Where do you prefer placing config for Babel, PostCSS, ESLint, etc.?<br>Babel, PostCSS, ESLin等配置文件怎么存放, 是放到单独的配置文件中?还是package.json里? 这里方便配置清晰好看, 我选择每个配置单独文件。</p><p>第九步：Save this as a preset for future projects?<br>是否需要保存当前配置，在以后的项目中可快速构建? 保存后, 后续创建项目时可以直接选择该配置, 不需单独配置，我选择no</p><p>然后点击回车，会自动初始化项目</p><p>看到这个就说明项目已经初始化成功，然后cd vue-test进入文件夹，运行npm run serve指令项目就启动了</p><p>vue3.0项目搭建到此已经完成，如果想学习vue3.0的环境配置，接口封装，以及使用vue3.0 + ant-design-vue进行后台管理系统的开发</p>]]></content>
      
      
      <categories>
          
          <category> 博客笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序实现图片上传</title>
      <link href="/2021/06/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/06/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="小程序wxml部分："><a href="#小程序wxml部分：" class="headerlink" title="小程序wxml部分："></a>小程序wxml部分：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;uploadContainer&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 图片预览区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;imgContainer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;imageInfo&#x27;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;imgs&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span>  <span class="attr">wx:key</span>=<span class="string">&quot;*this&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item&#125;&#125;&quot;</span><span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span><span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;previewImg&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">type</span>=<span class="string">&#x27;cancel&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;delete-btn&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span> <span class="attr">catchtap</span>=<span class="string">&quot;deleteImg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 备注 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page-section&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;weui-cells__title note&quot;</span>&gt;</span>提示:图片最多上传8张,点击X可以取消上传图片<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;weui-cells weui-cells_after-title&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;weui-cell weui-cell_input noteContent&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">disabled</span>=<span class="string">&quot;&#123;&#123;inputDisable&#125;&#125;&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;checkInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;作品备注&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;101&quot;</span> <span class="attr">placeholder-style</span>=<span class="string">&quot;color:grey;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;upload-img-btn&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;chooseImg&quot;</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span>&gt;</span>拍照  / 上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;upload-img-btn&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;sureUpload&quot;</span> <span class="attr">type</span>=<span class="string">&#x27;warn&#x27;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小程序js部分"><a href="#小程序js部分" class="headerlink" title="小程序js部分"></a>小程序js部分</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/uploadMessage/uploadMessage.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">imgs</span>: [],</span><br><span class="line">    <span class="attr">inputDisable</span>:<span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//选择图片</span></span><br><span class="line">  <span class="attr">chooseImg</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> imgs = <span class="built_in">this</span>.data.imgs;</span><br><span class="line">    <span class="keyword">if</span> (imgs.length &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        <span class="attr">lenMore</span>: <span class="number">1</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          <span class="attr">lenMore</span>: <span class="number">0</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, <span class="number">2500</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">8</span>, <span class="comment">// 默认9</span></span><br><span class="line">      <span class="attr">sizeType</span>: [<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;compressed&#x27;</span>], <span class="comment">// 可以指定是原图还是压缩图，默认二者都有</span></span><br><span class="line">      <span class="attr">sourceType</span>: [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;camera&#x27;</span>], <span class="comment">// 可以指定来源是相册还是相机，默认二者都有</span></span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片</span></span><br><span class="line">        <span class="keyword">var</span> tempFilePaths = res.tempFilePaths;</span><br><span class="line">        <span class="keyword">var</span> imgs = that.data.imgs;</span><br><span class="line">        <span class="comment">// console.log(tempFilePaths + &#x27;----&#x27;);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tempFilePaths.length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (imgs.length &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              <span class="attr">imgs</span>: imgs</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            imgs.push(tempFilePaths[i]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log(imgs);</span></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          <span class="attr">imgs</span>: imgs</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 删除图片</span></span><br><span class="line">  <span class="attr">deleteImg</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgs = <span class="built_in">this</span>.data.imgs;</span><br><span class="line">    <span class="keyword">var</span> index = e.currentTarget.dataset.index;</span><br><span class="line">    imgs.splice(index, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">imgs</span>: imgs</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 预览图片</span></span><br><span class="line">  <span class="attr">previewImg</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前图片的下标</span></span><br><span class="line">    <span class="keyword">var</span> index = e.currentTarget.dataset.index;</span><br><span class="line">    <span class="comment">//所有图片</span></span><br><span class="line">    <span class="keyword">var</span> imgs = <span class="built_in">this</span>.data.imgs;</span><br><span class="line">    wx.previewImage(&#123;</span><br><span class="line">      <span class="comment">//当前显示图片</span></span><br><span class="line">      <span class="attr">current</span>: imgs[index],</span><br><span class="line">      <span class="comment">//所有图片</span></span><br><span class="line">      <span class="attr">urls</span>: imgs</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//检查字数</span></span><br><span class="line">  <span class="attr">checkInput</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that=<span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(e.detail.value.length&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;备注不能超过100个字&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>:<span class="string">&quot;none&quot;</span>,</span><br><span class="line">        <span class="attr">duration</span>:<span class="number">2000</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//上传到后台</span></span><br><span class="line">  <span class="attr">sureUpload</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgList=<span class="built_in">this</span>.data.imgs;</span><br><span class="line">    <span class="keyword">if</span>(imgList.length&gt;<span class="number">8</span>)&#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;上传的图片不能超过8张&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;上传作品&#x27;</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;确定上传？&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">            wx.showLoading(&#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;正在上传&#x27;</span>,</span><br><span class="line">              <span class="attr">mask</span>:<span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            wx.hideLoading()</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;上传成功&#x27;</span>,</span><br><span class="line">              <span class="attr">icon</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">              <span class="attr">duration</span>:<span class="number">2000</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;, <span class="number">4000</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;用户点击取消&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="title">bindPickerChange</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;picker发送选择改变，携带值为&#x27;</span>, e.detail.value)</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">index</span>: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">clearFont</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">placeholder</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="title">bindRegionChange</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;picker发送选择改变，携带值为&#x27;</span>, e.detail.value)</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">region</span>: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="小程序wxss部分"><a href="#小程序wxss部分" class="headerlink" title="小程序wxss部分"></a>小程序wxss部分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: left;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">8</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.uploadContainer</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">620</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgContainer</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">370</span>rpx;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-section</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-section</span> <span class="selector-class">.note</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.noteContent</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">98%</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">2</span>rpx solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5</span>rpx;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5</span>rpx;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.noteContent</span> <span class="selector-tag">textarea</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imageInfo</span> &#123;</span><br><span class="line"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1</span>rpx solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">2</span>rpx;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">23%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">175</span>rpx;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">2</span>rpx <span class="number">6</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imageInfo</span> image&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.delete-btn</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><img src="C:\Users\Kitve\Desktop\Blog\source\_posts\img\小程序图片上传.jpg" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 图片上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单认识Vuejs</title>
      <link href="/2021/05/22/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86Vuejs/"/>
      <url>/2021/05/22/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86Vuejs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="一、简单认识Vuejs"><a href="#一、简单认识Vuejs" class="headerlink" title="一、简单认识Vuejs"></a>一、简单认识Vuejs</h3><ul><li>Vue 是一个渐进式的框架，意味着Vue可以作为应用的一部分嵌入其中，带来更丰富的交互体验</li><li>Vue具有很多特点和Web开发中常见的高级功能，它是响应式的<ul><li>解耦视图和数据</li><li>可复用的组件</li><li>前段路由技术</li><li>状态管理</li><li>虚拟dom</li></ul></li></ul><h3 id="二、Vue中的MVVM"><a href="#二、Vue中的MVVM" class="headerlink" title="二、Vue中的MVVM"></a>二、Vue中的MVVM</h3><img src="C:\Users\Kitve\Desktop\Blog\source\_posts\img\Vue中的MVVM.jpg" style="zoom:50%;" /><ol><li>View 层，即是视图层，在前端开发中通常就是DOM层，主要作用是给用户显示各种信息</li><li>Model层，即是数据层，固定的数据或者来自服务器，从网络请求下来的数据</li><li>VueModel层，即是视图模型层，视图模型层是View和Model沟通的桥梁，一方面实现了数据绑定（Data Binding），将Model的改变实时反应到View中；另一方面，它实现了ＤＯＭ发生一些事件（点击、滚动、ｔｏｕｃｈ，等）时，可以监听到，并在需要的情况下改变对应的Ｄａｔａ、</li></ol><h3 id="三、创建Vue实例传入的options"><a href="#三、创建Vue实例传入的options" class="headerlink" title="三、创建Vue实例传入的options"></a>三、创建Vue实例传入的options</h3><ul><li>options中包含的选项：<ul><li>el:  <ul><li>类型：string |HTMLElement  作用：决定之后Vue实例会管理哪一个DOM</li></ul></li><li>data： <ul><li>类型： Object|Function （组件中的Data必须是一个函数） 作用：Vue实例对应的数据对象</li></ul></li><li>methods : <ul><li>类型{[key]:Function}   作用：定义属于Vue的一些方法，可以在其他地方调用也可以在指令中调用</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/05/21/hello-world/"/>
      <url>/2021/05/21/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>组件化开发</title>
      <link href="/2021/05/19/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/2021/05/19/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="什么是组件化？"><a href="#什么是组件化？" class="headerlink" title="什么是组件化？"></a>什么是组件化？</h2><ul><li>一个页面中所有的处理逻辑全部放在一起，处理器来就会变得非常复杂，而且不利于后续的管理以及扩展，但如果可以将一个页面拆分成一个一个小的功能快，每个功能块完成属于自己这部分独立的功能那么整个页面的管理和维护就变得非常容易了；</li></ul><h2 id="组件化思想"><a href="#组件化思想" class="headerlink" title="组件化思想"></a>组件化思想</h2><ul><li>这是一种抽象，让我们可以开发出一个个独立可复用的小组件，之后再来构造我们的应用；</li><li>任何的应用都会被抽象成一棵组件树；</li></ul><h2 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h2><ol><li>调用Vue.extend()方法创建组件构造器</li><li>调用Vue.component()方法注册组件</li><li>在Vue实例的作用范围内使用组件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    // 在Vue实例的作用范围内使用组件</span><br><span class="line">        <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.创建组件构造器对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">        &lt;p&gt;你饿了吗？&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">        &lt;p&gt;我好想吃饭啊！&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;/div&gt;`</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.注册组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>,cpnC);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好呀&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注册组件步骤解析"><a href="#注册组件步骤解析" class="headerlink" title="注册组件步骤解析"></a>注册组件步骤解析</h3><ol><li><p>Vue.extend():</p><ol><li>调用Vue.extend()创建的是一个组件构造器</li><li>通常在创建组件构造器时。闯入template代表我们自定义组件的模板，该模板在使用到组件的地方显示HTML代码</li></ol></li><li><p>Vue.component():</p><ol><li>调用Vue.component()是将刚才的组件注册为一个组件，并给该组件起一个标签名称</li><li>传递两个参数：1.注册组件的标签名 2.组件构造器</li></ol></li><li><p>组件必须挂载在某个Vue实例下，否则他不会生效</p></li></ol><h3 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h3><ul><li>当我们通过调用Vue.component()注册时，组件的注册是全局的，该组件可以在任意Vue实例下使用</li><li>如果我们注册的组件是挂载在某个实例中，那么就是一个局部组件</li></ul><h2 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h2><ul><li><p>组件之间存在层级关系，最重要的一种就是父子组件关系</p></li><li><p>子组件注册到父组件的component时，Vue会编译好父组件的模块，此时父组件中已经有了子组件中的内容了</p></li><li><p>注意：</p><ul><li>父子组件错误用法：以子标签的形式在Vue实例中使用，子组件的标签只能在父组件中识别，在浏览器中会被忽略</li></ul></li><li><p>组件语法糖：</p></li></ul><h2 id="模板的分离写法："><a href="#模板的分离写法：" class="headerlink" title="模板的分离写法："></a>模板的分离写法：</h2><ul><li>Vue提供了<template>标签实现模板的分离写法，使得结构更加清晰</li></ul><h2 id="组件数据的存放"><a href="#组件数据的存放" class="headerlink" title="组件数据的存放"></a>组件数据的存放</h2><ol><li><p>组件对象自己本身也有一个data属性（methods属性）</p></li><li><p>组件中的data属性必须是一个函数，该函数返回的是一个对象，对象内部保存着属性</p></li><li><p>data是函数的原因：Vue让每一个组件对象都返回一个新的对象，因为如果是同一个对象，组件在多次使用后会相互影响</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础语法</title>
      <link href="/2021/05/12/vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/05/12/vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="模板语法-Mustache"><a href="#模板语法-Mustache" class="headerlink" title="模板语法 Mustache"></a>模板语法 Mustache</h2><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><ul><li>该指令后面不需要跟任何表达式</li><li>该指令表示元素和组件只会渲染一次，不会随着数据的改变而改变</li></ul><h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好呀&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染一次之后，message改变，界面中的v-one下的标签不会发生改变，仍然显示的是 “你好呀”</p><h3 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h3><ul><li>该指令后面往往会跟上一个string类型</li><li>会将string的HTML解析出来并渲染</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">message</span>: <span class="string">&#x27;你好呀&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">url</span>: <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第一个url显示的是字符串，第二个则被渲染，显示”百度一下“的连接；</li></ul><h3 id="v-text-指令"><a href="#v-text-指令" class="headerlink" title="v-text 指令"></a>v-text 指令</h3><ul><li>v-text通常情况下，接受一个string类型，将数据显示在界面中，但是字符串不会被渲染</li></ul><h3 id="v-pre-指令"><a href="#v-pre-指令" class="headerlink" title="v-pre 指令"></a>v-pre 指令</h3><ul><li>用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;，前端小伙<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;,前端大牛<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好呀&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第一个h2元素显示的是: ，前端小伙</li><li>第二个h2元素显示：你好呀,前端大牛</li></ul><h3 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h3><ul><li>作用：让未编译的Mustache标签先隐藏，编译完毕之后才显示</li><li>用法：要设置css 表示为编译成功时，先隐藏</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">   <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">   &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">   &#123;&#123;message&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h3><ul><li>作用：动态绑定属性 比如动态绑定a元素的href属性，动态绑定img元素的src属性</li><li>缩写（语法糖）： ：</li><li>预期：any(with argument)|Object(without argument)</li><li>参数：attrOrProp(optional)</li></ul><h4 id="使用代码示例"><a href="#使用代码示例" class="headerlink" title="使用代码示例"></a>使用代码示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--错误的做法：这里不可以使用mushache语法--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;img src=&quot;&#123;&#123;imgUrl&#125;&#125;&quot;&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--v-bind 的语法糖写法--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">message</span>: <span class="string">&#x27;你好呀&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">imgUrl</span>: <span class="string">&#x27;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">aHref</span>: <span class="string">&#x27;http://baidu.com&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind绑定class（一）-对象语法"><a href="#v-bind绑定class（一）-对象语法" class="headerlink" title="v-bind绑定class（一）[对象语法]"></a>v-bind绑定class（一）[对象语法]</h3><ul><li><p>很多时候我们希望动态的来切换class：如：</p><ul><li>当数据为某个状态时，字体显示红色</li><li>当数据另一个状态时，字体显示黑色</li></ul></li><li><p>用法代码如下：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;h2 class=&quot;active&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;h2 class=&quot;active&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;h2 v-bind:class=&quot;&#123;key1:value1,key2:vlaue2&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;h2 v-bind:class=&quot;&#123;类名1:true,类名2:false&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive, line:isLine&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;getClass()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">message</span>: <span class="string">&#x27;你好呀&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">isLine</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">btnClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.isActive = !<span class="built_in">this</span>.isActive;</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="attr">getClass</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">active</span>:<span class="built_in">this</span>.isActive, <span class="attr">line</span>:<span class="built_in">this</span>.isLine&#125;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind绑定class（二）-数组语法"><a href="#v-bind绑定class（二）-数组语法" class="headerlink" title="v-bind绑定class（二）[数组语法]"></a>v-bind绑定class（二）[数组语法]</h3><ul><li>代码如下：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[active,line]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;getClasses()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">message</span>: <span class="string">&#x27;你好呀&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">active</span>: <span class="string">&#x27;aaaa&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">line</span>: <span class="string">&#x27;abababa&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">getClasses</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> [<span class="built_in">this</span>.active, <span class="built_in">this</span>.line]</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建新文章和生成页面</title>
      <link href="/2021/05/07/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%96%B0%E6%96%87%E7%AB%A0%E5%92%8C%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2/"/>
      <url>/2021/05/07/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%96%B0%E6%96%87%E7%AB%A0%E5%92%8C%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>创建文章的命令：</p><p><img src="https://cdn.jsdelivr.net/gh/victory-zzm/CDN/img/%E5%B1%95%E6%9C%9B.jpg" alt="创建文章命令"></p><h1 id="创建一个一级标题"><a href="#创建一个一级标题" class="headerlink" title="创建一个一级标题"></a>创建一个一级标题</h1><p>代码测试内容</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用标签</title>
      <link href="/2021/05/01/%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
      <url>/2021/05/01/%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="1-链接标签-重点"><a href="#1-链接标签-重点" class="headerlink" title="1.链接标签(重点)"></a>1.链接标签(重点)</h4><ul><li><p>语法格式</p></li><li><p>```html<br><a href> = “跳转目标” target = “目标窗口的弹出方式”&gt;文本或图像</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 属性   | 作用                                                         |</span><br><span class="line">| :----- | ------------------------------------------------------------ |</span><br><span class="line">| href   | 用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能 |</span><br><span class="line">| target | 用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，__blank为在新窗口中打开方式。 |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 注意：</span><br><span class="line"></span><br><span class="line">1. 外部链接 需要添加 http:// www.baidu.com</span><br><span class="line">2. 内部链接 直接连接内部页面名称即可 如&lt; a href=&quot;index.html&quot;&gt; 首页 &lt;/a &gt;</span><br><span class="line">3. 如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=&quot;#&quot;)，表示该链接暂时为一个空链接</span><br><span class="line">4. 不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接</span><br><span class="line"></span><br><span class="line">#### 相对路径</span><br><span class="line"></span><br><span class="line">- 相对路径，是从代买所在的这个文件出发，去寻找我们的目标文件，而我们所说的上一级，下一级，同一级，简单说，就是图片位于HTML 页面的位置</span><br><span class="line"></span><br><span class="line">#### 绝对路径</span><br><span class="line"></span><br><span class="line">- 绝对路径以Web站点根目录为参考基础的目录路径，之所以成为绝对路径，意指当前所有网页引用同一个文件时，所使用的路径是一样的；</span><br><span class="line">- 如：“D:\web\img\logo.gif”，或完整的网络地址，例如“http://www.itcast.cn/images/logo.gif”。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###  表格</span><br><span class="line"></span><br><span class="line">###### 表格的作用：用于显示、展示表格数据</span><br><span class="line"></span><br><span class="line">#### 1. 创建表格</span><br><span class="line"></span><br><span class="line">在HTML网页中，要想创建表格，就需要使用表格相关的标签</span><br><span class="line"></span><br><span class="line">##### 创建表格的相关语法：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;单元格内的文字&lt;/td&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li></ul><p>要深刻体会格、行、单元格的构成：</p><ol><li>table用于定义一个表格标签</li><li>tr标签用于定义表格中的行，必须嵌套在table标签中</li><li>td用于定义表格中的单元格（tr中有多少个td则是有多少列）必须嵌套在<tr></tr>标签中</li><li>字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的</li></ol><p>**总结： **</p><ul><li>表格的主要目的是用来显示特殊数据的</li><li>一个完整的表格有表格标签（table），行标签（tr），单元格标签（td）组成，没有列的标签</li></ul><ul><li><tr></tr>中只能嵌套<td></td> 类的单元格</li><li><td></td>标签，他就像一个容器，可以容纳所有的元素</li></ul><h4 id="2-表格属性"><a href="#2-表格属性" class="headerlink" title="2.表格属性"></a>2.表格属性</h4><ul><li>cellspacing: 设置单元格与单元格边框之间的空白间距</li><li>cellpadding: 设置单元格内容与单元格边框之间的空白间距</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span>   <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>55<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>郭富城<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>52<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>58<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>黎明<span class="tag">&lt;/<span class="name">td</span>&gt;</span>   <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>刘晓庆<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>63<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-表头单元格标签th"><a href="#3-表头单元格标签th" class="headerlink" title="3.表头单元格标签th"></a>3.表头单元格标签th</h4><ul><li><p>作用</p><ul><li>一般表头单元格位于表格的第一行或第一列并且文本加粗居中</li></ul></li><li><p>语法：</p><ul><li>只需要表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。</li></ul></li></ul><p>th 也是一个单元格   只不过和普通的 td单元格不一样，它会让自己里面的文字居中且加粗</p><h4 id="4-表格标题-caption"><a href="#4-表格标题-caption" class="headerlink" title="4. 表格标题 caption"></a>4. 表格标题 caption</h4><p><strong>定义和用法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**注意： **</p><ol><li>caption 元素定义<strong>表格标题</strong>，通常这个标题会被居中且显示于表格之上。</li><li>caption 标签必须紧随 table 标签之后。</li><li>这个标签只存在 表格里面才有意义。你是风儿我是沙</li></ol><h4 id="5-1-合并单元格的2种方式"><a href="#5-1-合并单元格的2种方式" class="headerlink" title="5.1 合并单元格的2种方式"></a>5.1 合并单元格的2种方式</h4><ul><li>跨行合并： rowspan = “合并单元格的个数”</li><li>跨列合并：colspan= “合并单元格的个数”</li></ul><img src='./img/合并单元格.jpg'><h4 id="5-2-合并单元格顺序"><a href="#5-2-合并单元格顺序" class="headerlink" title="5.2 合并单元格顺序"></a>5.2 合并单元格顺序</h4><blockquote><p>**合并的顺序我们按照   先上 后下     先左  后右 的顺序 **</p></blockquote><p>跟我们以前学习汉字的书写顺序完全一致。</p><h4 id="5-3-合并单元格三步曲"><a href="#5-3-合并单元格三步曲" class="headerlink" title="5.3 合并单元格三步曲"></a>5.3 合并单元格三步曲</h4><ol><li>先确定是跨行还是跨列合并</li><li>根据 先上 后下   先左  后右的原则找到目标单元格    然后写上 合并方式 还有 要合并的单元格数量  比如 ： <td colspan="3">   </td></li><li>删除多余的单元格 单元格     </li></ol><h2 id="6-总结表格"><a href="#6-总结表格" class="headerlink" title="6. 总结表格"></a>6. 总结表格</h2><table><thead><tr><th>标签名</th><th align="left">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td><table></table></td><td align="left">表格标签</td><td align="left">就是一个四方的盒子</td></tr><tr><td><tr></tr></td><td align="left">表格行标签</td><td align="left">行标签要再table标签内部才有意义</td></tr><tr><td><td></td></td><td align="left">单元格标签</td><td align="left">单元格标签是个容器级元素，可以放任何东西</td></tr><tr><td><th></th></td><td align="left">表头单元格标签</td><td align="left">它还是一个单元格，但是里面的文字会居中且加粗</td></tr><tr><td><caption></caption></td><td align="left">表格标题标签</td><td align="left">表格的标题，跟着表格一起走，和表格居中对齐</td></tr><tr><td>clospan 和 rowspan</td><td align="left">合并属性</td><td align="left">用来合并单元格的</td></tr></tbody></table><ol><li>表格提供了HTML 中定义表格式数据的方法。</li><li>表格中由行中的单元格组成。</li><li>表格中没有列元素，列的个数取决于行的单元格个数。</li><li>表格不要纠结于外观，那是CSS 的作用。</li><li>表格的学习要求：  能手写表格结构，并且能简单合并单元格。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue生命周期总结</title>
      <link href="/2021/04/26/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
      <url>/2021/04/26/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="Vue生命周期图"><a href="#Vue生命周期图" class="headerlink" title="Vue生命周期图"></a>Vue生命周期图</h3><ul><li>每一个vue实例从创建到销毁的过程，就是这个vue实例的生命周期。在这个过程中，他经历了从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程。那么这些过程中，具体vue做了些啥，我们今天来了解一下。</li></ul><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期"></p><p>首先，从图上，我们可以看出，他的一个过程是</p><ol><li>new Vue()实例化一个vue实例，然后init初始化event 和 lifecycle， 其实这个过程中分别调用了3个初始化函数（initLifecycle(), initEvents(), initRender()），分别初始化了生命周期，事件以及定义createElement函数，初始化生命周期时，定义了一些属性，比如表示当前状态生命周期状态得_isMounted ，_isDestroyed ，_isBeingDestroyed，表示keep-alive中组件状态的_inactive，而初始化event时，实际上就是定义了$once、$off、$emit、$on几个函数。而createElement函数是在初始化render时定义的（调用了initRender函数）</li><li>执行beforeCreate生命周期函数</li><li>beforeCreate执行完后，会开始进行数据初始化，这个过程，会定义data数据，方法以及事件，并且完成数据劫持observe以及给组件实例配置watcher观察者实例。这样，后续当数据发生变化时，才能感知到数据的变化并完成页面的渲染</li><li>执行created生命周期函数，所以，当这个函数执行的时候，我们已经可以拿到data下的数据以及methods下的方法了，所以在这里，我们可以开始调用方法进行数据请求了</li><li>created执行完后，我们可以看到，这里有个判断，判断当前是否有el参数(这里为什么需要判断，是因为我们后面的操作是会依赖这个el的，后面会详细说)，如果有，我们再看是否有template参数。如果没有el，那么我们会等待调用$mount(el)方法(后面会详细说)。</li><li>确保有了el后，继续往下走，判断当有template参数时，我们会选择去将template模板转换成render函数（其实在这前面是还有一个判断的，判断当前是否有render函数，如果有的话，则会直接去渲染当前的render函数，如果没有那么我们才开始去查找是否有template模板），如果没有template，那么我们就会直接将获取到的el（也就是我们常见的#app，#app里面可能还会有其他标签）编译成templae, 然后在将这个template转换成render函数。</li><li>之后再调用beforMount， 也就是说实际从creted到beforeMount之间，最主要的工作就是将模板或者el转换为render函数。并且我们可以看出一点，就是你不管是用el，还是用template, 或者是用我们最常用的.vue文件(如果是.vue文件，他其实是会先编译成为template)，最终他都是会被转换为render函数的。</li><li>beforeMount调用后，我们是不是要开始渲染render函数了，首先我们会先生产一个虚拟dom（用于后续数据发生变化时，新老虚拟dom对比计算），进行保存，然后再开始将render渲染成为真实的dom。渲染成真实dom后，会将渲染出来的真实dom替换掉原来的vm.$el（这一步我们可能不理解，请耐心往下看，后面我会举例说明）,然后再将替换后的$el append到我们的页面内。整个初步流程就算是走完了</li><li>之后再调用mounted，并将标识生命周期的一个属性_isMounted 置为true。所以mounted函数内，我们是可以操作dom的，因为这个时候dom已经渲染完成了。</li><li>再之后，只有当我们状态数据发生变化时,我们在触发beforeUpdate，要开始将我们变化后的数据渲染到页面上了（实际上这里是有个判断的，判断当前的isMounted是不是为ture并且isDestroyed是不是为false，也就是说，保证dom已经被挂载的情况下，且当前组件并未被销毁，才会走update流程）<br>beforeUpdate调用之后，我们又会重新生成一个新的虚拟dom(Vnode)，然后会拿这个最新的Vnode和原来的Vnode去做一个diff算，这里就涉及到一系列的计算，算出最小的更新范围，从而更新render函数中的最新数据，再将更新后的render函数渲染成真实dom。也就完成了我们的数据更新</li><li>_然后再执行updated，所以updated里面也可以操作dom，并拿到最新更新后的dom。不过这里我要插一句话了，mouted和updated的执行，并不会等待所有子组件都被挂载完成后再执行，所以如果你希望所有视图都更新完毕后再做些什么事情，那么你最好在mouted或者updated中加一个$nextTick（），然后把要做的事情放在$netTick()中去做（至于为什么，以后讲到$nextTick再说吧）</li><li>_再之后beforeDestroy没啥说的，实例销毁前，也就是说在这个函数内，你还是可以操作实例的<br>之后会做一系列的销毁动作，解除各种数据引用，移除事件监听，删除组件_watcher，删除子实例，删除自身self等。同时将实例属性_isDestroyed置为true</li><li>销毁完成后，再执行destroyed</li></ol><h4 id="总的来说就是八个周期："><a href="#总的来说就是八个周期：" class="headerlink" title="总的来说就是八个周期："></a>总的来说就是八个周期：</h4><p>它可以总共分为8个阶段：</p><ol><li><p><strong>beforeCreate（创建前）</strong>,执行完毕之后，进行数据的初始化，这个过程，会定义data数据，methods方法、以及事件，并且完成数据的劫持，以及给组件实例配置watcher观察者实例；</p></li><li><p><strong>created（创建后）</strong>,可以拿到data下的数据以及methods下的方法了，这里就可以开始调用方法进行数据请求了；这个过程中会判断当前是否有el参数，，确保有el参数则会继续判断是否有template参数，有就将template模板转换为render函数，若没有template参数，会直接键获取到的el(即常见的#app)编译成template,最后将template转换成render函数；</p></li><li><p>**beforeMount(载入前)**，开始渲染render函数，首先会生产一个虚拟dom（用于后续数据发生变化时，新老虚拟DOM对比计算），进行保存，然后将render渲染成为真实的DOM，渲染出来的真实的dom会替换掉原来的vm.el，然后将替换后的$el append到我们的页面内；</p></li><li><p><strong>mounted（载入后）</strong>，这个过程会将标记生命周期的一个属性isMounted置为true，所以mounted函数内，我们是可以操作DOM的，因为这个时候DOM已经渲染完成了；</p></li><li><p><strong>beforeUpdate（更新前）</strong>,只有当我们的状态数据发生改变时，这个函数才会触发。这个过程会将我们变化后的数据渲染的页面上（这里有个判断，判断当前的isMounted是否为true并且isDestroyed是否为false，也就是说要确保DOM已经被挂载并且当前组件未被销毁的情况下，才会走update流程），即是会重新生成一个新的虚拟DOM，与原来的虚拟DOM去做diff计算，涉及一系列的计算，算出最小的更新范围，然后更新render函数中的最新数据，最后将render函数渲染成真实DOM</p></li><li><p><strong>updated（更新后）</strong>，这里可以拿到最新更新后的DOM，并且可以操作DOM进行页面的交互；</p></li><li><p><strong>beforeDestroy（销毁前</strong>），实例销毁前，可以操作实例的一系列销毁动作，解除各种数据引用、移除事件监听、删除组件watcher、删除子实例、删除自身等，同时将实例属性isDestroyed置为true；</p></li><li><p><strong>destroyed（销毁后）</strong>，销毁完成后，再执行destroyed，整个生命流程结束；</p></li></ol><h3 id="1-展示没有template和render的实例"><a href="#1-展示没有template和render的实例" class="headerlink" title="1.展示没有template和render的实例"></a>1.展示没有template和render的实例</h3><ul><li>代码以及总结如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;changeMsg&quot;&gt;改变&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#x27;hello world&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeMsg () &#123;</span><br><span class="line">                this.message = &#x27;goodbye world&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            console.log(&#x27;------初始化前------&#x27;);</span><br><span class="line">            console.log(this.message);  //this.message即是上面初始化的文字消息</span><br><span class="line">            console.log(this.changeMsg);//this.即是上面定义的方法</span><br><span class="line">            console.log(this.$el);      //this.$el即是上面的#app,组件和标签内容</span><br><span class="line">        &#125;,</span><br><span class="line">        created () &#123;</span><br><span class="line">            console.log(&#x27;------初始化完成------&#x27;)</span><br><span class="line">            console.log(this.message);</span><br><span class="line">            console.log(this.changeMsg);</span><br><span class="line">            console.log(this.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount () &#123;</span><br><span class="line">            console.log(&#x27;------挂载前---------&#x27;)</span><br><span class="line">            console.log(this.message)</span><br><span class="line">            console.log(this.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted () &#123;</span><br><span class="line">            console.log(&#x27;------挂载完成---------&#x27;)</span><br><span class="line">            console.log(this.message)</span><br><span class="line">            console.log(this.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate () &#123;</span><br><span class="line">            console.log(&#x27;------更新前---------&#x27;)</span><br><span class="line">            console.log(this.message)</span><br><span class="line">            console.log(this.$el)</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            console.log(&#x27;------更新后---------&#x27;)</span><br><span class="line">            console.log(this.message)</span><br><span class="line">            console.log(this.$el)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    /* 总结</span><br><span class="line">    1.这次只是执行了4个生命周期函数，分别为beforeCreate,created,beforeMount,mounted;</span><br><span class="line">    2.beforeCreate执行时，尚未获取到数据data和this.$el标签以及方法this.changeMsg</span><br><span class="line">    3.created执行时，初始化已经完成，我们可以拿到data中的message数据和this.changeMsg方法了,但是未能够获取到this.$el，因为此时尚未进行数据的渲染</span><br><span class="line">    4.beforeMount中，我们拿到了$el,另外在mounted中我们也拿到了$el,不过两者拿到的this.$el是不一样的</span><br><span class="line">    beforeMount拿到的是渲染前的$el（即是页面中的#app），而mounted拿到的是渲染后的(即是message被渲染的页面中)</span><br><span class="line">    5.继续执行，发现没有找到render函数，也没有找到template，因此vue会将el(#app)编译成template模板，再转换成render函数</span><br><span class="line">    最后将render函数渲染成真实的DOM，此时渲染出来的DOM会去替换原来的vm.$el(虚拟DOM)</span><br><span class="line">    */</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
